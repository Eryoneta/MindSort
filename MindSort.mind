<mind fontName="Courier New" fontSize="12" fontStyle="0">	<mod border="0" color="999999" icons="" title="MindSort" x="365" y="-116">		<text>+ MindSort:
- Um software para organizar idéias.</text>	</mod>	<mod border="0" color="999999" icons="" title="States" x="356" y="-119">		<text>+ States:
- Se for seguido a sequência do 2^n, todos os números tem uma soma única.
. 1, 2, 4, 8, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, etc...
- Mas, se reservar os 10 primeiros lugares, resulta em mais opções, desde que eles não sejam somados.
. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 40, 80, 160, 320, 640, 1280, 5120, 10240, 40960, 81920. etc...
- Mais opções se abrem se cada unidade tiver 10 opções, existindo grupos que não podem ser somados entre si próprios:
. O int permite até [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].
- Se quiser poder somar dentro dos grupos, deverá utilizar a sequência do 2^n:
. [1,2,4],[1,2,4],[1,2,4],[1,2,4],[1,2,4],[1,2,4],[1,2,4],[1,2,4],[1,2,4],[1,2,4].</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="NORMAL" x="305" y="147">		<text>+ NORMAL:
- Nada ocorre.
	setCursor(NORMAL);</text>	</mod>	<mod border="0" color="00C81B" icons="" title="TO_CREATE" x="485" y="358">		<text>+ TO_CREATE:
- O mod hover brilha em verde.
	setCursor(CREATE+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_move" x="484" y="361">		<text>+ mouse_move:
	unSelectAll();
	mod=getMod(mouse);
	if(mod){
		selectToBeCreator(mod);
	}else{
		cox=getCox(mouse);
		if(cox){
			seg=cox.getSeg(mouse);
			selectToBeCreator(seg);
		}
	}
	draw();</text>	</mod>	<mod border="0" color="00C81B" icons="" title="WAITING2 +&#10;TO_CREATE" x="402" y="454">		<text>+ WAITING2+TO_CREATE:
- Decide se cria o mod-son conectado ao mod-pai seguindo o mouse com drag ou move.
- Também pode criar um nod em um cox.
- Ele possui mod ou seg.
	if([mod]){
		setCursor(MOVE+SELECT);
	}else{
		setCursor(CREATE+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="418" y="457">		<text>+ LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="404" y="461">		<text>+ LEFT:</text>	</mod>	<mod border="0" color="00C81B" icons="" title="DRAG +&#10;TO_CREATE" x="465" y="455">		<text>+ DRAG+TO_CREATE:
- O mod recém-criado segue o mouse com drag.
- Ele possui mod ou nod.
	setCursor(MOVE+SELECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="464" y="354">		<text>+ mod:
	select(mod);
	setState(WAITING2+TO_CREATE);	//Não envia mod</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="480" y="456">		<text>+ LEFT:
	if([mod]){
		addAndSelect([mod]);
	}else if([nod]){
		addAndSelect([nod]);
	}
	setState(NORMAL);</text>	</mod>	<mod border="0" color="00C81B" icons="" title="MOVE +&#10;TO_CREATE" x="378" y="502">		<text>+ MOVE+TO_CREATE:
- O mod recém-criado segue o mouse com move.
- Ele possui mod.
	setCursor(MOVE+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="393" y="504">		<text>+ LEFT:
	addAndSelect(mod);
	setState(NORMAL);</text>	</mod>	<mod border="0" color="00C81B" icons="" title="DRAG_ALL +&#10;MOVE +&#10;TO_CREATE" x="377" y="524">		<text>+ DRAG_ALL+MOVE+TO_CREATE:
- A tela é movida.
- Ele possui mod.
	setCursor(DRAG+MOVE+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="363" y="503">		<text>+ MIDDLE:
	setState(DRAG_ALL+MOVE+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="379" y="536">		<text>+ MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="393" y="529">		<text>+ MIDDLE:
	setState(MOVE+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="468" y="358">		<text>+ MIDDLE:
	setState(DRAG_ALL+TO_CREATE);</text>	</mod>	<mod border="0" color="00C81B" icons="" title="DRAG_ALL +&#10;TO_CREATE" x="484" y="373">		<text>+ DRAG_ALL+TO_CREATE:
- A tela é movida.
	setCursor(DRAG+CREATE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="486" y="380">		<text>+ MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="500" y="373">		<text>+ MIDDLE:
	setState(TO_CREATE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="387" y="453">		<text>+ MIDDLE:
	setState(DRAG_ALL+WAITING2+TO_CREATE,[mod],[seg]);	//Envia [mod] e [seg]</text>	</mod>	<mod border="0" color="00C81B" icons="" title="DRAG_ALL +&#10;WAITING2 +&#10;TO_CREATE" x="402" y="475">		<text>+ DRAG_ALL+WAITING2+TO_CREATE:
- A tela é movida.
- Ele possui mod ou seg.
	if([mod]){
		setCursor(DRAG+MOVE+SELECT);
	}else{
		setCursor(DRAG+CREATE+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="404" y="484">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="418" y="482">		<text>+ MIDDLE:
	setState(WAITING2+TO_CREATE,[mod],[seg]);	//Envia [mod] e [seg]</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="480" y="459">		<text>+ MIDDLE:
	setState(DRAG_ALL+DRAG+TO_CREATE,[mod],[nod]);	//Envia [mod] e [nod]</text>	</mod>	<mod border="0" color="00C81B" icons="" title="DRAG_ALL +&#10;DRAG +&#10;TO_CREATE" x="465" y="469">		<text>+ DRAG_ALL+DRAG+TO_CREATE:
- A tela é movida.
- Ele possui mod.
	setCursor(DRAG+MOVE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="467" y="478">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="481" y="474">		<text>+ MIDDLE:
	setState(DRAG+TO_CREATE,[mod],[nod]);	//Envia [mod] e [nod]</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="469" y="355">		<text>+ LEFT:
	mod=getMod(mouse);</text>	</mod>	<mod border="0" color="00C81B" icons="" title="WAITING1 +&#10;TO_CREATE" x="452" y="404">		<text>+ WAITING1+TO_CREATE:
- Decide se cria um mod ou seleciona uma área verde.
- Ele possui mod.
	if([mod]){
		setCursor(MOVE+SELECT);
	}else{
		setCursor(CREATE+SELECT);
	}</text>	</mod>	<mod border="0" color="00C81B" icons="" title="SELECT_AREA +&#10;TO_CREATE" x="517" y="396">		<text>+ SELECT_AREA+TO_CREATE:
- Uma área verde ou azul seleciona todos os mods dentro.
- Ele possui mod.
	if([mod]){
		setCursor(AREA_PAI+SELECT);
	}else{
		setCursor(AREA_CREATE+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="520" y="417">		<text>+ LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="290" y="150">		<text>+ RIGHT:
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="531" y="299">		<text>+ mod:
	if(mod!=SELECT)unSelectAll();
	unSelect(mod);
	select(mod);
	popup.show(mouse,mod);</text>	</mod>	<mod border="0" color="999999" icons="" title="Detalhes" x="357" y="-116">		<text>+ Detalhes:
- Ao verificar quais são os modifiers(Ctrl e Shift), se verifica do caso "cheio" ao "vazio", do ctrl+shift+click ao click.
. Isso evita que ocorra a detecção de ctrl+click antes do  ctrl+shift+click, por exemplo.
- Ao mudar de State, é bom evitar o fazer com mouse_down, uma vez que isso imediatamente ativa qualquer mouse_down do novo State, se o tiver.
. O mesmo vale para key_down.</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="525" y="313">		<text>+ RIGHT:
	setState(NORMAL);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="RIGHT +&#10;WAITING1 +&#10;NORMAL" x="509" y="299">		<text>+ RIGHT+WAITING1+NORMAL:
- Decide se move a tela ou se abre a caixa de opções.
	setCursor(SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="511" y="308">		<text>+ RIGHT:
	unSelectAll();
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();
	setState(DRAG_ALL+RIGHT+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="525" y="300">		<text>+ RIGHT:
	mod=getMod(mouse);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="DRAG_ALL +&#10;RIGHT +&#10;NORMAL" x="509" y="312">		<text>+ DRAG_ALL+RIGHT+NORMAL:
- A tela é movida.
	setCursor(DRAG+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="286" y="236">		<text>+ MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="511" y="321">		<text>+ mouse_drag_right:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_move" x="377" y="512">		<text>+ mouse_move:
- O [mod] deve existir!
	[mod].setLocal(mouse);	//Muda o X e Y do [mod] de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="466" y="462">		<text>+ mouse_drag_left:
- O [mod] deve existir!
	//Muda o X e Y do [mod] ou [nod] de acordo com o mouse
	if([mod]){
		[mod].setLocal(mouse);
	}else if([nod]){
		[nod].setLocal(mouse);
	}
	draw();</text>	</mod>	<mod border="0" color="999999" icons="" title="Inputs" x="373" y="-116">		<text>+ Inputs:
- Tela cheia:
	F11
- Salvar:
	KEY_CTRL_DOWN + KEY_S_CLICK
	Menu &gt; Arquivo &gt; Salvar
- Abrir:
	KEY_CTRL_DOWN + KEY_O_CLICK
	Menu &gt; Arquivo &gt; Abrir...
- Novo:
	KEY_CTRL_DOWN + KEY_N_CLICK
	Menu &gt; Arquivo &gt; Novo
- Fechar:
	KEY_CTRL_DOWN + KEY_W_CLICK
	Menu &gt; Arquivo &gt; Sair

- Modo Novo Módulo:
	KEY_CTRL_DOWN + KEY_G_CLICK
	Menu &gt; Editar &gt; Módulo &gt; Novo
. Solo:
	MOUSE_LEFT_UP
. Filho de outro:
	modForm(MOUSE_LEFT_UP)
. Filho de vários:
	...KEY_CTRL_DOWN + modForm(MOUSE_LEFT_UP)...
. Filho de vários em uma área:
	MOUSE_LEFT_DOWN &gt; MOUSE_MOVE
. Filho de vários em várias áreas:
	...MOUSE_LEFT_DOWN &gt; KEY_CTRL_DOWN + MOUSE_MOVE...
- Filho de todos os módulos selecionados:
	KEY_CTRL_DOWN + KEY_SHIFT_DOWN + KEY_G_CLICK

- Modo Nova Conexão:
	KEY_CTRL_DOWN + KEY_R_CLICK
	Menu &gt; Editar &gt; Módulo &gt; Relacionar
. Decide filho:
	modForm(MOUSE_LEFT_UP)
. Decide vários filhos:
	...KEY_CTRL_DOWN + modForm(MOUSE_LEFT_UP)...
. Filho de vários em uma área:
	MOUSE_LEFT_DOWN &gt; MOUSE_MOVE
. Filho de vários em várias áreas:
	...MOUSE_LEFT_DOWN &gt; KEY_CTRL_DOWN + MOUSE_MOVE...





				CTRL+R						MODO "CRIAR NOVA CONEXÃO"
					MODO-REL|LEFT-CLICK			CRIAR NOVA CONEXÃO(FILHO)
					MODO-REL|LEFT-CLICK			CRIAR NOVA CONEXÃO(PAI)
					MODO-REL|LEFT-PRESS-DRAG	CRIAR NOVA CONEXÃO A PARTIR DO MÓDULO PRESSIONADO(O FILHO)
				CTRL+SHIFT+R				CRIAR NOVA CONEXÃO(FILHO) COM TODOS OS MÓDULOS SELECIONADOS
				CTRL+D						MODO "DELETAR MÓDULO/CONEXÃO"
					MODO-DEL|LEFT-CLICK			DELETAR MÓDULO/CONEXÃO
				DEL							DELETAR TODOS OS MÓDULOS SELECIONADOS
			GERENCIAR:
				CTRL+Z						DESFAZER
				CTRL+Y						REFAZER
				CTRL+X						RECORTAR MÓDULOS SELECIONADOS
				CTRL+C						COPIAR MÓDULOS SELECIONADOS
				CTRL+V						COLAR MÓDULOS
				SCROLL						ZOOM/DEZOOM
				CTRL+F						FOCAR NO MÓDULO-MESTRE
				LEFT-PRESS-DRAG				ARRASTAR TELA/MÓDULOS SELECIONADOS
				LEFT-CLICK					MOSTRAR TEXTO EDITÁVEL DO MÓDULO
				LEFT-DOUBLE_CLICK			MOSTRAR TÍTULO EDITÁVEL DO MÓDULO
				RIGHT-CLICK					MOSTRA TABELA DE CORES / TABELA DE ÍCONES PARA O MÓDULO SELECIONADO
			SELECIONAR:
				CTRL+A						SELECIONAR TODOS OS MÓDULOS
				ESC							DESELECIONAR TODOS OS MÓDULOS
				LEFT-CLICK					SELECIONAR/DESELECIONAR APENAS MÓDULO CLICADO
				CTRL+LEFT-CLICK				SELECIONAR/DESELECIONAR MÓDULO CLICADO
				SHIFT-PRESS					SELECIONAR/DESELECIONAR FILHOS DOS MÓDULOS SELECIONADOS
				RIGHT-PRESS-DRAG			SELECIONAR APENAS MÓDULOS NA ÁREA
				CTRL+RIGHT-PRESS-DRAG		SELECIONAR MÓDULOS NA ÁREA
		TEXTO:
			PADRÃO</text>	</mod>	<mod border="0" color="FF0000" icons="" title="TO_DELETE" x="186" y="147">		<text>+ TO_DELETE:
- O objHover brilha em vermelho.
	setCursor(DELETE+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="468" y="406">		<text>+ LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="468" y="361">		<text>+ RIGHT:
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="363" y="506">		<text>+ RIGHT:
	addAndSelect(mod);
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="291" y="144">		<text>+ LEFT:
	mod=getMod(mouse);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;mouse_move" x="376" y="509">		<text>+ key_ctrl_down + mouse_move:
- O [mod] deve existir!
	[mod].setLocal(mouse);	//Muda o X e Y do [mod] de acordo com o mouse
	unSelectAll();
	modHover=getMod(mouse,[mod]);	//Seleciona para ser pai o mod hover
	if(modHover!=null){
		selectToBePai(modHover);
	}
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="502" y="395">		<text>+ mouse_middle_down:
	setState(DRAG_ALL+SELECT_AREA+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="00C81B" icons="" title="DRAG_ALL +&#10;SELECT_AREA +&#10;TO_CREATE" x="517" y="430">		<text>+ DRAG_ALL+SELECT_AREA+TO_CREATE:
- A tela é movida.
- Ele possui mod.
	if([mod]){
		setCursor(DRAG+AREA_PAI+SELECT);
	}else{
		setCursor(DRAG+AREA_CREATE+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="520" y="446">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="535" y="436">		<text>+ MIDDLE:
	setState(SELECT_AREA+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="517" y="410">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="480" y="452">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="EDIT_TITLE" x="489" y="259">		<text>+ EDIT_TITLE:
- Edição do titulo do módulo selecionado.
	setCursor(EDIT_TITLE+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="285" y="154">		<text>+ LEFT:
	mod=getMod(mouse);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="535" y="400">		<text>+ LEFT:
- Teoricamente bloqueado pelo key_ctrl_up e key_ctrl_up+mouse_left_up. Fica por precaução.
	selecao.setEmpty();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="505" y="259">		<text>+ LEFT:
	setTitulo(null);
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="474" y="262">		<text>+ RIGHT:
	setTitulo(null);
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="474" y="259">		<text>+ MIDDLE:
	setState(DRAG_ALL+EDIT_TITLE);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="DRAG_ALL +&#10;EDIT_TITLE" x="489" y="274">		<text>+ DRAG_ALL+EDIT_TITLE:
- A tela é movida.
	setCursor(DRAG+EDIT_TITLE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="505" y="276">		<text>+ MIDDLE:
	setState(EDIT_TITLE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="491" y="281">		<text>+ MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	titulo.updateLocal();
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="357" y="499">		<text>+ key_ctrl_down + LEFT:
	mod=getMod(mouse,[mod]);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_move" x="185" y="150">		<text>+ mouse_move:
	unSelectAll();
	mod=getMod(mouse);
	if(mod){
		selectToBeDeleted(mod);
	}else{
		nod=getNod(mouse);
		if(nod){
			selectToBeDeleted(nod);
		}else{
			cox=getCox(mouse);
			if(cox){
				selectToBeDeleted(cox);
			}
		}
	}
	draw();</text>	</mod>	<mod border="0" color="FF0000" icons="" title="WAITING1 +&#10;TO_DELETE" x="150" y="192">		<text>+ WAITING1+TO_DELETE:
- Decide se deleta um obj ou deleta uma área vermelha.
	setCursor(DELETE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="152" y="203">		<text>+ LEFT:
- Cria uma área de seleção vermelha.
. Todos os mods e nods dentro são selecionados para deletar, os fora são deselecionados.
	setArea(TO_DELETE,false,mouse);
	setState(SELECT_AREA+TO_DELETE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="149" y="199">		<text>+ key_ctrl_down + LEFT:
- Cria uma área de seleção vermelha.
. Todos os objs dentro são selecionados para deletar.
	setArea(TO_DELETE,true,mouse);
	setState(SELECT_AREA+TO_DELETE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="172" y="144">		<text>+ LEFT:
	setState(WAITING1+TO_DELETE);</text>	</mod>	<mod border="0" color="FF0000" icons="" title="SELECT_AREA +&#10;TO_DELETE" x="91" y="190">		<text>+ SELECT_AREA+TO_DELETE:
- Uma área vermelha seleciona todos os mods dentro.
	setCursor(AREA_DELETE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="94" y="204">		<text>+ LEFT:
- Extende uma área de seleção vermelha.
. Todos os mods e nods dentro são selecionados para deletar, os fora são deselecionados.
	setArea(TO_DELETE,false,mouse);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="76" y="189">		<text>+ MIDDLE:
	setState(DRAG_ALL+SELECT_AREA+TO_DELETE);</text>	</mod>	<mod border="0" color="FF0000" icons="" title="DRAG_ALL +&#10;SELECT_AREA +&#10;TO_DELETE" x="91" y="209">		<text>+ DRAG_ALL+SELECT_AREA+TO_DELETE:
- A tela é movida.
	setCursor(DRAG+AREA_DELETE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="109" y="214">		<text>+ MIDDLE:
	setState(SELECT_AREA+TO_DELETE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="91" y="201">		<text>+ key_ctrl_down + LEFT:
- Extende uma área de seleção vermelha.
. Todos os objs dentro são selecionados para deletar.
	setArea(TO_DELETE,true,mouse);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="171" y="147">		<text>+ MIDDLE:
	setState(DRAG_ALL+TO_DELETE);</text>	</mod>	<mod border="0" color="FF0000" icons="" title="DRAG_ALL +&#10;TO_DELETE" x="186" y="162">		<text>+ DRAG_ALL+TO_DELETE:
- A tela é movida.
	setCursor(DELETE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="188" y="169">		<text>+ MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="202" y="162">		<text>+ MIDDLE:
	setState(TO_DELETE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="166" y="191">		<text>+ key_ctrl_down + LEFT:
	obj=getObj(mouse);
	if(obj){
		if(objsSelec(obj)){
			delUndoable(objsSelec);
		}
	}
	draw();
	setState(TO_DELETE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="166" y="195">		<text>+ LEFT:
	obj=getObj(mouse);
	if(obj){
		if(objsSelec(obj)){
			delUndoable(objsSelec);
		}
	}
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="key_upArrow_down |&#10;key_KPUpArrow_down" x="285" y="158">		<text>+ key_upArrow_down:
- Muda o Y dos modsSelec e nodsSelec ou do tree de acordo com o mouse.
	if(objsSelec==0){
		tree.setLocal(tree.X,tree.Y-Y);
	}else{
		for(mod:modsSelec)mod.setLocal(mod.X,mod.Y-Y);
		for(nod:nodsSelec)nod.setLocal(nod.X,nod.Y-Y);
		savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
		addUndo(savedObjs,[0,Y],MOVE);
	}
	draw();</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="key_downArrow_down |&#10;key_KPDownArrow_down" x="284" y="168">		<text>+ key_downArrow_down:
- Muda o Y dos modsSelec e nodsSelec ou do tree de acordo com o mouse.
	if(objsSelec==0){
		tree.setLocal(tree.X,tree.Y+Y);
	}else{
		for(mod:modsSelec)mod.setLocal(mod.X,mod.Y+Y);
		for(nod:nodsSelec)nod.setLocal(nod.X,nod.Y+Y);
		savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
		addUndo(savedObjs,[0,-Y],MOVE);
	}
	draw();</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="key_rightArrow_down |&#10;key_KPRightArrow_down" x="283" y="178">		<text>+ key_rightArrow_down:
- Muda o X dos modsSelec e nodsSelec ou do tree de acordo com o mouse.
	if(objsSelec==0){
		tree.setLocal(tree.X+X,tree.Y);
	}else{
		for(mod:modsSelec)mod.setLocal(mod.X+X,mod.Y);
		for(nod:nodsSelec)nod.setLocal(nod.X+X,nod.Y);
		savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
		addUndo(savedObjs,[-X,0],MOVE);
	}
	draw();</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="key_leftArrow_down |&#10;key_KPLeftArrow_down" x="284" y="188">		<text>+ key_leftArrow_down:
- Muda o X dos modsSelec e nodsSelec ou do tree de acordo com o mouse.
	if(objsSelec==0){
		tree.setLocal(tree.X-X,tree.Y);
	}else{
		for(mod:modsSelec)mod.setLocal(mod.X-X,mod.Y);
		for(nod:nodsSelec)nod.setLocal(nod.X-X,nod.Y);
		savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
		addUndo(savedObjs,[X,0],MOVE);
	}
	draw();</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="key_ctrl_down +&#10;key_upArrow_down |&#10;key_ctrl_down +&#10;key_KPUpArrow_down" x="285" y="161">		<text>+ key_upArrow_down:
- Muda bastante o Y dos modsSelec e nodsSelec ou do tree de acordo com o mouse.
	if(objsSelec==0){
		tree.setLocal(tree.X,tree.Y-Y);
	}else{
		for(mod:modsSelec)mod.setLocal(mod.X,mod.Y-Y);
		for(nod:nodsSelec)nod.setLocal(nod.X,nod.Y-Y);
		savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
		addUndo(savedObjs,[0,Y],MOVE);
	}
	draw();</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="key_ctrl_down +&#10;key_downArrow_down |&#10;key_ctrl_down +&#10;key_downArrow_down" x="284" y="171">		<text>+ key_downArrow_down:
- Muda bastante o Y dos modsSelec e nodsSelec ou do tree de acordo com o mouse.
	if(objsSelec&gt;0){
		for(mod:modsSelec)mod.setLocal(mod.X,Y);
		for(nod:nodsSelec)nod.setLocal(nod.X,Y);
		savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
		addUndo(savedObjs,[0,-Y],MOVE);
	}else tree.setLocal(tree.X,Y);
	draw();</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="key_ctrl_down +&#10;key_rightArrow_down |&#10;key_ctrl_down +&#10;key_KPRightArrow_down" x="283" y="181">		<text>+ key_rightArrow_down:
- Muda bastante o X dos modsSelec e nodsSelec ou do tree de acordo com o mouse.
	if(objsSelec==0){
		tree.setLocal(tree.X+X,tree.Y);
	}else{
		for(mod:modsSelec)mod.setLocal(mod.X+X,mod.Y);
		for(nod:nodsSelec)nod.setLocal(nod.X+X,nod.Y);
		savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
		addUndo(savedObjs,[-X,0],MOVE);
	}
	draw();</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="key_ctrl_down +&#10;key_leftArrow_down |&#10;key_ctrl_down +&#10;key_KPLeftArrow_down" x="284" y="191">		<text>+ key_leftArrow_down:
- Muda bastante o X dos modsSelec e nodsSelec ou do tree de acordo com o mouse.
	if(objsSelec==0){
		tree.setLocal(tree.X-X,tree.Y);
	}else{
		for(mod:modsSelec)mod.setLocal(mod.X-X,mod.Y);
		for(nod:nodsSelec)nod.setLocal(nod.X-X,nod.Y);
		savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
		addUndo(savedObjs,[X,0],MOVE);
	}
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="535" y="394">		<text>+ key_ctrl_down + LEFT:
	selecao.setEmpty();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="481" y="471">		<text>+ LEFT:
	if([mod]){
		addAndSelect([mod]);
	}else if([nod]){
		addAndSelect([nod]);
	}
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="369" y="506">		<text>+ CTRL:
- Deve disparar apenas uma vez.
	modHover=getMod(mouse,[mod]);	//Seleciona para ser pai o mod hover
	if(modHover!=null){
		selectToBePai(modHover);
		draw();
	}
	setCursor(PAI+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="388" y="506">		<text>+ CTRL:
	unSelectAllMods();
	draw();
	setCursor(MOVE+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="437" y="403">		<text>+ MIDDLE:
	setState(DRAG_ALL+WAITING1+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="00C81B" icons="" title="DRAG_ALL +&#10;WAITING1 +&#10;TO_CREATE" x="451" y="429">		<text>+ DRAG_ALL+WAITING1+TO_CREATE:
- A tela é movida.
- Ele possui mod.
	if([mod]){
		setCursor(DRAG+MOVE+SELECT);
	}else{
		setCursor(DRAG+CREATE+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="453" y="438">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="467" y="436">		<text>+ MIDDLE:
	setState(WAITING1+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="DRAG_ALL +&#10;NORMAL" x="284" y="229">		<text>+ DRAG_ALL+NORMAL:
- A tela é movida.
	setCursor(DRAG+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="481" y="467">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="135" y="191">		<text>+ MIDDLE:
	setState(DRAG_ALL+WAITING1+TO_DELETE);</text>	</mod>	<mod border="0" color="FF0000" icons="" title="DRAG_ALL +&#10;WAITING1 +&#10;TO_DELETE" x="150" y="208">		<text>+ DRAG_ALL+WAITING1+TO_CREATE:
- A tela é movida.
	setCursor(DRAG+DELETE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_left_down +&#10;MIDDLE" x="148" y="217">		<text>+ mouse_left_down + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="166" y="213">		<text>+ MIDDLE:
	setState(WAITING1+TO_DELETE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="109" y="193">		<text>+ LEFT:
	delUndoable(objsSelec);
	selecao.setEmpty();
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="109" y="189">		<text>+ key_ctrl_down + LEFT:
	delUndoable(objsSelec);
	selecao.setEmpty();
	draw();
	setState(TO_DELETE);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!mod" x="463" y="357">		<text>+ !mod:
	cox=getCox(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec&gt;0" x="546" y="404">		<text>+ modsSelec&gt;0:
	newMod=createModRelacionado(mouse,modsSelec);
	setState(MOVE+TO_CREATE,newMod);	//Envia newMod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec==0" x="546" y="401">		<text>+ modsSelec==0:
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec&gt;0" x="553" y="398">		<text>+ modsSelec&gt;0:
	newMod=createModRelacionado(mouse,modsSelec);
	setState(MOVE+TO_CREATE,newMod);	//Envia newMod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec==0" x="553" y="395">		<text>+ modsSelec==0:
	draw();
	setState(TO_CREATE);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="353" y="498">		<text>+ mod:
	select(mod);
	setState(WAITING2+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="393" y="526">		<text>+ LEFT:
	addAndSelect(mod);
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="369" y="530">		<text>+ CTRL:
- Deve disparar apenas uma vez.
	modHover=getMod(mouse,[mod]);	//Seleciona para ser pai o mod hover
	if(modHover!=null){
		selectToBePai(modHover);
		draw();
	}
	setCursor(DRAG+PAI+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="388" y="530">		<text>+ CTRL:
	unSelectAllMods();
	select([mod]);
	draw();
	setCursor(DRAG+MOVE+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="545" y="299">		<text>+ end:
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="281" y="154">		<text>+ mod:
	unSelectAll();
	select(mod);
	draw();
	setTitulo(mod);	//TITULO ACIMA DO DRAW
	setState(EDIT_TITLE);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="286" y="143">		<text>+ mod:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod(SELECTED)" x="269" y="136">		<text>+ mod(SELECTED):
	setState(LEFT+WAITING2+NORMAL,mod);	//Envia mod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!mod" x="285" y="146">		<text>+ !mod:
	nod=getNod(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!mod" x="531" y="302">		<text>+ !mod:
	nod=getNod(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="cox" x="541" y="303">		<text>+ cox:
	if(cox!=SELECT)unSelectAll();
	unSelect(cox);
	select(cox);
	seg=cox.getSeg(mouse);
	popup.show(mouse,seg);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!cox" x="541" y="306">		<text>+ !cox:
	unSelectAll();
	popup.show(mouse,null);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="nod" x="536" y="301">		<text>+ nod:
	if(nod!=SELECT)unSelectAll();
	unSelect(nod);
	select(nod);
	popup.show(mouse,nod);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!nod" x="536" y="304">		<text>+ nodForm(!mouse):
	cox=getCox(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="nod" x="281" y="145">		<text>+ nod:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!nod" x="280" y="148">		<text>+ !nod:
	cox=getCox(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="cox" x="276" y="147">		<text>+ cox:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!cox" x="275" y="150">		<text>+ !cox:
	setState(LEFT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="LEFT +&#10;WAITING1 +&#10;NORMAL" x="389" y="146">		<text>+ LEFT+WAITING1+NORMAL:
- Decide se seleciona um obj, ou se cria uma área branca.
- Ele possui mod, nod, e cox.
	setCursor(SELECT);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="LEFT +&#10;WAITING2 +&#10;NORMAL" x="426" y="192">		<text>+ LEFT+WAITING2+NORMAL:
- Decide se deseleciona um obj, ou se move os modsSelec e nodsSelec.
- Ele possui mod, nod, ou cox.
	setCursor(SELECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod(!SELECTED)" x="280" y="136">		<text>+ mod(SELECTED):
	setState(LEFT+WAITING1+NORMAL,mod);	//Envia mod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="nod(SELECTED)" x="269" y="138">		<text>+ nod(SELECTED):
	setState(LEFT+WAITING2+NORMAL,nod);	//Envia nod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="nod(!SELECTED)" x="280" y="138">		<text>+ nod(SELECTED):
	setState(LEFT+WAITING1+NORMAL,nod);	//Envia nod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="cox(SELECTED)" x="269" y="140">		<text>+ cox(SELECTED):
	setState(LEFT+WAITING2+NORMAL,cox);	//Envia cox</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="cox(!SELECTED)" x="280" y="140">		<text>+ cox(SELECTED):
	setState(LEFT+WAITING1+NORMAL,cox);	//Envia cox</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="374" y="146">		<text>+ MIDDLE:
	setState(DRAG_ALL+LEFT+WAITING1+NORMAL,[mod],[cox],[nod]);
	//Envia [mod], [cox] e [nod].</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="DRAG_ALL +&#10;LEFT +&#10;WAITING1 +&#10;NORMAL" x="389" y="169">		<text>+ DRAG_ALL+LEFT+WAITING1+NORMAL:
- A tela é movida.
- Ele possui mod, nod, e cox.
	setCursor(DRAG+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="405" y="174">		<text>+ MIDDLE:
	setState(LEFT+WAITING1+NORMAL,[mod],[cox],[nod]);
	//Envia [mod], [cox] e [nod].</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="391" y="179">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="391" y="163">		<text>+ LEFT:
- Cria uma área de seleção branca.
. Todos os objs dentro são selecionados, os fora são deselecionados.
	setArea(TO_SELECT,false,mouse);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="388" y="159">		<text>+ key_ctrl_down + LEFT:
- Cria uma área de seleção branca.
. Todos os objs dentro são selecionados.
	setArea(TO_SELECT,true,mouse);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="463" y="149">		<text>+ LEFT:
	selecao.setEmpty();
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="SELECT_AREA +&#10;NORMAL" x="445" y="149">		<text>+ SELECT_AREA+NORMAL:
- Uma área branca seleciona todos os objs dentro.
	setCursor(AREA_SELECT+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="448" y="163">		<text>+ LEFT:
- Extende uma área de seleção branca.
. Todos os objs dentro são selecionados, os fora são deselecionados.
	setArea(TO_SELECT,false,mouse);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="445" y="160">		<text>+ key_ctrl_down + LEFT:
- Extende uma área de seleção branca.
. Todos os objs dentro são selecionados.
	setArea(TO_SELECT,true,mouse);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="430" y="151">		<text>+ MIDDLE:
	setState(DRAG_ALL+SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="DRAG_ALL +&#10;SELECT_AREA +&#10;NORMAL" x="445" y="168">		<text>+ DRAG_ALL+SELECT_AREA+NORMAL:
- A tela é movida.
	setCursor(DRAG+AREA_SELECT+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="448" y="180">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="463" y="171">		<text>+ MIDDLE:
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="463" y="168">		<text>+ LEFT:
	selecao.setEmpty();
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="411" y="192">		<text>+ MIDDLE:
	setState(DRAG_ALL+LEFT+WAITING2+NORMAL,[mod],[cox],[nod]);
	//Envia [mod], [cox] e [nod].</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="DRAG_ALL +&#10;LEFT +&#10;WAITING2 +&#10;NORMAL" x="426" y="209">		<text>+ DRAG_ALL+LEFT+WAITING2+NORMAL:
- A tela é movida.
- Ele possui mod, nod, ou cox.
	setCursor(DRAG+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="442" y="215">		<text>+ MIDDLE:
	setState(LEFT+WAITING2+NORMAL,[mod],[cox],[nod]);
	//Envia [mod], [cox] e [nod].</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="428" y="219">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="428" y="205">		<text>+ LEFT:
	if([cox]){
		for(cox:coxsSelec)for(nod:[cox].nods)select(nod);
	}
	//Muda o X e Y dos modsSelec e nodsSelec de acordo com o mouse.
	oldLocal=mouse;
	for(mod:modsSelec)mod.setLocal(mouse);
	for(nod:nodsSelec)nod.setLocal(mouse);
	draw();
	setState(DRAG+NORMAL);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="DRAG +&#10;NORMAL" x="479" y="195">		<text>+ DRAG+NORMAL:
- Todos os modsSelec e nodsSelec são movidos.
	setCursor(MOVE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="479" y="202">		<text>+ mouse_drag_left:
	//Muda o X e Y dos modsSelec e nodsSelec de acordo com o mouse.
	for(mod:modsSelec)mod.setLocal(mouse);
	for(nod:nodsSelec)nod.setLocal(mouse);
	draw();</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="LEFT" x="492" y="195">		<text>+ LEFT:
	savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
	addUndo(savedObjs,mouse-oldLocal,MOVE);
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="464" y="194">		<text>+ MIDDLE:
	setState(DRAG_ALL+DRAG+NORMAL);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="DRAG_ALL +&#10;DRAG +&#10;NORMAL" x="477" y="206">		<text>+ DRAG_ALL+DRAG+NORMAL:
- A tela é movida.
	setCursor(DRAG+MOVE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="479" y="215">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="493" y="209">		<text>+ MIDDLE:
	setState(DRAG+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="405" y="149">		<text>+ LEFT:
- Seleciona apenas o obj clicado.
	unSelectAll();
	if([mod]){
		if([mod].form(mouse))select([mod]);
	}else if([nod]){
		if([nod].form(mouse))select([nod]);
	}else if([cox]){
		if([cox].form(mouse))select([cox]);
	}
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="442" y="195">		<text>+ LEFT:
- Com apenas um objSelec, deseleciona tudo.
. Mas com vários, deixa selecionado o obj clicado.
	if(objsSelec==1){	//Para o efeito toggle selec/deselec
		unSelectAll();
	}else{
		unSelectAll();
		if([mod]){
			if([mod].form(mouse))select([mod]);
		}else if([nod]){
			if([nod].form(mouse))select([nod]);
		}else if([cox]){
			if([cox].form(mouse))select([cox]);
		}
	}
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="405" y="145">		<text>+ key_ctrl_down + LEFT:
- Seleciona o obj clicado.
	if([mod]){
		if([mod].form(mouse))select([mod]);
	}else if([nod]){
		if([nod].form(mouse))select([nod]);
	}else if([cox]){
		if([cox].form(mouse))select([cox]);
	}
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="442" y="191">		<text>+ key_ctrl_down + LEFT:
- Deseleciona o obj clicado.
	if([mod]){
		if([mod].form(mouse))unSelect([mod]);
	}else if([nod]){
		if([nod].form(mouse))unSelect([nod]);
	}else if([cox]){
		if([cox].form(mouse))unSelect([cox]);
	}
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="405" y="171">		<text>+ LEFT:
- Seleciona apenas o obj clicado.
	unSelectAll();
	if([mod]){
		if([mod].form(mouse))select([mod]);
	}else if([nod]){
		if([nod].form(mouse))select([nod]);
	}else if([cox]){
		if([cox].form(mouse))select([cox]);
	}
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="405" y="167">		<text>+ key_ctrl_down + LEFT:
- Seleciona o obj clicado.
	if([mod]){
		if([mod].form(mouse))select([mod]);
	}else if([nod]){
		if([nod].form(mouse))select([nod]);
	}else if([cox]){
		if([cox].form(mouse))select([cox]);
	}
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="442" y="212">		<text>+ LEFT:
- Com apenas um objSelec, deseleciona tudo.
. Mas com vários, deixa selecionado o obj clicado.
	if(objsSelec==1){	//Para o efeito toggle selec/deselec
		unSelectAll();
	}else{
		unSelectAll();
		if([mod]){
			if([mod].form(mouse))select([mod]);
		}else if([nod]){
			if([nod].form(mouse))select([nod]);
		}else if([cox]){
			if([cox].form(mouse))select([cox]);
		}
	}
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="442" y="208">		<text>+ key_ctrl_down + LEFT:
- Deseleciona o obj clicado.
	if([mod]){
		if([mod].form(mouse))unSelect([mod]);
	}else if([nod]){
		if([nod].form(mouse))unSelect([nod]);
	}else if([cox]){
		if([cox].form(mouse))unSelect([cox]);
	}
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="LEFT" x="493" y="206">		<text>+ LEFT:
	savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
	addUndo(savedObjs,mouse-oldLocal,MOVE);
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="166" y="206">		<text>+ key_ctrl_down + LEFT:
	obj=getObj(mouse);
	if(obj){
		if(objsSelec(obj)){
			delUndoable(objsSelec);
		}
	}
	draw();
	setState(DRAG_ALL+TO_DELETE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="166" y="210">		<text>+ LEFT:
	obj=getObj(mouse);
	if(obj){
		if(objsSelec(obj)){
			delUndoable(objsSelec);
		}
	}
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="109" y="211">		<text>+ LEFT:
	delUndoable(objsSelec);
	selecao.setEmpty();
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="109" y="207">		<text>+ key_ctrl_down + LEFT:
	delUndoable(objsSelec);
	selecao.setEmpty();
	draw();
	setState(DRAG_ALL+TO_DELETE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="94" y="222">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="292" y="205">		<text>+ ctrl_D():
	setHover(TO_DELETE);
	setState(TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="177" y="157">		<text>+ ctrl_D():
	setHover(TO_UNSELECT);
	setState(NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="177" y="151">		<text>+ ctrl_G():
	setHover(TO_CREATE);
	setState(TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="177" y="154">		<text>+ ctrl_R():
	setHover(TO_CREATE_SON);
	setState(TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="292" y="199">		<text>+ ctrl_G():
	setHover(TO_CREATE);
	setState(TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="292" y="202">		<text>+ ctrl_R():
	setHover(TO_CREATE_SON);
	setState(TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="474" y="274">		<text>+ RIGHT:
	setTitulo(null);
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="505" y="273">		<text>+ LEFT:
	setTitulo(null);
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="476" y="368">		<text>+ ctrl_D():
	setHover(TO_DELETE);
	setState(TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="476" y="362">		<text>+ ctrl_G():
	setHover(TO_UNSELECT);
	setState(NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="476" y="365">		<text>+ ctrl_R():
	setHover(TO_CREATE_SON);
	setState(TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="454" y="418">		<text>+ LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="451" y="411">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="468" y="401">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="393" y="522">		<text>+ key_ctrl_down + LEFT:
- Não faz nada e impede mouse_left_up de agir com o key_ctrl_down.</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!mod" x="352" y="501">		<text>+ modForm(mouse):
	setState(WAITING1+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="423" y="456">		<text>+ [mod]:
- Há um mod criado.
	addAndSelect([mod]);
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="423" y="459">		<text>+ [!mod]:
- Não há mod criado.</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="418" y="452">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="430" y="451">		<text>+ [mod]:
- Há um mod criado.
- O [mod] se torna son dos modsSelec.
	relateMods(modsSelec,[mod]);
	draw();
	setState(MOVE+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="430" y="454">		<text>+ [!mod]:
- Não há mod criado.</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="473" y="405">		<text>+ [mod]:
- Há um mod criado.
	unSelectAll();
	draw();</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="473" y="407">		<text>+ [!mod]:
- Não há mod criado.
	createMod(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="479" y="406">		<text>+ end:
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="480" y="400">		<text>+ [mod]:
- Há um mod criado.
	setState(MOVE+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="480" y="403">		<text>+ [!mod]:
- Não há mod criado.
	createMod(mouse);
	setState(TO_CREATE);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="529" y="404">		<text>+ CTRL:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="400" y="464">		<text>+ [mod]:
- Há um mod criado.
	[mod].setLocal(mouse);			//Muda o X e Y do [mod] de acordo com o mouse
	relateMods(modsSelec,[mod]);		//O [mod] se torna son dos modsSelec
	setState(DRAG+TO_CREATE,[mod]);	//Envia newMod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="406" y="464">		<text>+ [!mod]:
- Não há mod criado.</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="450" y="421">		<text>+ [mod]:
- Há um mod criado.
- Cria uma área de seleção branca.
	addAndSelect([mod]);
	setArea(TO_SELECT,false,mouse);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="457" y="421">		<text>+ [!mod]:
- Não há mod criado.
- Cria uma área de seleção verde.
. Todos os mods dentro são selecionados para criar, os fora são deselecionados.
	setArea(TO_CREATE,false,mouse);
	setState(SELECT_AREA+TO_CREATE);	//Não envia mod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="450" y="415">		<text>+ [mod]:
- Há um mod criado.
- Cria uma área de seleção azul.
	[mod].setLocal(mouse);		//Muda o X e Y do [mod] de acordo com o mouse
	setArea(TO_CREATE_PAI,true,mouse);
	setState(SELECT_AREA+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="457" y="415">		<text>+ [!mod]:
- Não há mod criado.
- Cria uma área de seleção verde.
. Todos os mods dentro são selecionados para criar.
	setArea(TO_CREATE,true,mouse);
	setState(SELECT_AREA+TO_CREATE);	//Não envia mod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="516" y="420">		<text>+ [mod]:
- Há um mod criado.
- Teoricamente bloqueado pelo key_ctrl_up e key_ctrl_up+mouse_left_up. Fica por precaução.
- Extende uma área de seleção branca.
. Todos os objs dentro são selecionados, os fora são deselecionados.
	addAndSelect([mod]);
	setArea(TO_SELECT,true,mouse);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="523" y="420">		<text>+ [!mod]:
- Não há mod criado.
- Extende uma área de seleção verde.
. Todos os mods dentro são selecionados para criar, os fora são deselecionados.
	setArea(TO_CREATE,false,mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="516" y="414">		<text>+ [mod]:
- Há um mod criado.
- Extende uma área de seleção azul.
. Todos os mods dentro são selecionados para serem pais, os fora são deselecionados.
	[mod].setLocal(X,Y);	//Muda o X e Y do [mod] de acordo com o mouse
	setArea(TO_CREATE_PAI,true,mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="523" y="414">		<text>+ [!mod]:
- Não há mod criado.
- Extende uma área de seleção verde.
. Todos os mods dentro são selecionados para criar.
	setArea(TO_CREATE,true,mouse);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="418" y="477">		<text>+ LEFT:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="423" y="476">		<text>+ [mod]:
- Há um mod criado.
	addAndSelect([mod]);
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="418" y="472">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="430" y="471">		<text>+ [mod]:
- Há um mod criado.
- O [mod] se torna son dos modsSelec.
	relateMods(modsSelec,[mod]);
	draw();
	setState(DRAG_ALL+MOVE+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="430" y="474">		<text>+ [!mod]:
- Não há mod criado.</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="467" y="432">		<text>+ LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="467" y="427">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="472" y="431">		<text>+ [mod]:
- Há um mod criado.
	unSelectAll();
	draw();</text>	</mod>	<mod border="8" color="A3E7FF" icons="" title="[!mod]" x="472" y="433">		<text>+ [!mod]:
- Não há mod criado.
	createMod(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="478" y="432">		<text>+ end:
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="479" y="426">		<text>+ [mod]:
- Há um mod criado.
	setState(DRAG_ALL+MOVE+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="479" y="429">		<text>+ [!mod]:
- Não há mod criado.
	createMod(mouse);
	setState(DRAG_ALL+TO_CREATE);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="540" y="399">		<text>+ [mod]:
- Há um mod criado.
- Usa a área verde para selecionar.
. Todos os objs dentro são selecionados, os fora são deselecionados.
	addAndSelect([mod]);
	setArea(TO_SELECT,false);
	selecao.setEmpty();
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="540" y="402">		<text>+ [!mod]:
- Não há mod criado.</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="547" y="393">		<text>+ [mod]:
- Há um mod criado.
- O [mod] se torna son dos modsSelec.
	relateMod([mod]);
	unSelectAll();
	draw();
	setState(MOVE+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="547" y="396">		<text>+ [!mod]:
- Não há mod criado.</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="535" y="431">		<text>+ LEFT:
- Teoricamente bloqueado pelo key_ctrl_up e key_ctrl_up+mouse_left_up. Fica por precaução.
	selecao.setEmpty();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="535" y="425">		<text>+ key_ctrl_down + LEFT:
	selecao.setEmpty();</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec&gt;0" x="546" y="435">		<text>+ modsSelec&gt;0:
	newMod=createModRelacionado(mouse,modsSelec);
	setState(DRAG_ALL+MOVE+TO_CREATE,newMod);	//Envia newMod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec==0" x="546" y="432">		<text>+ modsSelec==0:
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec&gt;0" x="553" y="429">		<text>+ modsSelec&gt;0:
	newMod=createModRelacionado(mouse,modsSelec);
	setState(DRAG_ALL+MOVE+TO_CREATE,newMod);	//Envia newMod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec==0" x="553" y="426">		<text>+ modsSelec==0:
	draw();
	setState(DRAG_ALL+TO_CREATE);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="540" y="430">		<text>+ [mod]:
- Há um mod criado.
- Extende uma área de seleção branca.
. Todos os objs dentro são selecionados, os fora são deselecionados.
	addAndSelect([mod]);
	setArea(TO_SELECT,false);
	selecao.setEmpty();
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="540" y="433">		<text>+ [!mod]:
- Não há mod criado.</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="547" y="424">		<text>+ [mod]:
- Há um mod criado.
- O [mod] se torna son dos modsSelec.
	relateMod([mod]);
	unSelectAll();
	draw();
	setState(DRAG_ALL+MOVE+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="547" y="427">		<text>+ [!mod]:
- Não há mod criado.</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="MIDDLE +&#10;WAITING1 +&#10;NORMAL" x="303" y="210">		<text>+ MIDDLE+WAITING1+NORMAL:
- Decide se move a tela com o drag ou move.
	setCursor(SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="305" y="219">		<text>+ MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="319" y="211">		<text>+ MIDDLE:
	setState(AUTO_DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="AUTO_DRAG_ALL +&#10;NORMAL" x="328" y="229">		<text>+ AUTO_DRAG_ALL+NORMAL:
- A tela é movida automaticamente.
	setCursor(AUTODRAG);
	startAutoDrag();	//Ativa a função que move a tela automaticamente.</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="290" y="147">		<text>+ MIDDLE:
	setState(MIDDLE+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="300" y="229">		<text>+ MIDDLE:
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="313" y="229">		<text>+ MIDDLE:
	draw();
	setState(MIDDLE+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="313" y="232">		<text>+ RIGHT:
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="314" y="226">		<text>+ LEFT:
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!cox" x="458" y="359">		<text>+ !cox:
	setState(WAITING1+TO_CREATE);	//Não envia nada</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="cox" x="459" y="356">		<text>+ cox:
	seg=getSeg(mouse);
	setState(WAITING2+TO_CREATE,seg);	//Envia seg</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[seg]" x="429" y="458">		<text>+ [seg]:
- Há um seg selecionado.
	createNod([seg].cox,mouse,true);
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!seg]" x="429" y="461">		<text>+ [!seg]:
- Não há um seg selecionado.
	newMod=createModRelacionado(mouse,modsSelec);
	setState(MOVE+TO_CREATE,newMod);	//Envia newMod</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="172" y="162">		<text>+ LEFT:
	setState(DRAG_ALL+WAITING1+TO_DELETE);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="423" y="479">		<text>+ [!mod]:
- Não há mod criado.</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[seg]" x="429" y="478">		<text>+ [seg]:
- Há um seg selecionado.
	createNod([seg].cox,mouse,true);
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!seg]" x="429" y="481">		<text>+ [!seg]:
- Não há um seg selecionado.
	newMod=createModRelacionado(mouse,modsSelec);
	setState(DRAG_ALL+MOVE+TO_CREATE,newMod);	//Envia newMod</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="393" y="500">		<text>+ key_ctrl_down + LEFT:
- Não faz nada e impede mouse_left_up de agir com o key_ctrl_down.
- Teoricamente bloqueado pelo key_ctrl_down+LEFT. Fica por precaução.</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="457" y="154">		<text>+ CTRL:
	setArea(TO_SELECT,false);	//Retira os que estão fora da área</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[seg]" x="436" y="453">		<text>+ [seg]:
- Há um seg selecionado.
	createNod([seg].cox,mouse,true);
	setState(TO_CREATE);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!seg]" x="436" y="456">		<text>+ [!seg]:
- Não há um seg selecionado.
	newMod=createModRelacionado(mouse,modsSelec);
	setState(MOVE+TO_CREATE,newMod);	//Envia newMod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[seg]" x="436" y="473">		<text>+ [seg]:
- Há um seg selecionado.
	createNod([seg].cox,mouse,true);
	setState(DRAG_ALL+TO_CREATE);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!seg]" x="436" y="476">		<text>+ [!seg]:
- Não há um seg selecionado.
	newMod=createModRelacionado(mouse,modsSelec);
	setState(DRAG_ALL+MOVE+TO_CREATE,newMod);	//Envia newMod</text>	</mod>	<mod border="0" color="FFFF00" icons="" title="TO_CONNECT" x="127" y="351">		<text>+ TO_CONNECT:
- Um mod brilha em amarelo.
	setCursor(SON+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="112" y="351">		<text>+ MIDDLE:
	setState(DRAG_ALL+TO_CONNECT);</text>	</mod>	<mod border="0" color="FFFF00" icons="" title="DRAG_ALL +&#10;TO_CONNECT" x="127" y="367">		<text>+ DRAG_ALL+TO_CONNECT:
- A tela é movida.
	setCursor(DRAG+SON+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="129" y="374">		<text>+ MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="143" y="367">		<text>+ MIDDLE:
	setState(TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_move" x="127" y="354">		<text>+ mouse_move:
	unSelectAllMods();
	mod=getMod(mouse);
	selectToBeSon(mod);
	draw();</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="108" y="347">		<text>+ mod:
	setState(WAITING2+TO_CONNECT,mod);	//Envia mod</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="113" y="348">		<text>+ LEFT:
	mod=getMod(mouse);
	if(mod==Mestre)mod=null;	//Mestre deve ser ignorado</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!mod" x="107" y="350">		<text>+ !mod:
	setState(WAITING1+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="119" y="361">		<text>+ ctrl_D():
	setHover(TO_DELETE);
	setState(TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="119" y="355">		<text>+ ctrl_G():
	setHover(TO_CREATE);
	setState(TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="119" y="358">		<text>+ ctrl_R():
	setHover(TO_UNSELECT);
	setState(NORMAL);</text>	</mod>	<mod border="0" color="FFFF00" icons="" title="WAITING2 +&#10;TO_CONNECT" x="169" y="464">		<text>+ WAITING2+TO_CONNECT:
- Decide se cria o cox seguindo o mouse com drag ou move.
- Ele possui mod.
	if(Ghost==0){
		setCursor(SON+SELECT);
	}else{
		setCursor(PAI+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="154" y="463">		<text>+ MIDDLE:
	setState(DRAG_ALL+WAITING2+TO_CONNECT,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="FFFF00" icons="" title="DRAG_ALL +&#10;WAITING2 +&#10;TO_CONNECT" x="169" y="480">		<text>+ DRAG_ALL+WAITING2+TO_CONNECT:
- A tela é movida.
- Ele possui mod.
	if(Ghost==0){
		setCursor(DRAG+SON+SELECT);
	}else{
		setCursor(DRAG+PAI+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="185" y="486">		<text>+ MIDDLE:
	setState(WAITING2+TO_CONNECT,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="171" y="471">		<text>+ LEFT:
- Começa a criar cox, conectado ao son.
	Ghost.setLocal(mouse);					//Muda o X e Y do Ghost de acordo com o mouse
	relateToGhost([mod]);
	setState(DRAG+TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="185" y="462">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="185" y="467">		<text>+ LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="171" y="489">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="FFFF00" icons="" title="WAITING1 +&#10;TO_CONNECT" x="141" y="403">		<text>+ WAITING1+TO_CONNECT:
- Decide se cria um cox ou seleciona uma área amarela.
	if(Ghost==0){
		setCursor(SON+SELECT);
	}else{
		setCursor(PAI+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="143" y="420">		<text>+ LEFT:
	Ghost.setLocal(X,Y);			//Muda o X e Y do Ghost de acordo com o mouse</text>	</mod>	<mod border="0" color="FFFF00" icons="" title="SELECT_AREA +&#10;TO_CONNECT" x="52" y="405">		<text>+ SELECT_AREA+TO_CONNECT:
- Uma área amarela seleciona todos os mods dentro.
	if(Ghost==0){
		setCursor(AREA_SON+SELECT);
	}else{
		setCursor(AREA_PAI+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="140" y="410">		<text>+ key_ctrl_down + LEFT:
	Ghost.setLocal(X,Y);			//Muda o X e Y do Ghost de acordo com o mouse</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="37" y="405">		<text>+ MIDDLE:
	setState(DRAG_ALL+SELECT_AREA+TO_CONNECT);</text>	</mod>	<mod border="0" color="FFFF00" icons="" title="DRAG_ALL +&#10;SELECT_AREA +&#10;TO_CONNECT" x="52" y="436">		<text>+ DRAG_ALL+SELECT_AREA+TO_CONNECT:
- A tela é movida.
	if(Ghost==0){
		setCursor(DRAG+AREA_SON+SELECT);
	}else{
		setCursor(DRAG+AREA_PAI+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="70" y="447">		<text>+ MIDDLE:
	setState(SELECT_AREA+TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="157" y="405">		<text>+ LEFT:
	deleteGhostCoxs();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="70" y="402">		<text>+ key_ctrl_down + LEFT:
	selecao.setEmpty();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="157" y="401">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="126" y="402">		<text>+ MIDDLE:
	setState(DRAG_ALL+WAITING1+TO_CONNECT);</text>	</mod>	<mod border="0" color="FFFF00" icons="" title="DRAG_ALL +&#10;WAITING1 +&#10;TO_CONNECT" x="141" y="432">		<text>+ DRAG_ALL+WAITING1+TO_CONNECT:
- A tela é movida.
	if(Ghost==0){
		setCursor(DRAG+SON+SELECT);
	}else{
		setCursor(DRAG+PAI+SELECT);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="157" y="437">		<text>+ MIDDLE:
	setState(WAITING1+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="169" y="403">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria nod nos coxs novos.
	createNodOnGhostCoxs(mouse);
	setState(MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="169" y="400">		<text>+ Ghost.coxs==0:
- Não há cox criado.
	setState(TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec&gt;0" x="75" y="412">		<text>+ modsSelec&gt;0:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec==0" x="75" y="408">		<text>+ modsSelec==0:
	deleteGhostCoxs();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="70" y="410">		<text>+ LEFT:
	selecao.setEmpty();</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec&gt;0" x="82" y="405">		<text>+ modsSelec&gt;0:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec==0" x="82" y="400">		<text>+ modsSelec==0:
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="143" y="441">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="190" y="469">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria coxs, conectando sons a pais.
	relateToMods([mod]);
	deleteGhostCoxs();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="190" y="466">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Começa a criar cox, conectado ao son.
	Ghost.setLocal(mouse);					//Muda o X e Y do Ghost de acordo com o mouse
	relateToGhost([mod]);
	setState(MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="197" y="463">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria coxs, conectando sons a pais.
	relateToMods([mod]);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="197" y="461">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Começa a criar cox, conectado ao son.
	Ghost.setLocal(mouse);					//Muda o X e Y do Ghost de acordo com o mouse
	relateToGhost([mod]);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="MOVE +&#10;TO_CONNECT" x="229" y="502">		<text>+ MOVE+TO_CONNECT:
- Um mod brilha em azul.
	setCursor(PAI+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="214" y="502">		<text>+ MIDDLE:
	setState(DRAG_ALL+MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="DRAG_ALL +&#10;MOVE +&#10;TO_CONNECT" x="229" y="511">		<text>+ DRAG_ALL+MOVE+TO_CONNECT:
- A tela é movida.
	setCursor(DRAG+PAI+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="231" y="520">		<text>+ MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="245" y="512">		<text>+ MIDDLE:
	setState(MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="110" y="476">		<text>+ LEFT:
	Ghost.setLocal(mouse);	//Muda o X e Y do Ghost de acordo com o mouse
	unSelectAll();
	mod=getMod(mouse);
	if(mod){
		selectToBePai(mod);
	}
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="124" y="467">		<text>+ key_ctrl_down + LEFT:
	mod=getMod(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="136" y="466">		<text>+ mod:
- Cria coxs, conectando sons a pais.
	relateToMods(mod);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="136" y="469">		<text>+ end:
	setState(MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="124" y="472">		<text>+ LEFT:
	mod=getMod(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="129" y="471">		<text>+ mod:
- Cria coxs, conectando sons a pais.
	relateToMods(mod);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="DRAG +&#10;TO_CONNECT" x="108" y="469">		<text>+ DRAG+TO_CONNECT:
- O cox segue o mouse com drag.
	setCursor(MOVE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="93" y="468">		<text>+ MIDDLE:
	setState(DRAG_ALL+DRAG+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="DRAG_ALL +&#10;DRAG +&#10;TO_CONNECT" x="108" y="485">		<text>+ DRAG_ALL+DRAG+TO_CONNECT:
- A tela é movida.
	setCursor(DRAG+MOVE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="124" y="492">		<text>+ MIDDLE:
	setState(DRAG+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="210" y="498">		<text>+ mod:
	setState(WAITING2+TO_CONNECT,mod);	//Envia mod</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="215" y="499">		<text>+ LEFT:
	mod=getMod(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="!mod" x="209" y="501">		<text>+ !mod:
	setState(WAITING1+TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_move" x="229" y="506">		<text>+ mouse_move:
	Ghost.setLocal(mouse);	//Muda o X e Y do Ghost de acordo com o mouse
	unSelectAllMods();
	mod=getMod(mouse);
	if(mod){
		selectToBePai(mod);
	}
	draw();</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="146" y="423">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria uma área de seleção azul.
. Todos os mods dentro são selecionados para serem pai, os fora são deselecionados.
  Os mods que são son do Ghost não são selecionados.
	setArea(TO_CREATE_PAI,false,mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="134" y="423">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Cria uma área de seleção amarela.
. Todos os mods dentro são selecionados para serem son, os fora são deselecionados.
	setArea(TO_CREATE_SON,false,mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="146" y="414">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria uma área de seleção azul.
. Todos os mods dentro são selecionados para serem pai.
  Os mods que são son do Ghost não são selecionados.
	setArea(TO_CREATE_PAI,true,mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="134" y="414">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Cria uma área de seleção amarela.
. Todos os mods dentro são selecionados para serem son.
	setArea(TO_CREATE_SON,true,mouse);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="55" y="424">		<text>+ LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="52" y="417">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="58" y="427">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Extende uma área de seleção azul.
. Todos os mods dentro são selecionados para serem pai, os fora são deselecionados.
	Ghost.setLocal(mouse);			//Muda o X e Y do Ghost de acordo com o mouse
	setArea(TO_CREATE_PAI,false,mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="46" y="427">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Extende uma área de seleção amarela.
. Todos os mods dentro são selecionados para serem son, os fora são deselecionados.
	setArea(TO_CREATE_SON,false,mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="58" y="421">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Extende uma área de seleção azul.
. Todos os mods dentro são selecionados para serem pai.
	Ghost.setLocal(mouse);			//Muda o X e Y do Ghost de acordo com o mouse
	setArea(TO_CREATE_PAI,true,mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="46" y="421">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Extende uma área de seleção amarela.
. Todos os mods dentro são selecionados para serem son.
	setArea(TO_CREATE_SON,true,mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="84" y="414">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria coxs, conectando sons a pais.
	relateToMods(modsSelec);
	deleteGhostCoxs();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="84" y="411">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Começa a criar coxs, conectados a sons.
	Ghost.setLocal(mouse);			//Muda o X e Y do Ghost de acordo com o mouse
	relateToGhost(modsSelec);
	setState(MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="91" y="406">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria coxs, conectando sons a pais.
	relateToMods(modsSelec);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="91" y="404">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Começa a criar coxs, conectados a sons.
	Ghost.setLocal(mouse);	//Muda o X e Y do Ghost de acordo com o mouse
	relateToGhost(modsSelec);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="92" y="401">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
	setState(MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="92" y="398">		<text>+ Ghost.coxs==0:
- Não há cox criado.
	setState(TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="55" y="448">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="102" y="405">		<text>+ end:
	setState(MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="144" y="426">		<text>+ end:
	setState(SELECT_AREA+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="144" y="417">		<text>+ end:
	setState(SELECT_AREA+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="208" y="462">		<text>+ end:
	setState(MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="129" y="474">		<text>+ end:
	deleteGhostCoxs();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT +&#10;MIDDLE" x="110" y="494">		<text>+ LEFT + MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="124" y="482">		<text>+ key_ctrl_down + LEFT:
	mod=getMod(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="136" y="481">		<text>+ mod:
- Cria coxs, conectando sons a pais.
	relateToMods(mod);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="136" y="484">		<text>+ end:
	setState(DRAG_ALL+MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="124" y="487">		<text>+ LEFT:
	mod=getMod(mouse);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="mod" x="129" y="486">		<text>+ mod:
- Cria coxs, conectando sons a pais.
	relateToMods(mod);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="129" y="489">		<text>+ end:
	deleteGhostCoxs();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="185" y="475">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="185" y="481">		<text>+ LEFT:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="190" y="483">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria coxs, conectando sons a pais.
	relateToMods([mod]);
	deleteGhostCoxs();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="190" y="480">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Começa a criar cox, conectado ao son.
	Ghost.setLocal(mouse);					//Muda o X e Y do Ghost de acordo com o mouse
	relateToGhost([mod]);
	setState(DRAG_ALL+MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="197" y="477">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria coxs, conectando sons a pais.
	relateToMods([mod]);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="197" y="475">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Começa a criar cox, conectado ao son.
	Ghost.setLocal(mouse);					//Muda o X e Y do Ghost de acordo com o mouse
	relateToGhost([mod]);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="208" y="476">		<text>+ end:
	setState(DRAG_ALL+MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="157" y="434">		<text>+ LEFT:
	deleteGhostCoxs();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="157" y="430">		<text>+ key_ctrl_down + LEFT:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="169" y="432">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria nod nos coxs novos.
	createNodOnGhostCoxs(mouse);
	setState(DRAG_ALL+MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="169" y="429">		<text>+ Ghost.coxs==0:
- Não há cox criado.
	setState(DRAG_ALL+TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="70" y="433">		<text>+ key_ctrl_down + LEFT:
	selecao.setEmpty();</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec&gt;0" x="75" y="444">		<text>+ modsSelec&gt;0:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec==0" x="75" y="440">		<text>+ modsSelec==0:
	deleteGhostCoxs();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="70" y="442">		<text>+ LEFT:
	selecao.setEmpty();</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec&gt;0" x="82" y="437">		<text>+ modsSelec&gt;0:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec==0" x="82" y="431">		<text>+ modsSelec==0:
	draw();</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="84" y="446">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria coxs, conectando sons a pais.
	relateToMods(modsSelec);
	deleteGhostCoxs();
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="84" y="443">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Começa a criar coxs, conectados a sons.
	Ghost.setLocal(mouse);			//Muda o X e Y do Ghost de acordo com o mouse
	relateToGhost(modsSelec);
	setState(DRAG_ALL+MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="91" y="438">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
- Cria coxs, conectando sons a pais.
	relateToMods(modsSelec);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="91" y="436">		<text>+ Ghost.coxs==0:
- Não há cox criado.
- Começa a criar coxs, conectados a sons.
	Ghost.setLocal(mouse);			//Muda o X e Y do Ghost de acordo com o mouse
	relateToGhost(modsSelec);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="92" y="433">		<text>+ Ghost.coxs&gt;0:
- Há cox criado.
	setState(DRAG_ALL+MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="92" y="430">		<text>+ Ghost.coxs==0:
- Não há cox criado.
	setState(DRAG_ALL+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="end" x="102" y="437">		<text>+ end:
	setState(DRAG_ALL+MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="491" y="269">		<text>+ LEFT:
- Cria uma área de seleção branca.
. Todos os objs dentro são selecionados, os fora são deselecionados.
  Os nods com os coxs selecionados não podem ser deselecionados.
	setTitulo(null);
	setArea(TO_SELECT,false,mouse);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="488" y="265">		<text>+ key_ctrl_down + LEFT:
- Cria uma área de seleção branca.
. Todos os objs dentro são selecionados.
	setTitulo(null);
	setArea(TO_SELECT,true,mouse);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="450" y="455">		<text>+ RIGHT:
	if([mod]){
		addAndSelect([mod]);
	}else if([nod]){
		addAndSelect([nod]);
	}
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="437" y="406">		<text>+ RIGHT:
	addAndSelect([mod]);
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="502" y="398">		<text>+ RIGHT:
	selecao.setEmpty();
	addAndSelect([mod]);
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="387" y="456">		<text>+ RIGHT:
	addAndSelect([mod]);
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="171" y="150">		<text>+ RIGHT:
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="135" y="194">		<text>+ RIGHT:
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="76" y="192">		<text>+ RIGHT:
	selecao.setEmpty();
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="430" y="148">		<text>+ RIGHT:
	selecao.setEmpty();
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="411" y="195">		<text>+ RIGHT:
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="374" y="149">		<text>+ RIGHT:
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="8" color="33CCFF" icons="" title="RIGHT" x="464" y="197">		<text>+ RIGHT:
	savedObjs=new List&lt;Objeto&gt;(modsSelec+nodsSelec);
	addUndo(savedObjs,mouse-oldLocal,MOVE);
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="112" y="354">		<text>+ RIGHT:
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="126" y="405">		<text>+ RIGHT:
	deleteGhostCoxs();
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="37" y="408">		<text>+ RIGHT:
	deleteGhostCoxs();
	selecao.setEmpty();
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="154" y="466">		<text>+ RIGHT:
	deleteGhostCoxs();
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="93" y="471">		<text>+ mouse_right_down:
	deleteGhostCoxs();
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="214" y="505">		<text>+ RIGHT:
	deleteGhostCoxs();
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="475" y="256">		<text>+ LEFT:
	setCursor(EDIT_TITLE+SELECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="276" y="240">		<text>+ ctrl_D():
	setHover(TO_DELETE);
	setState(DRAG_ALL+TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="276" y="234">		<text>+ ctrl_G():
	setHover(TO_CREATE);
	setState(DRAG_ALL+TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="276" y="237">		<text>+ ctrl_R():
	setHover(TO_CREATE_SON);
	setState(DRAG_ALL+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="476" y="384">		<text>+ ctrl_D():
	setHover(TO_DELETE);
	setState(DRAG_ALL+TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="476" y="378">		<text>+ ctrl_G():
	setHover(TO_UNSELECT);
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="476" y="381">		<text>+ ctrl_R():
	setHover(TO_CREATE_SON);
	setState(DRAG_ALL+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="119" y="378">		<text>+ ctrl_D():
	setHover(TO_DELETE);
	setState(DRAG_ALL+TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="119" y="372">		<text>+ ctrl_G():
	setHover(TO_CREATE);
	setState(DRAG_ALL+TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="119" y="375">		<text>+ ctrl_R():
	setHover(TO_UNSELECT);
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="177" y="173">		<text>+ ctrl_D():
	setHover(TO_UNSELECT);
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="177" y="167">		<text>+ ctrl_G():
	setHover(TO_CREATE);
	setState(DRAG_ALL+TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="177" y="170">		<text>+ ctrl_R():
	setToConnect();
	setHover(TO_CREATE_SON);
	setState(DRAG_ALL+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="509" y="409">		<text>+ ctrl_D():
	addAndSelect([mod]);
	setArea(TO_DELETE,false);
	setState(SELECT_AREA+TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="509" y="403">		<text>+ ctrl_G():
	addAndSelect([mod]);
	setArea(TO_SELECT,false);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="509" y="406">		<text>+ ctrl_R():
	addAndSelect([mod]);
	setArea(TO_CREATE_SON,false);
	setState(SELECT_AREA+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="509" y="443">		<text>+ ctrl_D():
	addAndSelect([mod]);
	setArea(TO_DELETE,false);
	setState(DRAG_ALL+SELECT_AREA+TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="509" y="437">		<text>+ ctrl_G():
	addAndSelect([mod]);
	setArea(TO_SELECT,false);
	setState(DRAG_ALL+SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="509" y="440">		<text>+ ctrl_R():
	addAndSelect([mod]);
	setArea(TO_CREATE_SON,false);
	setState(DRAG_ALL+SELECT_AREA+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="43" y="417">		<text>+ ctrl_D():
	deleteGhostCoxs();
	setArea(TO_DELETE,false);
	setState(SELECT_AREA+TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="43" y="411">		<text>+ ctrl_G():
	deleteGhostCoxs();
	setArea(TO_CREATE,false);
	setState(SELECT_AREA+TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="43" y="414">		<text>+ ctrl_R():
	deleteGhostCoxs();
	setArea(TO_SELECT,false);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="43" y="448">		<text>+ ctrl_D():
	deleteGhostCoxs();
	setArea(TO_DELETE,false);
	setState(DRAG_ALL+SELECT_AREA+TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="43" y="442">		<text>+ ctrl_G():
	deleteGhostCoxs();
	setArea(TO_CREATE,false);
	setState(DRAG_ALL+SELECT_AREA+TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="43" y="445">		<text>+ ctrl_R():
	deleteGhostCoxs();
	setArea(TO_SELECT,false);
	setState(DRAG_ALL+SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="82" y="201">		<text>+ ctrl_D():
	setArea(TO_SELECT,false);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="82" y="195">		<text>+ ctrl_G():
	setArea(TO_CREATE,false);
	setState(SELECT_AREA+TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="82" y="198">		<text>+ ctrl_R():
	setArea(TO_CREATE_SON,false);
	setState(SELECT_AREA+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="82" y="222">		<text>+ ctrl_D():
	setArea(TO_SELECT,false);
	setState(DRAG_ALL+SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="82" y="216">		<text>+ ctrl_G():
	setArea(TO_CREATE,false);
	setState(DRAG_ALL+SELECT_AREA+TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="82" y="219">		<text>+ ctrl_R():
	setArea(TO_CREATE_SON,false);
	setState(DRAG_ALL+SELECT_AREA+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="436" y="160">		<text>+ ctrl_D():
	setArea(TO_DELETE,false);
	setState(SELECT_AREA+TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="436" y="154">		<text>+ ctrl_G():
	setArea(TO_CREATE,false);
	setState(SELECT_AREA+TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="436" y="157">		<text>+ ctrl_R():
	setArea(TO_CREATE_SON,false);
	setState(SELECT_AREA+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="436" y="180">		<text>+ ctrl_D():
	setArea(TO_DELETE,false);
	setState(DRAG_ALL+SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="436" y="174">		<text>+ ctrl_G():
	setArea(TO_CREATE,false);
	setState(DRAG_ALL+SELECT_AREA+TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="436" y="177">		<text>+ ctrl_R():
	setArea(TO_CREATE_SON,false);
	setState(DRAG_ALL+SELECT_AREA+TO_CONNECT);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_D()" x="321" y="240">		<text>+ ctrl_D():
	setHover(TO_DELETE);
	setState(TO_DELETE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_G()" x="321" y="234">		<text>+ ctrl_G():
	setHover(TO_CREATE);
	setState(TO_CREATE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="ctrl_R()" x="321" y="237">		<text>+ ctrl_R():
	setHover(TO_CREATE_SON);
	setState(TO_CONNECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="457" y="174">		<text>+ CTRL:
	setArea(TO_SELECT,false);	//Retira os que estão fora da área</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="104" y="216">		<text>+ CTRL:
	setArea(TO_DELETE,false);	//Retira os que estão fora da área</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="103" y="195">		<text>+ CTRL:
	setArea(TO_DELETE,false);	//Retira os que estão fora da área</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="64" y="442">		<text>+ CTRL:
	setArea(TO_CREATE_SON,false);	//Retira os que estão fora da área</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="64" y="411">		<text>+ CTRL:
	setArea(TO_CREATE_SON,false);	//Retira os que estão fora da área</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="534" y="403">		<text>+ [mod]:
- Há um mod criado.
	addAndSelect([mod]);
	setArea(TO_SELECT,false);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="534" y="406">		<text>+ [!mod]:
- Não há mod criado.
	setArea(TO_CREATE,false);	//Retira os que estão fora da área</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="CTRL" x="529" y="440">		<text>+ CTRL:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="534" y="439">		<text>+ [mod]:
- Há um mod criado.
	addAndSelect([mod]);
	setArea(TO_SELECT,false);
	setState(DRAG_ALL+SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="534" y="442">		<text>+ [!mod]:
- Não há mod criado.
	setArea(TO_CREATE,false);	//Retira os que estão fora da área</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="MOVE +&#10;NORMAL" x="463" y="230">		<text>+ MOVE+NORMAL:
- Todos os modsSelec e nodsSelec são movidos.
	setCursor(MOVE+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_move" x="461" y="234">		<text>+ mouse_move:
	//Muda o X e Y dos modsSelec e nodsSelec de acordo com o mouse.
	for(mod:modsSelec)mod.setLocal(mouse);
	for(nod:nodsSelec)nod.setLocal(mouse);
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="449" y="227">		<text>+ LEFT:
	savedObjs=new List&lt;Objeto&gt;(objsSelec);
	addUndoable(savedObjs,false);
	setState(NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="448" y="230">		<text>+ MIDDLE:
	setState(DRAG_ALL+MOVE+NORMAL);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="DRAG_ALL +&#10;MOVE +&#10;NORMAL" x="461" y="239">		<text>+ DRAG_ALL+MOVE+NORMAL:
- A tela é movida.
	setCursor(DRAG+MOVE+SELECT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="463" y="248">		<text>+ MIDDLE:
	tree.setLocal(mouse);	//Muda o X e Y do tree de acordo com o mouse
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="MIDDLE" x="477" y="240">		<text>+ MIDDLE:
	setState(MOVE+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="447" y="239">		<text>+ LEFT:
	savedObjs=new List&lt;Objeto&gt;(objsSelec);
	addUndoable(savedObjs,false);
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="448" y="233">		<text>+ RIGHT:
	savedObjs=new List&lt;Objeto&gt;(objsSelec);
	addUndoable(savedObjs,false);
	unSelectAll();
	draw();
	setState(RIGHT+WAITING1+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_ctrl_down +&#10;LEFT" x="425" y="201">		<text>+ key_ctrl_down + LEFT:
- Cria uma área de seleção branca.
. Todos os objs dentro são selecionados.
	setArea(TO_SELECT,true,mouse);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="177" y="147">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="177" y="162">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="195" y="162">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="186" y="166">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="141" y="192">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="159" y="192">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="150" y="196">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="159" y="210">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="150" y="214">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="82" y="190">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="92" y="198">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="102" y="190">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_up" x="97" y="195">		<text>+ key_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="92" y="219">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="102" y="210">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_up" x="98" y="216">		<text>+ key_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="380" y="147">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="398" y="147">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="389" y="152">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="398" y="171">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="389" y="176">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="456" y="149">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="436" y="149">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="446" y="157">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_up" x="451" y="154">		<text>+ key_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="456" y="169">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="446" y="177">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_up" x="451" y="174">		<text>+ key_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="417" y="193">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="435" y="193">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="426" y="198">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="435" y="211">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="426" y="216">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="485" y="195">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="486" y="207">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="470" y="195">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="477" y="199">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="477" y="212">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="454" y="230">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="452" y="240">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="470" y="240">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="461" y="245">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="498" y="259">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="480" y="259">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="489" y="262">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="489" y="278">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="498" y="274">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="480" y="274">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="518" y="300">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="509" y="305">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="509" y="318">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="518" y="313">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="476" y="358">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="493" y="373">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="484" y="377">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="296" y="147">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_doubleClick" x="290" y="154">		<text>+ mouse_doubleClick:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_down" x="299" y="158">		<text>+ key_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="312" y="211">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="303" y="216">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="293" y="229">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="284" y="233">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="319" y="229">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="443" y="404">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="461" y="404">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="452" y="408">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="460" y="430">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="451" y="435">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="508" y="396">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="518" y="407">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="528" y="396">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_up" x="523" y="404">		<text>+ key_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="528" y="431">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="518" y="443">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_up" x="523" y="440">		<text>+ key_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="393" y="454">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="411" y="454">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="402" y="458">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="411" y="476">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="402" y="481">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="473" y="455">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="474" y="470">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="465" y="475">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="464" y="459">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="456" y="455">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="369" y="502">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="386" y="502">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="386" y="525">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_down" x="374" y="506">		<text>+ key_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_down" x="374" y="530">		<text>+ key_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_up" x="382" y="506">		<text>+ key_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_up" x="382" y="530">		<text>+ key_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="377" y="533">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="118" y="351">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="127" y="371">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="136" y="367">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="132" y="403">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="150" y="403">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="141" y="407">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="141" y="438">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="150" y="433">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="43" y="406">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="63" y="437">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="63" y="405">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="53" y="414">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="53" y="445">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_up" x="58" y="442">		<text>+ key_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_up" x="58" y="411">		<text>+ key_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="178" y="464">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="178" y="480">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="117" y="486">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="117" y="469">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="229" y="517">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="169" y="468">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="108" y="491">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="108" y="473">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="169" y="486">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="99" y="469">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="160" y="464">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_down" x="220" y="502">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_up" x="238" y="512">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[seg]" x="403" y="467">		<text>+ [seg]:
- Há um seg selecionado.
	newNod=createNod([seg].cox,mouse,false);
	unSelect(newNod);
	setState(DRAG+TO_CREATE,newNod);	//Envia newNod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!seg]" x="409" y="467">		<text>+ [!seg]:
- Não há seg criado.
	newMod=createModRelacionado(mouse,modsSelec);
	setState(DRAG+TO_CREATE,newMod);	//Envia newMod</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="493" y="466">		<text>+ [mod]:
- Há um mod criado.
	setState(DRAG_ALL+MOVE+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="493" y="469">		<text>+ [!mod]:
- Não há mod criado.
	addAndSelect([nod]);
	setState(DRAG_ALL+NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[!mod]" x="492" y="454">		<text>+ [!mod]:
- Não há mod criado.
	addAndSelect([nod]);
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="[mod]" x="492" y="451">		<text>+ [mod]:
- Há um mod criado.
	setState(MOVE+TO_CREATE,[mod]);	//Envia [mod]</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="icons" x="320" y="-73">		<text>+ icons:
- Menu de "Arquivo":
	Novo.png
	Abrir.png
	Salvar.png
	Salvar Como.png
	Sair.png
- Menu de "Editar":
	Desfazer.png
	Refazer.png
	. Menu de "Módulo":
		Editar Título.png
		Relacionar.png
	Criar.png
	Deletar.png
	Recortar.png
	Copiar.png
	Colar.png
	Excluir.png
	Selecionar Tudo.png
	Deselecionar Tudo.png
	Selecionar Descendentes.png
- Menu de "Exibir":
	Tela Cheia.png
	. Menu de "Zoom":
		Aumentar.png
		Diminuir.png
	Centralizar Câmera.png
	Quebra Automática de Linha.png
	Mostrar Caracteres Escondidos.png
	Separar Janela de Texto.png
	Auto-Focar Janela de Texto.png
	Mostrar Grade.png
Pesquisar.png
Anotações.png
</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="MindSort" x="326" y="-74">		<text/>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="main" x="316" y="-61">		<text/>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="menu" x="338" y="-61">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="MindSort" x="315" y="-48">		<text>+ MindSort:
- O início de todo o processo, a janela principal.

public class MindSort{
//MAIN(EXECUTE)
	public static void main(String[]args);
//LINK
	private File linkl;
	private String ini;
//VAR GLOBAIS
	private String titulo;
	private JMenuBar menu;
	private Tree tree;
	private Toggle fullscreen;
	private Toggle separateText;
	private Toggle autoFocusText;
	private Toggle showGrid;
	private Toggle lineWrap;
	private Toggle showAllChars;
	public static Cor MENU;
//FONTE
	private static final Font FONTE;
//LISTAS
	private Object[]objsLimOpcoes;
	private Object[]doLimOpcoes;
	private Object[]transNvlOpcoes;
//BOTÕES
	private AbstractAction novoAction;
	private AbstractAction abrirAction;
	private AbstractAction salvarAction;
	private AbstractAction salvarComoAction;
	private AbstractAction sairAction;
//JANELA
	private JFrame janela;
//JANELA DO TEXTO
	private Rectangle window;
	private boolean mousePressed;
	private Janela janelaTexto=new Janela(janela);
//JANELA DAS ANOTAÇÕES
	private Texto notesTexto=new Texto();
	private JFrame janelaNotes;
//MAIN
	public MindSort(String[]args);
//FULLSCREEN
	private void fullscreen(boolean fullscreen);
//ICONES
	private Image getImage(String nome);
//FILE CHOOSER
	private File choose(String nome);
//NOVO
	private void novo(File mind);
//ABRIR
	private void abrir(File mind);
//SALVAR
	private boolean saving;
	private void salvar(File mind);
	private void salvar(File mind,int tentativas);
	private boolean salvarAntes();
	private void writeFile(File mind);
//FECHAR
	private void fechar();
//.INI
	private boolean getConfigIni();
		private String getString(String linha);
		private int getInteger(String linha);
		private Font getFont(String linha);
		private Cor getCor(String linha);
		private boolean getBoolean(String linha);
	private boolean setConfigIni();
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Menu" x="338" y="-54">		<text>+ Menu:
- Menu com cor própria.

public class Menu extends JMenu{
	public Menu(JMenuBar menu,String nome);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Janela" x="297" y="-44">		<text>+ Janela:
- Janela que pode ser ligada à janela principal ou ser separada.

public class Janela{
//VAR GLOBAIS
	private JFrame janelaPai;
	private JFrame janela;
	private JanelaVidro janelaVidro;
//PAINEL
	private JRootPane painel;
		public JRootPane getPainel();
//DEFAULT FORM
	private int dialogDefaultWidth;
		public int getDialogDefaultWidth(){;
		public void setDialogDefaultWidth(int width);
	private int dialogDefaultHeight;
		public int getDialogDefaultHeight();
		public void setDialogDefaultHeight(int height);
//LOCK
	public void setLocked(boolean locked);
	public boolean isLocked();
//MAIN
	public Janela(JFrame janelaPai);
//FUNCS
//ELEMENTOS
	public void add(Component elemento);
	public void remove(Component elemento);
//LOCAL
	public int getX();
	public int getY();
	public void setLocation(int x,int y);
//FORM
	public int getWidth();
	public int getHeight();
	public void setSize(int width,int height);
	public Rectangle getBounds();
	public void setBounds(int x,int y,int width,int height);
	public void setBounds(Rectangle area);
	private boolean horizontal;
	private Point getLimitedLocation(int x,int y);
	private Dimension getLimitedSize(int width,int height);
	private Rectangle getLimitedBounds(int x,int y,int width,int height);
	private Rectangle getLimitedBounds(Rectangle newBounds);
	private Dimension windowSize;
	private void limitBounds();
//GERAIS
	public void setTitle(String titulo);
	public void setMinimumSize(Dimension size);
	public void setBackground(Color cor);
	public void setDefaultCloseOperation(int operation);
	public void setAlwaysOnTop(boolean topo);
	public void setIconImage(Image imagem);
	public void requestFocus();
	public boolean isFocused();
	public void addKeyListener(KeyAdapter k);
	public void setMenu(JMenuBar menu);
	public boolean isDragging();
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Botao" x="340" y="-49">		<text>+ Botao:
- Botão com cor própria.
- Seu atalho pode ser configurado.

public class Botao extends JMenuItem{
//AÇÃO
	public void setAction(AbstractAction acao);
//MAIN
	public Botao(JMenuBar menu,String nome);
//FUNCS
	public void setAtalho(int mask,int key,boolean showMask,boolean showKey);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Toggle" x="344" y="-44">		<text>+ Toggle:
- Toggle com cor própria.
- Seu atalho pode ser configurado.

public class Toggle extends JMenuItem{
//COR
	private Color corPadrao;
//PRESSIONADO
	private boolean pressed;
		public void setToggle(boolean pressed);
		public boolean isPressed();
//AÇÃO
	private Runnable acao;
		public void setAction(Runnable acao);
//MAIN
	public Toggle(JMenuBar menu,String nome);
//FUNCS
	public void setAtalho(int mask,int key,boolean showMask,boolean showKey);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Searcher" x="321" y="-41">		<text>+ Searcher:
- O procurador de textos.

public class Searcher{
//VAR GLOBAIS
	private JDialog dialog;
	private Tree tree;
	private JTextField termo;
	private JLabel resultado;
	private JButton procurar;
	private JButton destacar;
//MAIN
	public Searcher(Tree tree);
//FUNCS
	public void chamar();
	public void dispensar();
	public void reset();
//PROCURAR
	private MatchMade matches;
	private int index;
	private void listar(boolean frente);
	private void procurar(String termo,boolean frente,boolean onlySelected,boolean wholeWord,boolean diffMaiuscMinusc);
//DESTACAR
	private void destacar(String termo,boolean onlySelected,boolean wholeWord,boolean diffMaiuscMinusc);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="FontChoser" x="300" y="-34">		<text>+ FontChooser:
- O seletor de fontes.

public class FontChooser extends JComponent{
//RESPOSTAS
	public enum Option...
	protected Option resposta;
//VAR GLOBAIS
	private static final Font FONTE;
	private static final Font DEFAULT_FONTE;
//NOMES
	private static final String[]NOMES_OPTIONS;
	//TEXTO DO NOME SELECIONADO
		private JTextField nomeTexto;
			public JTextField getNomeTexto();
	//LISTA DE NOMES
		private JList nomesLista;
			public JList getNomesLista();
			public String getSelectedNome();
			public void setSelectedNome(String name);
	//PAINEL DOS NOMES
		private JPanel nomePainel;
			protected JPanel getNomePainel();
//ESTILOS
	private static final int[]ESTILOS;
	private static final String[]ESTILOS_OPTIONS;
	//TEXTO DO ESTILO SELECIONADO
		private JTextField estiloTexto;
			public JTextField getEstiloTexto();
	//LISTA DE ESTILOS
		private JList estilosLista;
			public JList getEstilosLista();
			public int getSelectedEstilo();
			public void setSelectedEstilo(int estilo);
	//PAINEL DOS ESTILOS
		private JPanel estiloPainel;
			protected JPanel getEstiloPainel();
//TAMANHOS
	private static final String[]TAMANHOS;
	private static final String[]TAMANHOS_OPTIONS;
	//TEXTO DO TAMANHO SELECIONADO
		private JTextField tamanhoTexto;
			public JTextField getTamanhoTexto();
	//LISTA DE TAMANHOS
		private JList tamanhosLista;
			public JList getTamanhosLista();
			public int getSelectedTamanho();
			public void setSelectedTamanho(int size);
	//PAINEL DOS TAMANHOS
		private JPanel tamanhoPainel;
			protected JPanel getTamanhoPainel();
//EXEMPLO
	//TEXTO DO EXEMPLO
		private JTextField exemploTexto;
			protected JTextField getSampleTextField();
	//PAINEL DO EXEMPLO
		private JPanel exemploPainel;
			protected JPanel getExemploPainel();
	protected void updateExemplo();
//LISTENER: DISPARA COM A SELEÇÃO DE ITEM
	protected class ListSelectionAction implements ListSelectionListener...
//LISTENER: DISPARA COM O FOCO DE TEXTO
	protected class TextoFocusAction extends FocusAdapter...
//LISTENER: DISPARA COM O INPUT DE TECLAS
	protected class TextoKeyAction extends KeyAdapter...
//LISTENER: DISPARA COM A EDIÇÃO DE TEXTO
	protected class ListDocumentAction implements DocumentListener...
//MAIN
	public FontChooser();
//FUNCS
	public Font getSelectedFont();
	public void setSelectedFont(Font fonte);
	public Option showDialog(Component janela);
		protected JDialog createDialog(Component janela);
//BOTÃO OK
	protected class DialogOKAction extends AbstractAction...
//BOTÃO CANCELAR
	protected class DialogCancelAction extends AbstractAction...
}</text>	</mod>	<mod border="0" color="999999" icons="" title="Arquivos" x="365" y="-107">		<text>+ Arquivos:</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="element" x="402" y="-73">		<text>+ element:
- Interfaces originais.</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Painel" x="397" y="-67">		<text>+ Painel:
- Usado no lugar de JPanel, é necessário para se ter uma janela com fundo transparente.

public class Painel extends JPanel{
//JANELA
	private JFrame janela;				//Link para a janela de origem
		public JFrame getJanela();
//ELEMENTOS
	private List&lt;Elemento&gt;elems;		//Lista de seus Elementos
		public List&lt;Elemento&gt;getElems();
		public void add(Elemento elem);
		public void del(Elemento elem);
//MAIN
	public Painel(JFrame janela);	//Pode apenas ser chamado se dado uma janela
//FUNCS
@Override
	public Point getToolTipLocation(MouseEvent m);	//Coloca o tooltip no canto para que ele não consuma clicks do mouse
//DRAW
@Override
	protected void paintComponent(Graphics quadro);	//Override o paint do JPanel
}
</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Elemento" x="409" y="-63">		<text>+ Elemento:
- Colocado em um Painel, possue um print que é atualizado apenas quando necessário.

public class Elemento{
//PAINEL(PAI)
	protected Painel painel;			//Seu Painel de origem
		public Painel getPainel();
//LOCAL
	protected int x;
		public int getX();
		public void setX(int x);
	protected int y;
		public int getY();
		public void setY(int y);
	public Point getLocation();
	public void setLocation(int x,int y);
//FORM
	protected int width;
		public int getWidth();
		public void setWidth(int width);
	protected int height;
		public int getHeight();
		public void setHeight(int height);
	public Dimension getSize();
	public void setSize(int width,int height);
	public Rectangle getBounds();
	public Rectangle getRelativeBounds();
	public void setBounds(int x,int y,int width,int height);
	public void setBounds(Rectangle r);
//IMAGEM
	protected Image print;			//Imagem que é utilizada para não se precisar redesenhar tudo
		protected Image getPrint();
	private Image buffer;			//Imagem onde os componentes do Item são desenhados
	private boolean update;		//Define se a área do desenho deve ser atualizada
		private void update();
//VISIBILIDADE
	protected boolean visible;	//Se é visível
		public boolean isVisible();
		public void setVisible(boolean visible);
//MAIN
	public Elemento(Painel painel);	//Pode apenas ser chamado se dado um Painel
//CLEAR
	public void clearDraw();	//Apaga o buffer e o print, deixando um fundo transparente
		private void clear(Graphics2D imagemEdit);	//Apaga uma imagem
//DRAW
	public synchronized void draw();	//Chamado pelo Painel
	protected void draw(Graphics2D imagemEdit);	//Deve ser overrided pelo extended, onde é desenhado os componentes
}
</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="cursores" x="388" y="-56">		<text>+ cursores:
- Imagens que são unidas para criar um cursor.
- Setas:
	NORMAL.png
	SELECT.png
- Modos:
	MOVE.png
	CREATE.png
	DELETE.png
	SON.png
	PAI.png
	EDIT_TITLE.png
- Areas:
	AREA_CREATE.png
	AREA_DELETE.png
	AREA_PAI.png
	AREA_SELECT.png
	AREA_SON.png
- Ações:
	DRAG.png
	AUTODRAG.png
</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="tree" x="403" y="-57">		<text>+ tree:
- Interface de organização de idéias.</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="ObjetoFocusListener" x="374" y="-51">		<text>+ ObjetoFocusListener:
- Deve ser chamado quando o Tree tem um obj focado ou desfocado.

public interface ObjetoFocusListener{
	public void objetoFocused(Objeto obj);
	public void objetoUnFocused(Objeto obj);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Cursor" x="427" y="-52">		<text>+ Cursor:
- Agrupa os comandos e imagens do cursor.

public class Cursor{
//STATES
	public final static int NORMAL;		//Definir uma seta
	public final static int SELECT;		//Definir uma seta brilhante
	public final static int AUTODRAG;		//Definir setas grandes juntas em um +
	public final static int MOVE;			//Adicionar setas juntas em um + abaixo
	public final static int CREATE;		//Adicionar um + verde abaixo
	public final static int DELETE;		//Adicionar um x vermelho abaixo
	public final static int SON;				//Adicionar uma conexão amarela abaixo
	public final static int PAI;				//Adicionar uma conexão azul abaixo
	public final static int EDIT_TITLE;	//Adicionar um T abaixo
	public final static int AREA_SELECT;	//Adicionar uma área branca abaixo
	public final static int AREA_CREATE;	//Adicionar uma área verde abaixo
	public final static int AREA_DELETE;	//Adicionar uma área vermelha abaixo
	public final static int AREA_SON;		//Adicionar uma área amarela abaixo
	public final static int AREA_PAI;		//Adicionar uma área azul abaixo
	public final static int DRAG;			//Adicionar setas juntas em um + ao lado
	private int state;
		public int getState()
//VAR GLOBAIS
	private JFrame janela;						//Janela de origem
	public final static int CURSOR_SIZE;	//O tamanho das imagens do cursor
//MAIN
	public Cursor(JFrame janela);			//Pode apenas ser chamado se dado uma janela
//FUNCS
	public void set(int state);						//Muda a imagem do cursor dado uma combinação
		private Image getCursor(String nome);	//Devolve uma imagem, utilizada para criar uma imagem de cursor
//COMANDOS
	public final static int NOTHING;
	public final static int LEFT;
	public final static int MIDDLE;
	public final static int RIGHT;
	public final static int SHIFT;
	public final static int CTRL;
	public static boolean match(MouseEvent m,int... keys);	//Identifica se o input do mouse inclui os botões dados
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Selecao" x="433" y="-51">		<text>+ Selecao:
- A área criada ao selecionar um grupo de Objetos.

public class Selecao{
//STATES
	public enum State...
	private State state;
		public Selecao.State getState();
		public void setState(Selecao.State state);
//LOCAL
	private int ancoraXIndex;
		public int getAncoraXIndex();
		public int getAncoraX();
	private int ancoraYIndex;
		public int getAncoraYIndex();
		public int getAncoraY();
	public void setAncoraIndex(int x,int y);
//FORM
	private int areaXIndex;
		public int getAreaXIndex();
		public int getAreaX();
	private int areaYIndex;
		public int getAreaYIndex();
		public int getAreaY();
	public void setAreaIndex(int x,int y);
	public Rectangle getFormIndex();
	public Rectangle getForm();
	public boolean intersects(Rectangle forma);		//Verifica se intersecta um mod ou nod
	public boolean intersects(Path2D.Float forma);	//Verifica se intersecta um cox
	public void setEmpty();
	public boolean isEmpty();
//MAIN
	public Selecao(){}
//DRAW
	public void draw(Graphics2D imagemEdit);	//Desenha uma área, a cor variando com o State
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Tree" x="397" y="-37">		<text>+ Tree:
- A interface, o principal.

public class Tree extends Elemento{
//LOCAL
	private static int X;
	public static int getLocalX();
	private static int Y;
		public static int getLocalY();
	public static Point getLocal();
	public static void setLocal(int x,int y);
//VAR GLOBAIS
	public static int UNIT;
	public static float getBordaValue();
//MÓDULOS ESPECIAIS
	private static Modulo MESTRE;
		public static Modulo getMestre();
	private static Modulo GHOST;
		public static Modulo getGhost();
//FONTE
	public static class Fonte...
		public void setFonte(Font fonte);
//COR DE FUNDO
	public static Cor FUNDO;
//MENU
	public static class Menu...
//CONFIGURAÇÕES
	private int objetosLimite;
		public int getObjetosLimite();
		public void setObjetosLimite(int limite);
	private boolean showGrid;
		public boolean isShowingGrid();
		public void setShowGrid(boolean show);
	private boolean antialias;
		public boolean isAntialias();
		public void setAntialias(boolean antialias);
	private boolean enabled;
		public void setEnabled(boolean enabled);
		public boolean isEnabled();
//AÇÕES
	private Actions actions;
		public Actions getActions();
//POPUP
	private Popup popup;
		public Popup getPopup();
//SELEÇÃO
	private Selecao selecao;
		public Selecao getSelecao();
//UNDO-REDO
	private UndoRedo undoRedo;
		public UndoRedo getUndoRedoManager();
//CURSOR
	private Cursor cursor;
		public Cursor getCursor();
//LISTENER: DISPARA COM O MUDAR DE FOCO DE UM OBJETO
	private List&lt;ObjetoFocusListener&gt;objetoListeners;
		public void addObjetoListener(ObjetoFocusListener objetoListener);
		public void triggerObjetoListener(Objeto obj,boolean isFocused);
//TITULO
	private Texto titulo;
		public Texto getTitulo();
		public void setTitulo(Modulo mod);
//TEXTO
	private Texto texto;
		public Texto getTexto();
		public void setTexto(Objeto obj);
//OBJS
	private int objsListaMaxSize;
	private ListaObjeto objetos;
		public ListaObjeto getObjetos();
	//ADD
		public Objeto add(int index,Objeto obj);
		public Objeto add(Objeto obj);
	//DEL
		public Objeto del(Objeto obj);
//SELECTED OBJS
	private ListaObjeto selectedObjetos;
		public ListaObjeto getSelectedObjetos();
	//SELECT
		public boolean select(Objeto obj);
		public void selectTree(Objeto obj);
		public void selectAllMods();
		public void selectAllCoxs();
		public void selectAllNods();
		public void selectAll();
		public boolean selectToBeCreator(Objeto obj);
		public boolean selectToBeSon(Modulo mod);
		public boolean selectToBePai(Modulo mod);
		public boolean selectToBeDeleted(Objeto obj);
	//UNSELECT
		public boolean unSelect(Objeto obj);
		public void unSelectTree(Objeto obj);
		public void unSelectAllMods();
		public void unSelectAllCoxs();
		public void unSelectAllNods();
		public void unSelectAll();
//VISIBLE OBJETOS
		private HashMap&lt;Integer,Modulo&gt;visibleMods;
			public HashMap&lt;Integer,Modulo&gt;getVisibleMods();
		private HashMap&lt;Integer,Conexao&gt;visibleCoxs;
			public HashMap&lt;Integer,Conexao&gt;getVisibleCoxs();
		private HashMap&lt;Integer,Nodulo&gt;visibleNods;
			public HashMap&lt;Integer,Nodulo&gt;getVisibleNods();
		private HashMap&lt;Point,Chunk&gt;chunks;
			public HashMap&lt;Point,Chunk&gt;getChunks();
			public void addToChunk(Objeto obj,Rectangle chunksIndexes);
			public void delDeChunk(Objeto obj,Rectangle chunksIndexes);
			public Rectangle getChunksIndexes(int xIndex,int yIndex,int widthIndex,int heightIndex);
			public Rectangle getChunksIndexes(Rectangle areaIndex);
//MAIN
	public Tree(Painel painel);
//FUNCS
	public void clear();
	public void setFocusOn(Objeto[]objs);
	private Runnable animation;
	public void animate(Point localIni,Point localFim);
//DRAW
@Override
	public synchronized void draw(Graphics2D imagemEdit);
		private void drawFundo(Graphics2D imagemEdit,Rectangle tela,int unit);
		private void drawObjetos(Graphics2D imagemEdit,Rectangle tela,int unit);
		private void drawFrente(Graphics2D imagemEdit);
			private void drawAutoDragLine(Graphics2D imagemEdit);
//TAG -&gt; TREE
	public List&lt;Objeto&gt;addTree(Element mindTag,boolean replaceMestre)throws Exception;
//TREE -&gt; TAG
	public String getText(ListaObjeto lista);
//MENSAGEM
	public enum Options{
		ERRO,
		AVISO;
	}
	public static void mensagem(String mensagem,Options tipo);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Actions" x="405" y="-36">		<text>+ Actions:
- Todas as ações possíveis de Tree.

public class Actions{
//STATES
	public final static int NORMAL;			//[0-9]
	public final static int TO_CREATE;		//[0-9]
	public final static int TO_CONNECT;		//[0-9]
	public final static int TO_DELETE;		//[0-9]
	public final static int EDIT_TITLE;		//[0-9]
	public final static int DRAG;				//[0-9]0
	public final static int MOVE;				//[0-9]0
	public final static int SELECT_AREA;		//[0-9]0
	public final static int WAITING1;			//[0-9]00
	public final static int WAITING2;			//[0-9]00
	public final static int WAITING3;			//[0-9]00
	public final static int LEFT;				//[0-9]000
	public final static int MIDDLE;			//[0-9]000
	public final static int RIGHT;				//[0-9]000
	public final static int DRAG_ALL;			//[0-9]0000
	public final static int AUTO_DRAG_ALL;	//[0-9]0000
	private int state;
		public int getState();
	private class State...
	private abstract class Action...
	private HashMap&lt;Integer,State&gt;states;
		private HashMap&lt;Integer,State&gt;getStates();
		public State setState(int newStateIndex,Objeto...objs);
		public boolean stateContains(int state);
//VAR GLOBAIS
	private JFrame janela;
	private Tree tree;
	private Point oldMouse;
//MOUSES
	public Point mousePressed;
	public Point mouseReleased;
	public Point mouseDragged;
	public Point mouseMoved;
	public Point mouseNonGrid;
//MAIN
	public Actions(Tree tree,JFrame janela);
//INSERIR AÇÕES
	public void putIntputs();
	private void startAutoDrag();
//GET OBJETO HOVER
	private Objeto getObjetoHover(Point mouse);
	private Modulo getModuloHover(Point mouse);
	private Conexao getConexaoHover(Point mouse);
	private Nodulo getNoduloHover(Point mouse);
//GET MOUSE POSITION
	public Point getPosition(Point mouse);
	public Point getGridPosition(Point mouse);
	public Point getNonGridPosition(Point mouse);
//ZOOM
	private int setZoom(Point mouse,int rotation);
//TÍTULO
	private void updateTituloBounds();
//ATALHOS
	public void setModo(int modo);
	//EXIBIR
		public void centralizar();
		public void zoom(int rotation);
	//EDITAR
		public void undo();
		public void redo();
		public void cut();
		public void copy();
		public void paste();
		public void delete();
	//SELECIONAR
		public void selectAll();
		public void unSelectAll();
		public void selectSons();
		public void invertSelection();
		public void selectModSemPai();
	//MÓDULO
		public void editTitulo();
		public void createModRelacionado();
		public void startRelation();
		public void deleteMods();
	//CONEXÃO
		public void invertCox();
//RESET
	public void resetState();
	//ADD/DEL
		public void addUndoable(List&lt;Objeto&gt;objs,boolean addToTree);
		public void addUndoable(Objeto objs,boolean addToTree);
		public void delUndoable(List&lt;Objeto&gt;objs);
		public void delUndoable(Objeto objs);
	//SET
		private void setHover(Selecao.State state);
		private void setArea(Selecao.State state,boolean addTo,int...locations);
		private void addAndSelect(Objeto obj);
	//CREATE
		public Modulo createMod(int x,int y);
		public Modulo createModRelacionado(int x,int y,List&lt;Modulo&gt;modsPais);
		public Nodulo createNod(Segmento seg,int x,int y,boolean undoable);
		private void createNodOnGhostCoxs(int x,int y);
	//RELATE
		private void relateMods(List&lt;Modulo&gt;modsPais,Modulo modSon);
		private void relateToMods(List&lt;Modulo&gt;mods);
		private void relateToMods(Modulo mod);
		public void relateToGhost(List&lt;Modulo&gt;mods);
		private void relateToGhost(Modulo mod);
	//DELETE
		private void deleteGhostCoxs();
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Chunk" x="382" y="-41">		<text>+ Chunk:
- Grupo de objetos, carregados conforme a sua área.

public class Chunk{
//VAR GLOBAIS
	public final static int SIZE;
//OBJETOS
	private ListaObjeto objetos;
		public ListaObjeto getObjetos();
		public void add(Objeto obj);
		public void del(Objeto obj);
		public boolean isEmpty();
//LOCAL
	private int xIndex;
		public int getXIndex();
		public int getX();
	private int yIndex;
		public int getYIndex();
		public int getY();
	public Point getLocationIndex();
//FORMA
	public Rectangle getForm();
//MAIN
	public Chunk(int xIndex,int yIndex);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedo" x="360" y="-21">		<text>+ UndoRedo:
- Controla os undo/redo de Tree.

public class UndoRedo{
//TREE
	private Tree tree;
		public Tree getTree():
		public void setTree(Tree tree);
//LIMITE DE UNDO/REDO
	private int doLimite;
		public int getDoLimite();
		public void setDoLimite(int limite);
//LISTENERS: DISPARAM QUANDO UM UNDO/REDO É FEITO
	private List&lt;UndoRedoListener&gt;undoRedoListeners;
		public void addUndoRedoListener(UndoRedoListener undoRedoListener);
		public void triggerUndoRedoListener(boolean isSaved,boolean isUndo);
//SAVES
	public void addUndoLocal(Objeto[]objs,Point diff);
	public void addUndoTitulo(Modulo mod,String titulo);
	public void addUndoTexto(Objeto obj,List&lt;String&gt;texto);
	public void addUndoCor(Modulo[]mods,Cor[]cores);
	public void addUndoBorda(Objeto[]objs,Borda[]bordas);
	public void addUndoGrossura(Conexao[]coxs,Grossura[]grossuras);
	public void addUndoIcone(Modulo[]mods,Icone icone,UndoRedoIcone.Modo modo);
	public void addUndoObjeto(Objeto[]objs,UndoRedoObjeto.Modo modo);
	private void addUndo(UndoRedoNodo acao);
//UNDO
	private List&lt;UndoRedoNodo&gt;undo;
		public void undo();
//REDO
	private List&lt;UndoRedoNodo&gt;redo;
		public void redo();
//UNDO/REDO
	private void add(List&lt;UndoRedoNodo&gt;undoRedo,UndoRedoNodo acao);
	private void undoRedo(List&lt;UndoRedoNodo&gt;entrada,List&lt;UndoRedoNodo&gt;saida);
//MAIN
	public UndoRedo(Tree tree);
//RESET
	public void clear();
//FOCUS
	private void focusAndSelect(Objeto[]objs);
	private void focusAndSelect(Modulo mod);
	private void focusAndSelect(Conexao cox);
}</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="undoRedo" x="374" y="-23">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedoNodo" x="366" y="-8">		<text>+ UndoRedoNodo:
- Um nodo de uma ação que pode ser salva para ser undo/redo.

public class UndoRedoNodo{
//TIPO
	public enum Tipo...
	private Tipo tipo;
		public Tipo getTipo();
//MAIN
	public UndoRedoNodo(Tipo tipo);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedoListener" x="354" y="-14">		<text>+ UndoRedoListener:
- Deve ser chamado quando o undo/redo executa uma ação.

public interface UndoRedoListener{
	public void actionUndone();
	public void actionRedone();
	public void actionSaved();
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedoTitulo" x="389" y="5">		<text>+ UndoRedoTitulo:
- Guarda uma ação sobre o titulo de um mod.

public class UndoRedoTitulo extends UndoRedoNodo{
//TÍTULO
	private String titulo;
		public String getTitulo();
//MÓDULO
	private Modulo mod;
		public Modulo getModulo();
//MAIN
	public UndoRedoTitulo(Modulo mod,String titulo);
//INVERT
	public UndoRedoTitulo invert(String titulo);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedoLocal" x="389" y="-20">		<text>+ UndoRedoLocal:
- Guarda uma ação sobre a posição de um mod, ou nod.

public class UndoRedoLocal extends UndoRedoNodo{
//LOCAL
	private Point diferenca;
		public Point getDiferenca();
//MÓDULOS/NÓDULOS
	private Objeto[]objs;
		public Objeto[]getObjetos();
		public Objeto getObjeto(int index);
		public int getObjetosCount();
//MAIN
	public UndoRedoLocal(Objeto[]objs,Point diferenca);
//INVERT
	public UndoRedoLocal invert();
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedoObjeto" x="389" y="15">		<text>+ UndoRedoObjeto:
- Guarda uma ação sobre a adição ou exclusão de um mod, cox, ou nod.

public class UndoRedoObjeto extends UndoRedoNodo{
//MODO
	public enum Modo...
	private Modo modo;
		public Modo getModo();
//MÓDULOS/CONEXÕES/NÓDULOS
	private Objeto[]objs;
		public Objeto[]getObjetos();
		public Objeto getObjeto(int index);
		public int getObjetosCount();
//MAIN
	public UndoRedoObjeto(Objeto[]objs,Modo modo);
//INVERT
	public UndoRedoObjeto invert();
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedoTexto" x="389" y="10">		<text>+ UndoRedoTexto:
- Guarda uma ação sobre o texto de um mod ou cox.

public class UndoRedoTexto extends UndoRedoNodo{
//TEXTO
	private List&lt;String&gt;texto;
		public List&lt;String&gt;getTexto();
//MÓDULO/CONEXÃO
	private Objeto obj;
		public Objeto getObjeto();
//MAIN
	public UndoRedoTexto(Objeto obj,List&lt;String&gt;texto);
//INVERT
	public UndoRedoTexto invert(List&lt;String&gt;texto);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedoIcone" x="391" y="-10">		<text>+ UndoRedoIcone:
- Guarda uma ação sobre a adição ou exclusão de um icone de um mod.

public class UndoRedoIcone extends UndoRedoNodo{
//MODO
	public enum Modo...
	private Modo modo;
		public Modo getModo();
//ICONE
	private Icone icone;
		public Icone getIcone();
//MÓDULOS
	private Modulo[]mods;
		public Modulo[]getModulos();
		public Modulo getModulo(int index);
		public int getModulosCount();
//MAIN
	public UndoRedoIcone(Modulo[]mods,Icone icone,Modo modo);
//INVERT
	public UndoRedoIcone invert();
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedoCor" x="389" y="-15">		<text>+ UndoRedoCor:
- Guarda uma ação sobre a cor de um mod.

public class UndoRedoCor extends UndoRedoNodo{
//CORES
	private Cor[]cores;
		public Cor getCor(int index);
//MÓDULOS
	private Modulo[]mods;
		public Modulo[]getModulos();
		public Modulo getModulo(int index);
		public int getModulosCount();
//MAIN
	public UndoRedoCor(Modulo[]mods,Cor[]cores);
//INVERT
	public UndoRedoCor invert(Cor[]cores);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedoBorda" x="391" y="-5">		<text>+ UndoRedoBorda:
- Guarda uma ação sobre a borda de um mod, ou cox.

public class UndoRedoBorda extends UndoRedoNodo{
//BORDA
	private Borda[]bordas;
		public Borda getBorda(int index);
//MÓDULOS/CONEXÕES
	private Objeto[]objs;
		public Objeto[]getObjetos();
		public Objeto getObjeto(int index);
		public int getObjetosCount();
//MAIN
	public UndoRedoBorda(Objeto[]objs,Borda[]bordas);
//INVERT
	public UndoRedoBorda invert(Borda[]bordas);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="UndoRedoGrossura" x="389" y="0">		<text>+ UndoRedoGrossura:
- Guarda uma ação sobre a grossura de um cox.

public class UndoRedoGrossura extends UndoRedoNodo{
//GROSSURA
	private Grossura[]grossuras;
		public Grossura getGrossura(int index);
//CONEXÕES
	private Conexao[]coxs;
		public Conexao[]getConexoes();
		public Conexao getConexao(int index);
		public int getConexoesCount();
//MAIN
	public UndoRedoGrossura(Conexao[]coxs,Grossura[]grossuras);
//INVERT
	public UndoRedoGrossura invert(Grossura[]grossuras);
}</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="texto" x="334" y="-23">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="ObjetoSetListener" x="322" y="-17">		<text>+ ObjetoSetListener:
- Deve ser chamado quando o Texto tem o seu obj modificado.

public interface ObjetoSetListener{
	public void objetoModified(Objeto oldObj,Objeto newObj);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Texto" x="336" y="-17">		<text>+ Texto:
- O texto que recebe o texto de mods e coxs.
- Utilizado em Texto de mods e coxs, e Titulo de mods.

public class Texto extends JTextPane{
//OBJETO
	private Objeto obj;
		public Objeto getObjeto();
		public void setObjeto(Objeto obj);
		public void clearObjeto();
//LISTENER: DISPARA COM O MUDAR DE OBJETO
	private List&lt;ObjetoSetListener&gt;objetoSetListeners;
		public void addObjetoSetListener(ObjetoSetListener objetoSetListener);
		public void triggerObjetoSetListener(Objeto oldObj,Objeto newObj);
//UNDO-REDO
	private UndoManager undoManager;
		public UndoManager getUndoManager();
		public void setUndoManager(UndoManager undoManager);
		public boolean undo();
		public boolean redo();
		public void crearUndo();
		public void setUndoLimit(int limite);
//EDITOR CUSTOM
//&lt;EDITOR_CUSTOM&gt;
	private class CustomEditor extends StyledEditorKit...
//&lt;/EDITOR_CUSTOM&gt;
	private CustomEditor editor=new CustomEditor();
		public boolean isLineWrappable();
		public void setLineWrappable(boolean wrappable);
		public boolean isLineWrapped();
		public void setLineWrap(boolean wrap);
		public boolean isAllCharsVisible();
		public void setViewAllChars(boolean hide);
//MAIN
	public Texto();
//FUNCS
	public void addEditorListener(DocumentListener listener);
	public void deleteLine();
	public void addTab(KeyEvent k);
	public void remTab();
//DRAW
@Override
	public void paint(Graphics imagemEdit);	//Adiciona antialias LCD(Contorno colorido)
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Objeto" x="432" y="-18">		<text>+ Objeto:
- Utilizado pelo Tree, são os que aparecem na interface.

public class Objeto{
//TIPO
	public enum Tipo...
	private Objeto.Tipo tipo;
		public Objeto.Tipo getTipo();
//INDEX
	private int index;
		public int getIndex();
		public void setIndex(int index);
//MAIN
	public Objeto(Objeto.Tipo tipo);
//FUNCS
	public boolean contains(Point mouse);
@Override
	public int hashCode();						//Necessário para ser incluído em listas
@Override
	public boolean equals(Object obj);	//Necessário para ser comparado
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="ListaObjeto" x="446" y="-21">		<text>+ ListaObjeto:
- Lista que guarda listas de mods, coxs, e nods.

public class ListaObjeto{
//LISTAS
	final HashMap&lt;Integer,Objeto&gt;listaAll;
		public HashMap&lt;Integer,Objeto&gt;getAll();
		public List&lt;Objeto&gt;getAllOrdened();
		public List&lt;Objeto&gt;getAllOrdenedInverted();
	private List&lt;Modulo&gt;listaMods;
		public List&lt;Modulo&gt;getModulos();
	private List&lt;Conexao&gt;listaCoxs;
		public List&lt;Conexao&gt;getConexoes();
	private List&lt;Nodulo&gt;listaNods;
		public List&lt;Nodulo&gt;getNodulos();
//MAIN
	public ListaObjeto(){}
//FUNCS
	public boolean has(Objeto.Tipo...tipos);					//Se possúi o tipo dado
	public static ListaObjeto toList(Objeto[]objs);			//Resolve em uma Lista
	public static ListaObjeto toList(List&lt;Objeto&gt;objs);	//Resolve em uma Lista
	public boolean isEmpty();
	public boolean contains(Objeto obj);
	public void clear();
	public int size();
//ADD
	public boolean add(Objeto obj);
	public boolean add(int index,Objeto obj);
//DEL
	public boolean del(Objeto obj);
}</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="conexao" x="446" y="-12">		<text/>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="modulo" x="420" y="-12">		<text/>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="objeto" x="432" y="-24">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Icone" x="423" y="-42">		<text>+ Icone:
- Os diferentes icones que um mod pode ter.

public class Icone{
//ICONE
	private Image icone;
		public Image getIcone();
		public void setIcone(Image icone);
//LINK
	private File link;					//Link absoluto
		public String getNome();
		public String getLink();
		public void setLink(File link);
	private String relativeLink;		//Link partindo da pasta Icones
		public String getRelativeLink();
		public void setRelativeLink(String relativeLink);
//MAIN
	public Icone(Image icone,File link,String relativeLink);
//FUNCS
@Override
	public int hashCode();						//Necessário para ser incluído em listas
@Override
	public boolean equals(Object obj);	//Necessário para ser comparado
//SIZE
	public static int getSize();							//Retorna o tamanho
	public static int getRelativeSize(int unit);	//Retorna o tamanho dado uma unidade
//DRAW
	public void draw(Graphics2D imagemEdit,int x,int y);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Borda" x="431" y="-36">		<text>+ Borda:
- As diferentes bordas que um mod e cox podem ter.

public class Borda{
//BORDAS
	public static final int SOLID;							//Linha sólida
	public static final int TRACED;						//Linha com traços
	public static final int LONG_TRACED;					//Linha com traços longos
	public static final int DOTTED;						//Linha com pontos
	public static final int DOTTED_1_TRACED_1;			//Linha com 1 ponto e 1 traço
	public static final int DOTTED_2_TRACED_1;			//Linha com 2 pontos e 1 traço
	public static final int DOTTED_1_TRACED_2;			//Linha com 1 ponto e 2 traços
	public static final int DOTTED_2_TRACED_2;			//Linha com 2 pontos e 2 traços
	public static final int DOTTED_1_LONG_TRACED_1;	//Linha com 1 ponto e 1 traço longo
	public static final int DOTTED_2_LONG_TRACED_1;	//Linha com 2 pontos e 1 traço longo
	public static final int DOTTED_1_LONG_TRACED_2;	//Linha com 1 ponto e 2 traços longos
	public static final int DOTTED_2_LONG_TRACED_2;	//Linha com 2 pontos e 2 traços longos
	private int index;
		public int getIndex();
		public void setIndex(int index);
//BORDA VISUAL
	public BasicStroke getVisual();						//Valor para os mods
	public BasicStroke getVisual(Grossura grossura);	//Valor para os coxs
	public BasicStroke getStaticVisual();				//Valor para o popup
	public BasicStroke getVisual(float borda);			//Devolve uma borda dado um dos indexes
//NOME
	public String getNome();	//Nome da borda para o popup
//MAIN
	public Borda(int index);	//Pode apenas ser chamado se dado uma grossura
//FUNCS
@Override
	public int hashCode();						//Necessário para ser incluído em listas
@Override
	public boolean equals(Object obj);	//Necessário para ser comparado
//TODAS AS BORDAS
	public static Borda[]getAllBordas();	//Lista com todas as grossuras
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Grossura" x="437" y="-37">		<text>+ Grossura:
- As diferentes grossuras que um cox pode ter.

public class Grossura{
//GROSSURAS
	public static final int MEDIUM;		//Grossura padrão
	public static final int THIN;			//Fino
	public static final int WIDE;			//Grosso
	public static final int ULTRA_WIDE;	//O mais grosso possível
	private int index;
		public int getIndex();
		public void setIndex(int index);
//VALOR
	public float getValor();					//Valor para o coxs
	public float getStaticValor();			//Valor para o popup
	public float getValor(float borda);	//Devolve uma grossura dado um dos indexes
//NOME
	public String getNome();		//Nome da grossura para o popup
//MAIN
	public Grossura(int index);	//Pode apenas ser chamado se dado uma grossura
//FUNCS
@Override
	public int hashCode();						//Necessário para ser incluído em listas
@Override
	public boolean equals(Object obj);	//Necessário para ser comparado
//TODAS AS GROSSURAS
	public static Grossura[]getAllGrossuras();	//Lista com todas as grossuras
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Cor" x="427" y="-37">		<text>+ Cor:
- As diferentes cores que tudo pode ter.

public class Cor extends Color{
//CORES
	public static Cor TRANSPARENTE;
//BRILHO
	private int brilho;				//O brilho da cor
		public int getBrilho();
		private void setBrilho(Cor cor);
		public boolean isDark();	//Se a cor é considerada escura
//MAIN
	public Cor(int r,int g,int b);						//Se dado um RGB
	public Cor(int r,int g,int b,int a):				//Se dado um RGBA
	public Cor(float r,float g,float b,float a);	//Se dado um RGBA
	public Cor(Color cor);									//Se dado uma Cor
//FUNCS
@Override
	public int hashCode();						//Necessário para ser incluído em listas
@Override
	public boolean equals(Object obj);	//Necessário para ser comparado
//CONVERSÕES
	public String toHexOpaque();					//Converte para HEX #FF00FF
	public String toHexAlpha();					//Converte para HEX #FF00FF00
	public static Cor RGBToHex(String rgb);	//Converte RGB para HEX
	public static Cor HexToRGBA(String hex)throws Exception;	//Converte HEX para RGBA
	public static int getBrightness(Color cor);	//Valor que indica a cor
//TRANSFORMAÇÕES
	public static Cor getChanged(Color cor,float brilho);			//Muda o brilho em %
	public static Cor getChanged(Color cor,int valor);				//Muda o brilho diretamente
	public static Cor getTransparent(Color cor,float opacity);	//Muda a transparência
	public static Cor getInverted(Color cor);							//Inverte a cor
	public static Cor getContraste(Cor corFundo,Cor cor,boolean esclarecer);	//Cria contraste
}</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="popup" x="492" y="-23">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Popup" x="483" y="-7">		<text>+ Popup:
- Uma lista de opções da interface.

public class Popup{
//TIPO
	public enum Tipo...
//TREE(PAI)
	private Tree tree;
		public Tree getTree();
//LOCAL
	private Point local;
//PASTA DE ICONES
	private File iconesPasta;
		public File getIconePasta();
		public void setIconePasta(File link);
//VAR GLOBAIS
	public static final int BLOCO_SIZE;
	public static final int GRID_BORDA;
	public static final int BLOCO_SPACE;
//ITENS
	private Menu mod_menuBordas;
	private Item mod_editTitle;
	private Item mod_newCox;
	private Item cox_newNod;
	private Item del;
//PICKS COM POPUP
	private List&lt;IconePick&gt;mod_iconPicks;
	private CorPick mod_corPick;
	private BordaPick mod_bordaPick;
	private BordaPick cox_bordaPick;
	private GrossuraPick cox_grossuraPick;
//POPUPS
	private JPopupMenu treePopup;
	private JPopupMenu modPopup;
	private JPopupMenu coxPopup;
	private JPopupMenu nodPopup;
//FOCUS
	public static final int DELAY;
	private static Runnable focusRun;			//ITEM/MENU A FOCAR
		public static synchronized Runnable getFocus();
		public static synchronized void setFocus(Runnable focus);
	private static boolean goingToFocus=false;	//SE IRÁ FOCAR EM UM MENU/ITEM
		public static synchronized boolean getGoingToFocus();
		public static synchronized void setGoingToFocus(boolean focus);
//MAIN
	public Popup(Tree tree);
//SHOW
	public void show(Point local,Tipo tipo);
	public void close();
	public static void toggleTooltip(boolean show);
//UPDATE
	public void update();
	//UPDATE ICONES
		private Menu getMenuIcon(File pastaIcon);
			private void setMenuIcon(Menu menu,File pasta,String subPasta);
	//UPDATE CORES
		public void setCoresPaleta(Cor[][]coresPaleta);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Bloco" x="502" y="-7">		<text>+ Bloco:
- Bloco de seleção de opções.

public class Bloco extends Rectangle{
//FOCO
	private boolean focus;
		public void setFocus(boolean foco){focus=foco;}
		public boolean isFocused(){return focus;}

}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Item" x="490" y="0">		<text>+ Item:
- Um item que possúi delay antes de abrir.

public class Item extends JMenuItem{
//TREE
	private Tree tree;
		public Tree getTree();
		public void setTree(Tree tree);
//BLOCOS
	public void unfocusAll();	//USADO PELOS EXTENDS
//MAIN
	private final Item item;
	public Item(String titulo,Tree tree);
//FUNCS
@Override
	public void setEnabled(boolean enabled);
//FOCO
	private Runnable focusDelayed(Item item);
	private void focus(Item item);
@Override
	protected void processMouseEvent(MouseEvent m);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Menu" x="495" y="0">		<text>+ Menu:
- Um menu que possúi delay antes de abrir.

public class Menu extends JMenu{
//MAIN
	private final Menu menu=this;
	public Menu(String titulo);
//FUNCS
@Override
	public void setEnabled(boolean enabled);
//FOCO
	private Runnable focusDelayed(Menu menu);
	private void focus(Menu menu);
@Override
	protected void processMouseEvent(MouseEvent m);
}</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="icon" x="463" y="8">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="IconeBloco" x="467" y="22">		<text>+ IconeBloco:
- Bloco de seleção de Icones.

public class IconeBloco extends Bloco{
//ICONE
	private Icone icone;
		public Icone getIcone();
		public void setIcone(Icone icone);
//MAIN
	public IconeBloco(IconePick pick,int x,int y,int size,Icone icone);
	public IconeBloco(IconePick pick);
	private void set(IconePick pick);
//DRAW
	public void draw(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="IconePick" x="456" y="21">		<text>+ IconePick:
- Seletor de Icones.

public class IconePick extends Item{
//MÓDULOS
	private List&lt;Modulo&gt;selectedMods;
		public void setModSelec(List&lt;Modulo&gt;modSelec);
		public List&lt;Modulo&gt;getSelectedMods();
//ICONES
	private List&lt;List&lt;IconeBloco&gt;&gt;iconesBlocos;
//LISTENER: DISPARA QUANDO MODS TEM SEUS ICONES MUDADOS
	private List&lt;IconePickListener&gt;iconePickListeners;
		public List&lt;IconePickListener&gt;getIconePickListeners();
		public void addIconePickListener(IconePickListener iconePickListener);
		public void triggerIconePickListener(Icone icone,boolean isAdding);
//TOOLTIP
	private IconeBloco toolTipBloco;
		public void setToolTipBloco(IconeBloco bloco);
	@Override
		public Point getToolTipLocation(MouseEvent m);
//VARS GLOBAIS
	public static List&lt;Icone&gt;ICONES;
//MAIN
	public IconePick(Tree tree,File iconesPasta,String iconeSubPasta,List&lt;Modulo&gt;modSelec,double minWidth);
//FUNCS
@Override
	public void unfocusAll();
//DRAW
@Override
	public void paint(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="CorPick" x="476" y="21">		<text>+ CorPick:
- Seletor de Cores.

public class CorPick extends Item{
//MÓDULOS SELECIONADOS
	private List&lt;Modulo&gt;selectedMods;
		public void setSelectedMods(List&lt;Modulo&gt;selectedMods);
//PALETA DE CORES
	public static Cor[][]PALETA_DEFAULT;
//BLOCOS DE CORES
	private List&lt;List&lt;CorBloco&gt;&gt;coresBlocos;
	private CorBloco corBloco;
		public CorBloco getBlocoPrincipal();
//BLOCO DO COLORPICK
	private CorPickBloco corPickBloco;
//LISTENER: DISPARA QUANDO MODS TEM SUAS CORES MUDADAS
	private List&lt;CorPickListener&gt;corPickListeners;
		public List&lt;CorPickListener&gt;getCorPickListeners();
		public void addCorPickListener(CorPickListener corPickListener);
		public void triggerCorPickListener(Cor[]oldCores,Cor newCor);
//MAIN
	public CorPick(Tree tree,List&lt;Modulo&gt;selectedMods);
//FUNCS
@Override
	public void unfocusAll();
//DRAW
@Override
	public void paint(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="color" x="483" y="8">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="IconePickListener" x="459" y="27">		<text>+ IconePickListener:
- Deve ser chamado quando um icone é adicionado ou removido.

public interface IconePickListener{
	public void iconAdded(Modulo[]mods,Icone icone);
	public void iconRemoved(Modulo[]mods,Icone icone);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="CorPickListener" x="480" y="27">		<text>+ CorPickListener:
- Deve se chamado quando uma cor é mudada.

public interface CorPickListener{
	public void colorModified(Modulo[]mods,Cor[]oldCores,Cor newCor);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="CorBloco" x="487" y="22">		<text>+ CorBloco:
- Bloco de seleção de Cores.

public class CorBloco extends Bloco{
//COR
	private Cor cor;
		public Cor getCor();
		public void setCor(Cor cor);
		public void setCor(Color cor);
//MAIN
	public CorBloco(CorPick pick,int x,int y,int size,Cor cor);
	public CorBloco(CorPick pick);
	private void set(CorPick pick);
//DRAW
	public void draw(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="BordaPick" x="495" y="21">		<text>+ BordaPick:
- Seletor de Bordas.

public class BordaPick extends Item{
//MÓDULOS/CONEXÕES SELECIONADOS
	private List&lt;Modulo&gt;selectedMods;
		public void setSelectedMods(List&lt;Modulo&gt;selectedMods);
	private List&lt;Conexao&gt;selectedCoxs;
		public void setSelectedCoxs(List&lt;Conexao&gt;selectedCoxs);
//BORDAS
	private List&lt;List&lt;BordaBloco&gt;&gt;bordasBlocos;
//LISTENER: DISPARA QUANDO MODS/COXS TEM SUA BORDA MUDADA
	private List&lt;BordaPickListener&gt;bordaPickListeners;
		public List&lt;BordaPickListener&gt;getBordaPickListeners();
		public void addBordaPickListener(BordaPickListener bordaPickListener);
		public void triggerBordaPickListener(Borda[]oldBordas,Borda newBorda);
//TOOLTIP
	private BordaBloco toolTipBloco;
		public BordaBloco getTooltipBloco();
		public void setToolTipBloco(BordaBloco bloco);
	@Override
		public Point getToolTipLocation(MouseEvent m);
//MAIN
	public BordaPick(Tree tree,List&lt;Modulo&gt;selectedMods,List&lt;Conexao&gt;selectedCoxs);
//FUNCS
@Override
	public void unfocusAll();
//DRAW
@Override
	public void paint(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="BordaPickListener" x="498" y="27">		<text>+ GrossuraPickListener:
- Deve se chamado quando uma borda é mudada.

public interface BordaPickListener{
	public void bordaModified(Objeto[]objs,Borda[]oldBordas,Borda newBorda);
}</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="borda" x="502" y="8">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="BordaBloco" x="506" y="22">		<text>+ BordaBloco:
- Bloco de seleção de Bordas.

public class BordaBloco extends Bloco{
//BORDA
	private Borda borda;
		public Borda getBorda();
		public void setBorda(Borda borda);
//MAIN
	public BordaBloco(BordaPick pick,int x,int y,int size,Borda borda);
	public BordaBloco(BordaPick pick);
	private void set(BordaPick pick);
//DRAW
	public void draw(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="GrossuraPick" x="516" y="21">		<text>+ GrossuraPick:
- Seletor de Grossuras.

public class GrossuraPick extends Item{
//CONEXÕES SELECIONADAS
	private List&lt;Conexao&gt;selectedCoxs;
		public void setSelectedCoxs(List&lt;Conexao&gt;selectedCoxs);
		public List&lt;Conexao&gt;getSelectedCoxs();
//GROSSURAS
	private List&lt;GrossuraBloco&gt;grossurasBlocos;
//LISTENER: DISPARA QUANDO COXS TEM SUA GROSSURA MUDADA
	private List&lt;GrossuraPickListener&gt;grossuraPickListeners;
		public List&lt;GrossuraPickListener&gt;getGrossuraPickListeners();
		public void addGrossuraPickListener(GrossuraPickListener grossuraPickListener);
		public void triggerGrossuraPickListener(Grossura[]oldGrossuras,Grossura newGrossura);
//TOOLTIP
	private GrossuraBloco toolTipBloco;
		public void setToolTipBloco(GrossuraBloco bloco);
	@Override
		public Point getToolTipLocation(MouseEvent m);
//MAIN
	public GrossuraPick(Tree tree,List&lt;Conexao&gt;selectedCoxs);
//FUNCS
@Override
	public void unfocusAll();
//DRAW
@Override
	public void paint(Graphics imagemEdit);
}
</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="GrossuraPickListener" x="520" y="27">		<text>+ GrossuraPickListener:
- Deve se chamado quando a grossura é mudada.

public interface GrossuraPickListener{
	public void grossuraModified(Conexao[]coxs,Grossura[]oldGrossuras,Grossura newGrossura);
}</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="grossura" x="524" y="8">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="GrossuraBloco" x="529" y="22">		<text>+ GrossuraBloco:
- Bloco de seleção de Grossuras.

public class GrossuraBloco extends Bloco{
//GROSSURA
	private Grossura grossura;
		public Grossura getGrossura();
		public void setGrossura(Grossura grossura);
//MAIN
	public GrossuraBloco(GrossuraPick pick,int x,int y,int size,Grossura grossura);
	public GrossuraBloco(GrossuraPick pick);
	private void set(GrossuraPick pick);
//DRAW
	public void draw(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Conexao" x="426" y="-3">		<text>+ Conexao:
- Linha que conecta os mods.
- Configurações:
. Borda.
. Grossura.
. Nódulos.

public class Conexao extends Objeto{
//STATES
	public enum State...
	private Conexao.State state;
		public Conexao.State getState();
		public void setState(Conexao.State state);
//LOCAL
	public int getX1Index();
	public int getX1();
	public int getY1Index();
	public int getY1();
	public int getX2Index();
	public int getX2();
	public int getY2Index();
	public int getY2();
//FORMA
	public Path2D.Float getFormIndex();
	public Path2D.Float getForm();
@Override
	public boolean contains(Point mouse);
	public Segmento segmentContains(Point mouse);
//LISTENER: DISPARA COM O MUDAR DE BOUNDS DE UM OBJETO
	public static List&lt;ObjetoBoundsListener&gt;boundsListeners;	//Mudado pelos mods e nods
		public static void addBoundsListener(ObjetoBoundsListener boundsListener);
//MÓDULOS
	private Modulo pai;
		public Modulo getPai();
		public void setPai(Modulo mod);
	private Modulo son;
		public Modulo getSon();
		public void setSon(Modulo mod);
//NÓDULOS
	private List&lt;Nodulo&gt;nodulos;
		public List&lt;Nodulo&gt;getNodulos();
		public boolean addNodulo(Nodulo nod);
		public boolean delNodulo(Nodulo nod);
//SEGMENTOS
	private List&lt;Segmento&gt;segmentos;		//São criados entre os mods e nods
		public List&lt;Segmento&gt;getSegmentos();
		private boolean addSegmentos(Nodulo nod);
		private boolean delSegmentos(Nodulo nod);
//BORDA
	private Borda borda;
		public Borda getBorda();
		public boolean setBorda(Borda borda);
//GROSSURA
	private Grossura grossura;
		public Grossura getGrossura();
		public boolean setGrossura(Grossura grossura);
//TEXTO
	private List&lt;String&gt;texto;
		public List&lt;String&gt;getTexto();
		public void setTexto(List&lt;String&gt;texto);
		public void setTexto(String texto);
		public String getText();
//POSIÇÃO DO CURSOR
	private int caret;
		public void setCaret(int caret);
		public int getCaret();
//MAIN
	public Conexao(Modulo pai,Modulo son);
//FUNCS
@Override
	public int hashCode();						//Necessário para ser incluído em listas
@Override
	public boolean equals(Object obj);	//Necessário para ser comparado
//DRAW
	public void draw(Graphics2D imagemEdit,int unit);
		private void drawBrilho(Graphics2D imagemEdit,int unit,float borda);
		private void drawLinha(Graphics2D imagemEdit,int unit);
		private void drawPonta(Graphics2D imagemEdit,int unit);
			private Point2D.Float getPonta(float x1,float y1,float x2,float y2);
	public Cor getBrilhoCor(Conexao.State state);
	public Cor getLinhaCor(Conexao.State state);
//TAG -&gt; COX
	public static Conexao getConexao(Element coxTag,HashMap&lt;Integer,Modulo&gt;ids);
//COX -&gt; TAG
	public void addToXML(Document xml,Element mindTag,HashMap&lt;Modulo,Integer&gt;ids);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Segmento" x="451" y="9">		<text>+ Segmento:
- Linha que conecta os nods de um cox.

public class Segmento extends Objeto{
//STATES
	public enum State...
	private Segmento.State state;
		public Segmento.State getState();
		public void setState(Segmento.State state);
//CONEXÃO
	public Conexao conexao;
		public Conexao getConexao();
		public void setConexao(Conexao cox);
//PONTAS
	private Objeto ponta1;
		public Objeto getPonta1();
		public void setPonta1(Objeto obj);
	private Objeto ponta2;
		public Objeto getPonta2();
		public void setPonta2(Objeto obj);
//LOCAL
	public int getX1Index();
	public int getX1();
	public int getY1Index();
	public int getY1();
	public int getX2Index();
	public int getX2();
	public int getY2Index();
	public int getY2();
//FORMA
	public Line2D getForm();
	public boolean contains(Point mouse);
//MAIN
	public Segmento(Conexao cox,Objeto obj1,Objeto obj2);
//FUNCS
@Override
	public int hashCode();						//Necessário para ser incluído em listas
@Override
	public boolean equals(Object obj);	//Necessário para ser comparado
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="ObjetoBoundsListener" x="404" y="-20">		<text>+ ObjetoBoundsListener:
- Deve ser chamado quando um obj muda de local ou tamanho.

public interface ObjetoBoundsListener{
	public void boundsChanged(Objeto obj,Rectangle oldBoundsIndex,Rectangle newBoundsIndex);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Modulo" x="409" y="-3">		<text>+ Modulo:
- Bloco de texto, que anota idéias.
- Configurações:
. Local.
. Cor.
. Icones.
. Borda.
. Título.
. Texto.
. Conexões.

public class Modulo extends Objeto{
//STATES
	public enum State...
	private State state;
		public Modulo.State getState();
		public void setState(Modulo.State state);
//VAR GLOBAIS
	public static int getRoundValue();
	public static class Cores...
//LOCAL
	private int xIndex;
		public int getXIndex();
		public int getX();
		public int getMeioXIndex();
		public int getMeioX();
		public void setXIndex(int x);
	private int yIndex;
		public int getYIndex();
		public int getY();
		public int getMeioYIndex();
		public int getMeioY();
		public void setYIndex(int y);
	public Point getLocationIndex();
	public Point getLocation();
	public void setLocationIndex(int x,int y);
//FORMA
	private int widthIndex;
		public int getWidthIndex();
		public int getWidth();
	private int heightIndex;
		public int getHeightIndex();
		public int getHeight();
	public Dimension getSizeIndex();
	public Rectangle getFormIndex();
	public Rectangle getForm();
	public void justSetSize();
	public void setSize();
@Override
	public boolean contains(Point mouse);
//LISTENER: DISPARA COM O MUDAR DE BOUNDS DE UM OBJETO
	private static List&lt;ObjetoBoundsListener&gt;boundsListeners;
		public static void addBoundsListener(ObjetoBoundsListener boundsListener);
		private void triggerBoundsListener(Rectangle oldBounds,Rectangle[]coxsOldBounds);
//COR
	private Cor cor;
		public Cor getCor();
		public void setCor(Cor cor);
//BORDA
	private Borda borda;
		public Borda getBorda();
		public boolean setBorda(Borda borda);
//ICONES
	private List&lt;Icone&gt;icones;
		public List&lt;Icone&gt;getIcones();
		public boolean justAddIcone(Icone icone);
		public boolean addIcone(Icone icone);
		public Icone delIcone(Icone icone);
		public boolean isIconified();
//TITULO
	private String[]titulo;
		public String getTitle();
		public void justSetTitle(String titulo);
		public void setTitle(String titulo);
//TEXTO
	private List&lt;String&gt;texto;
		public List&lt;String&gt;getTexto();
		public void setTexto(List&lt;String&gt;texto);
		public void setTexto(String texto);
		public String getText();
//POSIÇÃO DO CURSOR
	private int caret;		//Ao focar em Texto, o cursor se lembra de sua posição
		public int getCaret();
		public void setCaret(int caret);
//CONEXÕES
	private List&lt;Conexao&gt;conexoes;
		public List&lt;Conexao&gt;getConexoes();
		public boolean addConexao(Conexao cox);
		public boolean delConexao(Conexao cox);
//MAIN
	public Modulo(int x,int y,String titulo);
	public Modulo();
//FUNCS
	public static Font getFont(int unit);
	public Font getRelativeFont(int unit);
@Override
	public int hashCode();						//Necessário para ser incluído em listas
@Override
	public boolean equals(Object obj);	//Necessário para ser comparado
//DRAW
	public void draw(Graphics2D imagemEdit,int unit);
		private void drawBrilho(Graphics2D imagemEdit,int unit,int round,float borda);
		private void drawFundo(Graphics2D imagemEdit,int round);
		private void drawBorda(Graphics2D imagemEdit,int unit,int round,float borda);
		private void drawTitulo(Graphics2D imagemEdit,int unit);
		private void drawIcone(Graphics2D imagemEdit,int unit);
	public Cor getBrilhoCor(Modulo.State state);
	public Cor getFundoCor(Modulo.State state);
	public Cor getBordaCor(Modulo.State state);
//TAG -&gt; MOD
	public static Modulo getModulo(Element modTag)throws Exception;
//MOD -&gt; TAG
	public void addToXML(Document xml,Element mindTag);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Nodulo" x="442" y="1">		<text>+ Nodulo:
- Ponto que dobra o cox.
- Configurações:
. Local.

public class Nodulo extends Objeto{
//STATES
	public enum State...
	private Nodulo.State state;
		public Nodulo.State getState();
		public void setState(Nodulo.State state);
//VAR GLOBAIS
	public float getRoundValue();
//BOUNDS
	private int xIndex;
		public int getXIndex();
		public int getX();
	private int yIndex;
		public int getYIndex();
		public int getY();
	public Point getLocationIndex();
	public Point getLocation();
	public void justSetLocationIndex(int x,int y);
	public void setLocationIndex(int x,int y);
//FORMA
	public float getWidth();
	public Rectangle getFormIndex();
	public Rectangle getForm();
@Override
	public boolean contains(Point mouse);
//LISTENER: DISPARA COM O MUDAR DE BOUNDS DE UM OBJETO
	private static List&lt;ObjetoBoundsListener&gt;boundsListeners;
		public static void addBoundsListener(ObjetoBoundsListener boundsListener);
		private void triggerBoundsListener(Rectangle nodOldBounds,Rectangle coxOldBounds);
//CONEXÃO
	private Conexao conexao;
		public Conexao getConexao();
		public void setConexao(Conexao cox);
//INDEX ON COX
	private int indexOnCox;
		public int getIndexOnCox();
		public void setIndexOnCox(int index);
//MAIN
	public Nodulo(Conexao cox,int x,int y);
//FUNCS
@Override
	public int hashCode();						//Necessário para ser incluído em listas
@Override
	public boolean equals(Object obj);	//Necessário para ser comparado
//DRAW
	public void draw(Graphics2D imagemEdit,int unit);
		private void drawBrilho(Graphics2D imagemEdit,int unit,float width,float round,float borda);
		private void drawPonto(Graphics2D imagemEdit,int unit,float width,float round);
	public Cor getBrilhoCor(Nodulo.State state);
	public Cor getPontoCor(Nodulo.State state);
//TAG -&gt; NOD
	public static Nodulo getNodulo(Element nodTag,Conexao cox);
//NOD -&gt; TAG
	public void addToXML(Document xml,Element coxTag);
}</text>	</mod>	<mod border="0" color="999999" icons="" title="Java" x="366" y="-101">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="JPanel" x="372" y="-96">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="JMenu" x="357" y="-87">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="JMenuItem" x="359" y="-84">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Rectangle" x="379" y="-99">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="CustomEditor" x="334" y="-12">		<text>private class CustomEditor extends StyledEditorKit{
//QUEBRA DE LINHA
	private boolean lineWrappable;
		public boolean isLineWrappable();
		public void setLineWrappable(boolean wrappable);
	private boolean lineWrap;
		public boolean isLineWrapped();
		public void setLineWrap(boolean wrap);
//CARACTERES INVISÍVEIS
	private boolean viewAllChars;
		public boolean isAllCharsVisible();
		public void setViewAllChars(boolean view);
//TAMANHO DO TAB
	private int tabSize;
		public int getTabSize();
		public void setTabSize(int size);
//&lt;GRADE_CUSTOM&gt;
	private class CustomColumnFactory implements ViewFactory...
//&lt;/GRADE_CUSTOM&gt;
	private final CustomColumnFactory columnFactory;
@Override
	public ViewFactory getViewFactory();
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="StyledEditorKit" x="361" y="-81">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="CustomColumnFactory" x="332" y="-9">		<text>private class CustomColumnFactory implements ViewFactory{
//&lt;CARACTER_CUSTOM&gt;
	private class CustomLabelView extends LabelView...
//&lt;/CARACTER_CUSTOM&gt;
//&lt;PARÁGRAFO_CUSTOM&gt;
	private class CustomParagraphView extends ParagraphView...
//&lt;/PARÁGRAFO_CUSTOM&gt;
//FUNCS
@Override
	public View create(javax.swing.text.Element elem);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="ViewFactory" x="367" y="-78">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="CustomLabelView" x="328" y="-6">		<text>private class CustomLabelView extends LabelView{
//MAIN
	public CustomLabelView(javax.swing.text.Element elem);
//FUNCS
@Override
	public float getMinimumSpan(int axis);
//DRAW
@Override
	public void paint(Graphics g,Shape a);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="LabelView" x="372" y="-75">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="CustomParagraphView" x="337" y="-3">		<text>private class CustomParagraphView extends ParagraphView{
//MAIN
	public CustomParagraphView(Element elem);
//FUNCS
@Override
	public float nextTabStop(float x,int tabOffset);
@Override
	public void layout(int width,int height);
@Override
	public float getMinimumSpan(int axis);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="ParagraphView" x="375" y="-72">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Fonte" x="397" y="-31">		<text>public static class Fonte{
	public static Font FONTE;
	public static Cor FUNDO;
	public static Cor FUNDO_SELECT;
	public static Cor FUNDO_UNSELECT;
	public static Cor DARK;
	public static Cor LIGHT;
	public static Cor SELECTED;
	public static Cor UNSELECTED;
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Tipo" x="427" y="-14">		<text>public enum Tipo{
	MODULO,
	CONEXAO,
	NODULO,
	SEGMENTO;
	public boolean is(Objeto.Tipo... tipos);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="State" x="423" y="2">		<text>public enum State{
	UNSELECTED,
	SELECTED,
	HIGHLIGHTED,
	TO_BE_CREATOR,
	TO_BE_DELETED;
	public boolean is(Conexao.State... states);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="State" x="448" y="14">		<text>public enum State{
	UNSELECTED,
	TO_BE_CREATOR;
	public boolean is(Segmento.State... states);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="State" x="438" y="6">		<text>public enum State{
	UNSELECTED,
	SELECTED,
	HIGHLIGHTED,
	TO_BE_CREATOR,
	TO_BE_DELETED;
	public boolean is(Nodulo.State... states);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Tipo" x="483" y="-2">		<text>public enum Tipo{
	TREE,
	MODULO,
	CONEXAO,
	NODULO;
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Cores" x="403" y="0">		<text>public static class Cores{
	public static Cor FUNDO;
	public static Cor SELECT;
	public static Cor CREATE;
	public static Cor PAI;
	public static Cor SON;
	public static Cor DELETE;
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="State" x="403" y="-3">		<text>public enum State{
	UNSELECTED,
	SELECTED,
	HIGHLIGHTED,
	TO_BE_CREATOR,
	TO_BE_SON,
	TO_BE_PAI,
	TO_BE_DELETED;
	public boolean is(Modulo.State... states);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Menu" x="392" y="-33">		<text>public static class Menu{
	public static Cor FUNDO;
	public static Cor SELECT;
	public static Cor SELECT_DISABLED;
	public static Cor FONTE;
	public static Cor FONTE_DISABLED;
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="State" x="440" y="-50">		<text>public enum State{
	TO_UNSELECT,		//Usado apenas em seleções
	TO_SELECT,			//Área branca
	TO_CREATE,			//Área verde
	TO_CREATE_SON,	//Área amarela
	TO_CREATE_PAI,	//Área azul
	TO_DELETE;			//Área vermelha
	public boolean is(Selecao.State... states);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="AbstractAction" x="355" y="-91">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="DialogOKAction" x="305" y="-29">		<text>protected class DialogOKAction extends AbstractAction{	//Ação do botão de OK
//VAR GLOBAIS
	protected static final String ACTION_NAME;
	private JDialog dialog;
//MAIN
	protected DialogOKAction(JDialog dialog);
//FUNCS
	public void actionPerformed(ActionEvent a);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="DialogCancelAction" x="300" y="-26">		<text>protected class DialogCancelAction extends AbstractAction{	//Ação do botão de Cancelar
//VAR GLOBAIS
	protected static final String ACTION_NAME;
	private JDialog dialog;
//MAIN
	protected DialogCancelAction(JDialog dialog);
//FUNCS
	public void actionPerformed(ActionEvent a);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Option" x="309" y="-33">		<text>public enum Option{
	APPROVE_OPTION,
	CANCEL_OPTION,
	ERROR_OPTION;
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="ListSelectionAction" x="284" y="-31">		<text>protected class ListSelectionAction implements ListSelectionListener{
//TEXTO
	private JTextComponent texto;
//MAIN
	public ListSelectionAction(JTextComponent texto);
//FUNCS
	public void valueChanged(ListSelectionEvent l);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="ListSelectionListener" x="339" y="-96">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="TextoFocusAction" x="286" y="-29">		<text>protected class TextoFocusAction extends FocusAdapter{
//TEXTO
	private JTextComponent texto;
//MAIN
	public TextoFocusAction(JTextComponent texto);
//FUNCS
	public void focusGained(FocusEvent f);
	public void focusLost(FocusEvent f);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="TextoKeyAction" x="287" y="-27">		<text>protected class TextoKeyAction extends KeyAdapter{
//LISTA
	private JList lista;
//MAIN
	public TextoKeyAction(JList lista);
//FUNCS
	public void keyPressed(KeyEvent k);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="ListDocumentAction" x="284" y="-25">		<text>protected class ListDocumentAction implements DocumentListener{
//LISTA
	private JList lista;
//MAIN
	public ListDocumentAction(JList lista);
//FUNCS
	public void insertUpdate(DocumentEvent d);
	public void removeUpdate(DocumentEvent d);
	public void changedUpdate(DocumentEvent d);
	private void update(DocumentEvent d);
	public class ListSelector implements Runnable{
	//INDEX
		private int index;
	//MAIN
		public ListSelector(int index);
	//FUNCS
		public void run();
	}
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="FocusAdapter" x="341" y="-99">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="KeyAdapter" x="341" y="-102">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="DocumentListener" x="339" y="-105">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Tipo" x="361" y="-7">		<text>public enum Tipo{
	LOCAL,
	TITULO,
	TEXTO,
	COR,
	BORDA,
	GROSSURA,
	ICONE,
	OBJETO;
	public boolean is(UndoRedoNodo.Tipo... tipos);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Modo" x="400" y="16">		<text>public enum Modo{
	ADD,
	DEL;
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Modo" x="402" y="-9">		<text>public enum Modo{
	ADD,
	DEL;
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="State" x="412" y="-36">		<text>private class State{
	private Action mousePressed;
		public Action getMousePressedAction();
		public void setMousePressedAction(Action action);
	private Action mouseReleased;
		public Action getMouseReleasedAction();
		public void setMouseReleasedAction(Action action);
	private Action mouseCliqued;
		public Action getMouseCliquedAction();
		public void setMouseCliquedAction(Action action);
	private Action mouseDragged;
		public Action getMouseDraggedAction();
		public void setMouseDraggedAction(Action action);
	private Action mouseMoved;
		public Action getMouseMovedAction();
		public void setMouseMovedAction(Action action);
	private Action keyPressed;
		public Action getKeyPressedAction();
		public void setKeyPressedAction(Action action);
	private Action keyReleased;
		public Action getKeyReleasedAction();
		public void setKeyReleasedAction(Action action):
	private Action created;
		public Action getCreateAction();
		public void setCreateAction(Action action):
	private Action connected;
		public Action getConnectAction();
		public void setConnectAction(Action action);
	private Action deleted;
		public Action getDeleteAction();
		public void setDeleteAction(Action action);
	private Modulo mod;
		public void setModulo(Modulo mod);
		public Modulo getModulo();
	private Conexao cox;
		public void setConexao(Conexao cox);
		public Conexao getConexao();
	private Nodulo nod;
		public void setNodulo(Nodulo nod);
		public Nodulo getNodulo();
	private Segmento seg;
		public void setSegmento(Segmento seg);
		public Segmento getSegmento();
	private Action action;
		public void setAction(Action action);
		public Action getAction();
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Action" x="412" y="-33">		<text>private abstract class Action{
	public void run();
	public void run(MouseEvent m);
	public void run(KeyEvent k);
}</text>	</mod>	<mod border="0" color="009900" icons="" title="Menu" x="235" y="-47">		<text>+ Menu:

</text>	</mod>	<mod border="0" color="00C817" icons="" title="Arquivo" x="147" y="-45">		<text>+ Arquivo:
- Menu do arquivo .mind sendo editado.
</text>	</mod>	<mod border="0" color="00C817" icons="" title="Editar" x="161" y="-45">		<text>+ Editar:
- Menu das ações.
</text>	</mod>	<mod border="0" color="00C817" icons="" title="Módulo" x="164" y="-36">		<text>+ Módulo:
- Menu das ações nos Módulos.
</text>	</mod>	<mod border="0" color="00C817" icons="" title="Exibir" x="190" y="-45">		<text>+ Exibir:
- Menu da interface.
</text>	</mod>	<mod border="0" color="00C817" icons="" title="Configurar" x="209" y="-45">		<text>+ Configurar:
- Menu das configurações do programa.
</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Novo" x="151" y="-42">		<text>+ Novo:
- Cria um novo arquivo .mind.
- Ctrl-N
	if(salvarAntes()){
		novo(choose("Novo"));
		abrir(link);
	}
</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Abrir..." x="151" y="-40">		<text>+ Abrir...:
- Abre um arquivo .mind.
- Ctrl-A
	if(salvarAntes()){
		abrir(choose("Abrir"));
	}</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Salvar" x="151" y="-36">		<text>+ Salvar:
- Salva um arquivo .mind.
- Ctrl-S
	tree.getTexto().setEnabled(false);
	if(link==null)novo(choose("Salvar"));
	salvar(link);
	tree.getTexto().setEnabled(true);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Salvar Como..." x="151" y="-34">		<text>+ Salvar Como...:
- Salva um novo arquivo .mind.
- Ctrl+Shift-S
	novo(choose("Salvar Como"));</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Sair" x="151" y="-30">		<text>+ Sair:
- Fecha o programa.
- Ctrl-W
	if(salvarAntes())fechar();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Pesquisar" x="218" y="-45">		<text>+ Pesquisar:
- Abre o pesquisador de texto.
- Ctrl-F</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Desfazer" x="164" y="-42">		<text>+ Desfazer:
- Desfaz uma ação.
- Ctrl-Z
	undo();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Refazer" x="164" y="-40">		<text>+ Refazer:
- Refaz uma ação.
- Ctrl-Y
	redo();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Editar Título" x="167" y="-33">		<text>+ Editar Título:
- Abre o editor de título do Módulo.
- F2
	editTitulo();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Relacionar" x="167" y="-31">		<text>+ Relacionar:
- Inicia o modo de relacionar Módulos.
- Ctrl-R
	setModo(TO_CONNECT);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Criar Relacionados aos Selecionados" x="167" y="-27">		<text>+ Criar Relacionados aos Selecionados:
- Cria um Módulo, descendente dos selecionados.
- Ctrl+Alt-G
	createModRelacionado();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Relacionar Selecionados" x="167" y="-25">		<text>+ Relacionar Selecionados:
- Inicia uma relação, relacionando os selecionados.
- Ctrl+Alt-R
	startRelation();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Excluir Selecionados" x="167" y="-23">		<text>+ Excluir Selecionados:
- Exclui os Módulos selecionados.
- Ctrl+Alt-D
	deleteMods();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Selecionar Sem Antecedentes" x="167" y="-19">		<text>+ Selecionar Sem Antecedentes:
- Seleciona todos os Módulos sem pais.
- Ctrl-P
	selectModSemPai();</text>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="151" y="-38">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="151" y="-32">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="164" y="-38">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="167" y="-29">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="167" y="-21">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="164" y="-8">		<text/>	</mod>	<mod border="0" color="00FF00" icons="" title="Criar" x="164" y="-12">		<text>+ Criar:
- Inicia o modo de criar Objetos.
- Ctrl-G
	setModo(TO_CREATE);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Deletar" x="164" y="-10">		<text>+ Deletar:
- Inicia o modo de deletar Objetos.
- Ctrl-D
	setModo(TO_DELETE);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Recortar" x="164" y="-6">		<text>+ Recortar:
- Recorta Objetos selecionados.
- Ctrl-X
	cut();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Copiar" x="164" y="-4">		<text>+ Copiar:
- Copia Objetos selecionados.
- Ctrl-C
	copy();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Colar" x="164" y="-2">		<text>+ Colar:
- Cola Objetos da área de transferência.
- Ctrl-V
	paste();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Excluir" x="164" y="0">		<text>+ Excluir:
- Deleta Objetos selecionados.
- Excluir
	delete();</text>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="164" y="2">		<text/>	</mod>	<mod border="0" color="00FF00" icons="" title="Selecionar Tudo" x="164" y="4">		<text>+ Selecionar Tudo:
- Seleciona todos os Objetos.
- Ctrl-A
	selectAll();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Deselecionar Tudo" x="164" y="6">		<text>+ Deselecionar Tudo:
- Deseleciona todos os Objetos.
- Escape
	unSelectAll();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Selecionar Descendentes" x="164" y="8">		<text>+ Selecionar Descendentes:
- Seleciona os descendentes imediatos dos objetos.
- Shift
	selectSons();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Inverter Seleção" x="164" y="10">		<text>+ Inverter Seleção:
- Deseleciona os selecionados e seleciona todos os outros.
- Ctrl-I
	invertSelection();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Tela Cheia" x="193" y="-42">		<text>+ Tela Cheia:
- Muda o modo fullscreen.
- F11
	fullscreen(fullscreen.isPressed());
	if(fullscreen.isPressed()){
		isToSeparateText=separateText.isPressed();
		separateText.setToggle(true);
	}else{
		separateText.setToggle(isToSeparateText);
	}
	separateText.setEnabled(!fullscreen.isPressed());</text>	</mod>	<mod border="0" color="00C817" icons="" title="Zoom" x="193" y="-40">		<text>+ Zoom:
- Menu do zoom.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Aumentar" x="196" y="-37">		<text>+ Aumentar:
- Aumenta o zoom com foco no centro.
- Ctrl-Igual
	zoom(1);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Diminuir" x="196" y="-35">		<text>+ Diminuir:
- Diminúi o zoom com desfoco no centro.
- Ctrl-Menos
	zoom(-1);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Restaurar Para Padrão" x="196" y="-24">		<text>+ Restaurar Para Padrão:
- Restaura o zoom para o valor inicial padrão.
- Ctrl-0
	zoom(8-UNIT);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Centralizar Câmera" x="193" y="-20">		<text>+ Centralizar Câmera:
- Centraliza a tela nos Objetos selecionados ou no Mestre.
- Ctrl-E
	centralizar();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Quebra Automática de Linha" x="193" y="-16">		<text>+ Quebra Automática de Linha:
- Quebra a linha no editor de texto.
- Ctrl-Q</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Mostrar Caracteres Escondidos" x="193" y="-14">		<text>+ Mostrar Caracteres Escondidos:
- Mostra caractéres invisíveis no editor de texto.
- Ctrl-M</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Separar Janela de Texto" x="193" y="-12">		<text>+ Separar Janela de Texto:
- Separa a janela do editor de texto em uma independente.
- Ctrl-L</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Auto-Focar Janela de Texto" x="193" y="-10">		<text>+ Auto-Focar Janela de Texto:
- Auto-Foca na janela que estiver abaixo do cursor.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Mostrar Grade" x="193" y="-6">		<text>+ Mostrar Grade:
- Mostra a grade onde os Módulos e Nódulos são fixos.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Fonte" x="214" y="-42">		<text>+ Fonte:
- Abre um selecionador de fontes.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Limite de Objetos..." x="214" y="-34">		<text>+ Limite de Objetos...:
- Abre um selecionador de números de objetos.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Limite de Desfazer/Refazer..." x="214" y="-32">		<text>+ Limite de Desfazer/Refazer...:
- Abre um selecionador de números de undo/redo.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Salvar Configurações" x="214" y="-28">		<text>+ Salvar Configurações:
- Salva as configurações em um arquivo .ini.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Restaurar Para Padrão" x="214" y="-26">		<text>+ Restaurar Para Padrão:
- Deleta o arquivo .ini.</text>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="193" y="-8">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="193" y="-18">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="193" y="-22">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="214" y="-30">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="214" y="-40">		<text/>	</mod>	<mod border="0" color="009900" icons="" title="Toolbox" x="341" y="20">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="Tree" x="333" y="6">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="Modulo" x="333" y="12">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="Conexao" x="332" y="30">		<text/>	</mod>	<mod border="0" color="00C817" icons="" title="Nodulo" x="333" y="42">		<text/>	</mod>	<mod border="0" color="00FF00" icons="" title="Novo Módulo" x="326" y="9">		<text>+ Novo Módulo:
- Cria novo mod no local.
	newMod=createMod(mouse);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Icones" x="329" y="15">		<text>+ Icones:
- Adiciona/Deleta icones dos mods.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Cores" x="329" y="17">		<text>+ Cores:
- Muda a cor dos mods.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Bordas" x="329" y="19">		<text>+ Bordas:
- Muda a borda dos mods.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Editar Título" x="324" y="21">		<text>+ Editar Título:
- Muda o título do mod.
	editTitulo();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Novo Relacionado" x="323" y="23">		<text>+ Novo Relacionado:
- Cria novo mod, ligado ao mod atual.
	newMod=createModRelacionado(mouse,modsSelec);
	setState(MOVE+TO_CREATE,newMod);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Nova Relação" x="325" y="25">		<text>+ Nova Relação:
- Começa novo cox, ligado no mod.
	Ghost.setLocal(mouse);
	relateToGhost(modsSelec);
	setState(MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Deletar" x="328" y="27">		<text>+ Deletar:
- Deleta mod.
	delete();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Bordas" x="329" y="33">		<text>+ Bordas:
- Muda a borda dos coxs.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Novo Nodo" x="327" y="37">		<text>+ Novo Nodo:
- Cria novo nodo no meio do Cox.
	if(obj!=SEGMENTO)return;
	createNod((Segmento)obj,local,true);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Deletar" x="328" y="39">		<text>+ Deletar:
- Deleta cox.
	delete();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Deletar" x="328" y="45">		<text>+ Deletar:
- Deleta nod.
	delete();</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Modulo&#10;States" x="440" y="45">		<text>+ Modulo States:
- UNSELECTED		Cor normal.
- SELECTED			Cor invertida. Borda branca.
- HIGHLIGHTED		Cor mais brilhante/escura.
- TO_BE_CREATOR	Cor verde. Borda verde.
- TO_BE_SON		Cor amarela. Borda amarela.
- TO_BE_PAI		Cor azul. Borda azul.
- TO_BE_DELETED	Cor vermelha. Borda vermelha.</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Segmento&#10;States" x="613" y="47">		<text>+ Segmento States:
- UNSELECTED		Vazio.
- TO_BE_CREATOR	Borda verde.</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Nodulo&#10;States" x="572" y="47">		<text>+ Nodulo States:
- UNSELECTED		Cor normal.
- SELECTED			Cor invertida. Borda branca.
- HIGHLIGHTED		Cor mais brilhante/escura ou invertida.
- TO_BE_CREATOR	Cor verde. Borda verde.
- TO_BE_DELETED	Cor vermelha. Borda vermelha.</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Conexao&#10;States" x="507" y="47">		<text>+ Conexao States:
- UNSELECTED		Cor normal.
- SELECTED			Cor invertida. Borda branca.
- HIGHLIGHTED		Cor mais brilhante/escura ou invertida.
- TO_BE_CREATOR	Cor verde. Borda verde.
- TO_BE_DELETED	Cor vermelha. Borda vermelha.</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="UNSELECTED" x="438" y="54">		<text/>	</mod>	<mod border="0" color="00C81B" icons="" title="TO_BE_CREATOR" x="410" y="100">		<text/>	</mod>	<mod border="0" color="FFFF00" icons="" title="TO_BE_SON" x="410" y="107">		<text/>	</mod>	<mod border="0" color="0099CC" icons="" title="TO_BE_PAI" x="410" y="114">		<text/>	</mod>	<mod border="0" color="29CCFF" icons="" title="set(TO_BE_CREATOR)" x="436" y="63">		<text>+ set(TO_BE_CREATOR):
- Ativado por input.
	state=TO_BE_CREATOR;</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="set(UNSELECTED)" x="410" y="103">		<text>+ set(UNSELECTED):
- Ativado por input.
	state=UNSELECTED;</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="set(TO_BE_SON)" x="437" y="66">		<text>+ set(TO_BE_SON):
- Ativado por input.
	state=TO_BE_SON;</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="set(UNSELECTED)" x="408" y="110">		<text>+ set(UNSELECTED):
- Ativado por input.
	state=UNSELECTED;</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="set(TO_BE_PAI)" x="437" y="69">		<text>+ set(TO_BE_PAI):
- Ativado por input.
	state=TO_BE_PAI;</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="set(UNSELECTED)" x="408" y="117">		<text>+ set(UNSELECTED):
- Ativado por input.
	state=UNSELECTED;</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(SELECTED)" x="437" y="57">		<text>+ set(SELECTED):
- Ativado por input
	state=SELECTED;
	for(cox:coxs)cox.setState(HIGHLIGHTED);</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="SELECTED" x="447" y="81">		<text/>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(UNSELECTED)" x="445" y="84">		<text>+ set(UNSELECTED):
- Ativado por input.
		//Se há algum cox SELECTED, o mod deve ser HIGHLIGHTED.
	for(cox:coxs)if(cox==SELECTED){
		state=HIGHLIGHTED;
		break;
	}
	if(SELECTED)state=UNSELECTED;	//Deseleciona
		//Apenas se o cox for HIGHLIGHTED, ele é UNSELECTED.
	for(cox:coxs)if(cox==HIGHLIGHTED)cox.setState(UNSELECTED);
		//Se ainda há algum cox HIGHLIGHTED, o mod deve ser HIGHLIGHTED.
	if(!UNSELECTED)for(cox:coxs)if(cox==HIGHLIGHTED){
		state=HIGHLIGHTED;
		break;
	}</text>	</mod>	<mod border="0" color="F2F2F2" icons="" title="HIGHLIGHTED" x="446" y="92">		<text/>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(SELECTED)" x="505" y="58">		<text>+ set(SELECTED):
- Ativado por input.
- case(UNSELECTED|HIGHLIGHTED):
	state=SELECTED;
	for(nod:nods)nod.setState(HIGHLIGHTED);
	pai.setState(HIGHLIGHTED);
	son.setState(HIGHLIGHTED);</text>	</mod>	<mod border="1" color="29CCFF" icons="" title="set(HIGHLIGHTED)" x="437" y="60">		<text>+ set(HIGHLIGHTED):
	state=HIGHLIGHTED;</text>	</mod>	<mod border="1" color="29CCFF" icons="" title="set(HIGHLIGHTED)" x="505" y="61">		<text>+ set(HIGHLIGHTED):
	state=HIGHLIGHTED;
	for(nod:nods)nod.setState(HIGHLIGHTED);
	pai.setState(HIGHLIGHTED);
	son.setState(HIGHLIGHTED);</text>	</mod>	<mod border="1" color="29CCFF" icons="" title="set(HIGHLIGHTED)" x="445" y="98">		<text>+ set(HIGHLIGHTED):
	state=UNSELECTED;
		//Se há algum cox SELECTED ou HIGHLIGHTED, o mod deve ser HIGHLIGHTED.
	for(cox:coxs)if(cox==(SELECTED|HIGHLIGHTED)){
		state=HIGHLIGHTED;
		break;
	}</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="SELECTED" x="512" y="74">		<text/>	</mod>	<mod border="0" color="F2F2F2" icons="" title="HIGHLIGHTED" x="511" y="83">		<text/>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(UNSELECTED)" x="510" y="77">		<text>+ set(UNSELECTED):
- Ativado por input.
		//Se um dos mods estiver SELECTED, o cox é HIGHLIGHTED.
	if(son==SELECTED|pai==SELECTED){
		state=HIGHLIGHTED;
		for(nod:nods)nod.setState(HIGHLIGHTED);
		pai.setState(HIGHLIGHTED);
		son.setState(HIGHLIGHTED);
	}else{
		state=UNSELECTED;
			//Apenas se forem HIGHLIGHTED, eles são UNSELECTED.
		for(nod:nods)if(nod==HIGHLIGHTED)nod.setState(UNSELECTED);
		if(pai==HIGHLIGHTED)pai.setState(UNSELECTED);
		if(son==HIGHLIGHTED)son.setState(UNSELECTED);
	}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="UNSELECTED" x="506" y="55">		<text/>	</mod>	<mod border="1" color="29CCFF" icons="" title="set(UNSELECTED)" x="510" y="86">		<text>+ set(UNSELECTED):
	state=UNSELECTED;
		//Se um dos mods estiver SELECTED, o cox é HIGHLIGHTED.
	if(pai==SELECTED|son==SELECTED)state=HIGHLIGHTED;
		//Se um dos nods estiver SELECTED, o cox é HIGHLIGHTED.
	if(UNSELECTED)for(nod:nods)if(NOD==SELECTED){
		state=HIGHLIGHTED;
		break;
	}
	if(UNSELECTED){	//Nenhum dos mods e nods está SELECTED
		for(nod:nods)nod.setState(UNSELECTED);
		pai.set(UNSELECTED);
		son.set(UNSELECTED);
	}else{				//Algum dos mods e nods está SELECTED
		for(nod:nods)nod.setState(HIGHLIGHTED);
		pai.set(HIGHLIGHTED);
		son.set(HIGHLIGHTED);
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(SELECTED)" x="578" y="91">		<text>+ set(SELECTED):
- Ativado por input.
	state=SELECTED;
	cox.setState(HIGHLIGHTED);</text>	</mod>	<mod border="1" color="29CCFF" icons="" title="set(HIGHLIGHTED)" x="569" y="61">		<text>+ set(HIGHLIGHTED):
	state=HIGHLIGHTED;</text>	</mod>	<mod border="0" color="FFFFFF" icons="" title="SELECTED" x="580" y="75">		<text/>	</mod>	<mod border="0" color="F2F2F2" icons="" title="HIGHLIGHTED" x="579" y="85">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="UNSELECTED" x="570" y="55">		<text/>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(TO_BE_DELETED)" x="409" y="124">		<text>+ set(TO_BE_DELETED):
- Ativado por input.
	state=UNSELECTED;
	for(cox:coxs)cox.setState(UNSELECTED);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(UNSELECTED)" x="476" y="106">		<text>+ set(UNSELECTED):
- Ativado por input.
	if(pai==TO_BE_DELETED|son==TO_BE_DELETED)return;
	state=UNSELECTED;
	for(nod:nods)nod.setState(UNSELECTED);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(UNSELECTED)" x="578" y="78">		<text>+ set(UNSELECTED):
- Ativado por input.
	if(cox==SELECTED){
		state=HIGHLIGHTED;
	}else{
		state=UNSELECTED;
			//Apenas se o cox for HIGHLIGHTED, ele é UNSELECTED.
		if(cox==HIGHLIGHTED)cox.setState(UNSELECTED);
			//Se cox continua HIGHLIGHTED, ele é HIGHLIGHTED junto.
		if(cox==HIGHLIGHTED)state=HIGHLIGHTED;
	}</text>	</mod>	<mod border="1" color="29CCFF" icons="" title="set(UNSELECTED)" x="578" y="88">		<text>+ set(UNSELECTED):
	if(cox!=(SELECTED|HIGHLIGHTED)){
		state=UNSELECTED;
	}</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(TO_BE_DELETED)" x="436" y="72">		<text>+ set(TO_BE_DELETED):
- Ativado por input.
	if(this==MESTRE)return;	//Mestre não pode ser TO_BE_DELETED
	state=TO_BE_DELETED;
	for(cox:coxs)cox.setState(TO_BE_DELETED);</text>	</mod>	<mod border="0" color="FF0000" icons="" title="TO_BE_DELETED" x="410" y="121">		<text/>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(TO_BE_DELETED)" x="504" y="67">		<text>+ set(TO_BE_DELETED):
- Ativado por input.
	state=TO_BE_DELETED;
	for(nod:nods)nod.setState(TO_BE_DELETED);</text>	</mod>	<mod border="0" color="FF0000" icons="" title="TO_BE_DELETED" x="476" y="103">		<text/>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(TO_BE_DELETED)" x="568" y="67">		<text>+ set(TO_BE_DELETED):
- Ativado por input.
	state=TO_BE_DELETED;</text>	</mod>	<mod border="0" color="FF0000" icons="" title="TO_BE_DELETED" x="543" y="104">		<text/>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(UNSELECTED)" x="543" y="107">		<text>+ set(UNSELECTED):
- Ativado por input.
	if(cox==TO_BE_DELETED)return;
	state=UNSELECTED;</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(UNSELECTED)" x="476" y="96">		<text>+ set(UNSELECTED):
- Ativado por input.
	state=UNSELECTED;
	for(nod:nods)nod.setState(UNSELECTED);
	for(seg:segs)nod.setState(UNSELECTED);</text>	</mod>	<mod border="1" color="0099CC" icons="" title="set(UNSELECTED)" x="543" y="97">		<text>+ set(UNSELECTED):
	state=UNSELECTED;</text>	</mod>	<mod border="1" color="29CCFF" icons="" title="set(UNSELECTED)" x="596" y="74">		<text>+ set(UNSELECTED):
	state=UNSELECTED;</text>	</mod>	<mod border="1" color="29CCFF" icons="" title="set(TO_BE_CREATOR)" x="504" y="64">		<text>+ set(TO_BE_CREATOR):
	state=TO_BE_CREATOR;
	for(nod:nods)nod.setState(TO_BE_CREATOR);</text>	</mod>	<mod border="1" color="29CCFF" icons="" title="set(TO_BE_CREATOR)" x="568" y="64">		<text>+ set(TO_BE_CREATOR):
	state=TO_BE_CREATOR;</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="UNSELECTED" x="612" y="55">		<text/>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(TO_BE_CREATOR)" x="610" y="58">		<text>+ set(TO_BE_CREATOR):
- Ativado por input.
	state=TO_BE_CREATOR;
	cox=TO_BE_CREATOR;</text>	</mod>	<mod border="0" color="00C81B" icons="" title="TO_BE_CREATOR" x="476" y="93">		<text/>	</mod>	<mod border="0" color="00C81B" icons="" title="TO_BE_CREATOR" x="543" y="94">		<text/>	</mod>	<mod border="0" color="00C81B" icons="" title="TO_BE_CREATOR" x="596" y="71">		<text/>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(SELECTED)" x="445" y="95">		<text>+ set(SELECTED):
- Ativado por input
	state=SELECTED;
	for(cox:coxs)cox.setState(HIGHLIGHTED);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(SELECTED)" x="510" y="89">		<text>+ set(SELECTED):
- Ativado por input.
	state=SELECTED;
	for(nod:nods)nod.setState(HIGHLIGHTED);
	pai.setState(HIGHLIGHTED);
	son.setState(HIGHLIGHTED);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="set(SELECTED)" x="569" y="58">		<text>+ set(SELECTED):
- Ativado por input.
	state=SELECTED;
	cox.setState(HIGHLIGHTED);</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Cursor States" x="424" y="-58">		<text>+ Cursor States:
- NORMAL				Seta.
- SELECT				Seta branca.
- AUTODRAG			Setas grandes juntas em um +

- MOVE				Setas abaixo.
- CREATE				+ verde abaixo.
- DELETE				X vermelho abaixo.
- SON					Uma conexão com um dos mods amarelo abaixo.
- PAI					Uma conexão com um dos mods azul abaixo.
- EDIT_TITLE		Um T abaixo.

- AREA_SELECT		Uma área branca abaixo.
- AREA_CREATE		Uma área verde abaixo.
- AREA_DELETE		Uma área vermelha abaixo.
- AREA_SON			Uma área amarela abaixo.
- AREA_PAI			Uma área azul abaixo.

- DRAG				Setas no lado.
</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Selecao States" x="440" y="-47">		<text>+ Selecao States:
- TO_SELECT		Cor branca. Borda branca.
- TO_CREATE		Cor verde. Borda verde.
- TO_CREATE_SON	Cor amarela. Borda amarela.
- TO_CREATE_PAI	Cor azul. Borda azul.
- TO_DELETE		Cor vermelha. Borda vermelha.</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Actions&#10;States" x="304" y="58">		<text/>	</mod>	<mod border="0" color="646464" icons="" title="Ordem" x="311" y="58">		<text>+ Ordem:
- NORMAL
. MIDDLE+DRAG_ALL
	-LEFT+WAITING1+NORMAL
	. DRAG_ALL+LEFT+WAITING1+NORMAL
		- SELECT_AREA
		. DRAG_ALL+SELECT_AREA
	- LEFT+WAITING2+NORMAL
	. DRAG_ALL+LEFT+WAITING2+NORMAL
		- DRAG
		. DRAG_ALL+DRAG
	- EDIT_TITLE
	. DRAG_ALL+EDIT_TITLE
	- RIGHT+WAITING1+NORMAL
	. RIGHT+DRAG_ALL
- TO_CREATE
. DRAG_ALL+TO_CREATE
	- WAITING1+TO_CREATE
	. DRAG_ALL+WAITING1+TO_CREATE
		- SELECT_AREA+TO_CREATE
		. DRAG_ALL+SELECT_AREA+TO_CREATE
	- WAITING2+TO_CREATE
	. DRAG_ALL+WAITING2+TO_CREATE
		- DRAG+TO_CREATE
		. DRAG_ALL+DRAG+TO_CREATE
	- MOVE+TO_CREATE
	. DRAG_ALL+MOVE+TO_CREATE
		- SELECT_AREA+MOVE+TO_CREATE
		. DRAG_ALL+SELECT_AREA+MOVE+TO_CREATE
- TO_CONNECT_SON
. DRAG_ALL+TO_CONNECT_SON
	- WAITING1+TO_CONNECT_SON
	. DRAG_ALL+WAITING1+TO_CONNECT_SON
		- SELECT_AREA+TO_CONNECT_SON
		. DRAG_ALL+SELECT_AREA+TO_CONNECT_SON
	- WAITING2+TO_CONNECT_SON
	. DRAG_ALL+WAITING2+TO_CONNECT_SON
- MOVE+TO_CONNECT_PAI
. DRAG_ALL+MOVE+TO_CONNECT_PAI
	- WAITING1+TO_CONNECT_PAI
		- SELECT_AREA+TO_CONNECT_PAI
		. DRAG_ALL+SELECT_AREA+TO_CONNECT_PAI
		- DRAG+TO_CONNECT_PAI
		. DRAG_ALL+DRAG+TO_CONNECT_PAI
- TO_DELETE
. DRAG_ALL+TO_DELETE
	- WAITING1+TO_DELETE
	. DRAG_ALL+WAITING1+TO_DELETE
		- SELECT_AREA+TO_DELETE
		. DRAG_ALL+SELECT_AREA+TO_DELETE
</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="[0-9]" x="314" y="69">		<text>+ [0-9]:
- NORMAL
- TO_CREATE
- TO_CONNECT
- TO_DELETE
- EDIT_TITLE</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="[0-9]0" x="314" y="67">		<text>+ [0-9]0:
- DRAG
- MOVE
- SELECT_AREA</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="[0-9]00" x="314" y="65">		<text>+ [0-9]00:
- WAITING1
- WAITING2
- WAITING3</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="[0-9]000" x="314" y="63">		<text>+ [0-9]000:
- LEFT
- MIDDLE
- RIGHT</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="[0-9]0000" x="314" y="61">		<text>+ [0-9]0000:
- DRAG_ALL
- AUTO_DRAG_ALL</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Funções" x="246" y="5">		<text>* Funções:

+ getObj(mouse):
	objHover=null;
	if(objHover==null)for(mod:modsVisi){
		if(mod.contains(mouse)&amp;&amp;mod!=Ghost)objHover=mod;
	}
	if(objHover==null)for(nod:nodsVisi){
		if(nod.contains(mouse))objHover=nod;
	}
	if(objHover==null)for(cox:coxsVisi){
		if(cox.contains(mouse))objHover=cox;
	}
	return objHover;

+ getMod(mouse,...modsToIgnore):
	modHover=null;
	for(mod:modsVisi){
		toIgnore=false;
		if(modsToIgnore&gt;0)for(modToIgnore:modsToIgnore){
			if(mod==modToIgnore){
				toIgnore=true;
				break;
			}
		}
		if(toIgnore||mod==Ghost)continue;
		if(mod.contains(mouse))modHover=mod;
	}
	return modHover;

+ getCox(mouse):
	coxHover=null;
	for(cox:coxsVisi){
		if(cox.contains(mouse))coxHover=cox;
	}
	return coxHover;

+ getNod(mouse):
	nodHover=null;
	for(nod:nodsVisi){
		if(nod.contains(mouse))nodHover=nod;
	}
	return nodHover;
</text>	</mod>	<mod border="0" color="0099CC" icons="" title="zoom(zoom)" x="222" y="10">		<text>+ zoom(zoom):
- Muda o zoom com foco no centro.
</text>	</mod>	<mod border="0" color="0099CC" icons="" title="setModo(modo)" x="254" y="15">		<text>+ setModo(modo):
- Muda o modo em que os objs são tratados.
	if(titulo.isVisible())return;
	switch(modo){
		case TO_CREATE:
			if(getCreateAction()!=null)getCreateAction().run();
		break;
		case TO_CONNECT:
			if(getConnectAction()!=null)getConnectAction().run();
		break;
		case TO_DELETE:
			if(getDeleteAction()!=null)getDeleteAction().run();
		break;
	}</text>	</mod>	<mod border="0" color="0099CC" icons="" title="createModRelacionado()" x="225" y="31">		<text>+ createModRelacionado():
- Cria um Módulo, descendente dos selecionados.
	if(titulo.isVisible())return;
	deleteGhostCoxs();
	selecao.setEmpty();
	</text>	</mod>	<mod border="0" color="0099CC" icons="" title="startRelation()" x="229" y="36">		<text>+ startRelation():
- Inicia uma relação, relacionando os selecionados.
	if(titulo.isVisible())return;
	deleteGhostCoxs();
	selecao.setEmpty();
	Ghost.setLocal(mouse);			//Muda o X e Y do Ghost de acordo com o mouse
	relateToGhost(modsSelec);
	unSelectAll();
	draw();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="deleteMods()" x="231" y="39">		<text>+ deleteMods():
- Exclui os Módulos selecionados.
	if(titulo.isVisible())return;
	deleteGhostCoxs();
	selecao.setEmpty();
	unSelect(Mestre);
	if(modsSelec==0)return;
	selectedMods=new List&lt;Objeto&gt;(modsSelec);
	unSelectAll();
	for(mod:selectedMods){
		select(mod);
		for(cox:mod.coxs){
			select(cox);
		}
	}
	delete();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="editTitulo()" x="231" y="28">		<text>+ editTitulo():
- Abre o editor de título do Módulo.
- Muda o State de NORMAL para EDIT_TITLE.
	if(!NORMAL)return;
	if(modsSelec!=1)return;
	setTitulo(modsSelec(0));
	setState(EDIT_TITLE);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="unSelectAll()" x="200" y="32">		<text>+ unSelectAll():
- Deseleciona todos os Objetos.
	if(titulo.isVisible()){
		setTitulo(null);
	}
	unSelectAll();
	resetState();</text>	</mod>	<mod border="8" color="0099CC" icons="" title="delete()" x="204" y="21">		<text>+ delete():
- Deleta Objetos selecionados.
	if(titulo.isVisible())return;
	unSelect(Mestre);
	if(objsSelec==0)return;
	for(cox:coxsSelec){
		for(nod:cox.nods){
			select(nod);
		}
	}
	for(mod:modsSelec){
		for(cox:mod.coxs){
			select(cox);
		}
	}
	oldObjs=new List&lt;Objeto&gt;(objsSelec);
	while(objsSelec&gt;0)del(objsSelec(0));
	addUndo(oldObjs,ADD);
	resetState();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="selectSons()" x="201" y="34">		<text>+ selectSons():
- Seleciona os descendentes imediatos dos objetos.
	if(titulo.isVisible())return;
	List&lt;Objeto&gt;objs=new List&lt;&gt;();
	objs.addAll(modsSelec);
	objs.addAll(coxsSelec);
	for(obj:objs)selectTree(obj);
	resetState();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="resetState()" x="255" y="19">		<text>+ resetState():
	deleteGhostCoxs();
	selecao.setEmpty();
	if(stateContains(TO_CREATE)){
		if([mod]){
			addUndoable([mod],false);
		}else if([nod]){
			addUndoable([nod],false);
		}
	}
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="centralizar()" x="220" y="12">		<text>+ centralizar():
- Centraliza a tela nos Objetos selecionados ou no Mestre.
	if(titulo.isVisible())return;
	oldLocal=tree.getLocal();
	if(objsSelec==0){
		setFocusOn(Mestre);
	}else{
		setFocusOn(objsSelec);
	}
	animate(oldLocal,tree.getLocal())
	resetState();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="selectAll()" x="201" y="30">		<text>+ selectAll():
- Seleciona todos os Objetos.
	if(titulo.isVisible())return;
	selectAll();
	resetState();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="undo()" x="205" y="10">		<text>+ undo():
- Desfaz uma ação.
	if(titulo.isVisible())return;
	unSelectAll();
	undo();
	resetState();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="redo()" x="205" y="12">		<text>+ redo():
- Refaz uma ação.
	if(titulo.isVisible())return;
	unSelectAll();
	redo();
	resetState();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="cut()" x="205" y="15">		<text>+ ctrl_X():
- Recorta Objetos selecionados.
	if(titulo.isVisible())return;
	texto=getXML(objsSelec);
	setClipboard(texto);
	delete();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="copy()" x="205" y="17">		<text>+ copy():
- Copia Objetos selecionados.
	if(titulo.isVisible())return;
	texto=getXML(objsSelec);
	setClipboard(texto);
	resetState();</text>	</mod>	<mod border="8" color="0099CC" icons="" title="paste()" x="204" y="19">		<text>+ paste():
- Cola Objetos da área de transferência.
- Muda o State para MOVE+NORMAL.
	if(titulo.isVisible())return;
	unSelectAll();
	lista=addTree(getClipboard(),false);
	for(obj:lista)select(obj);
	if(objsSelec==0)return;
	newObjs=new List&lt;Objeto&gt;(objsSelec);
	addUndo(newObjs,DEL);
	setFocusOn(newObjs);
	deleteGhostCoxs();
	selecao.setEmpty();
	if(stateContains(TO_CREATE)){
		if([mod]){
			addUndoable([mod],false);
		}else if([nod]){
			addUndoable([nod],false);
		}
	}
	draw();
	setState(MOVE+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="invertSelection()" x="198" y="37">		<text>+ invertSelection():
- Deseleciona os selecionados e seleciona todos os outros.
	if(titulo.isVisible())return;
	List&lt;Objeto&gt;objs=new List&lt;&gt;(objsSelec);
	selectAll();
	for(obj:objs)unSelect(obj);
	resetState();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="selectModSemPai()" x="198" y="40">		<text>+ selectModSemPai():
	if(titulo.isVisible())return;
	List&lt;Objeto&gt;objs=new List&lt;&gt;(objsSelec);
	selectAll();
	for(obj:objs)unSelect(obj);
	resetState();</text>	</mod>	<mod border="0" color="00FFFF" icons="" title="Significados" x="308" y="55">		<text>+ Significados:
- Cores:
. Azul-claro:							State.
. Azul:									Input do usuário.
. Azul-esbotado:						Parte do input.
. Azul-escuro:						Funções.
. Azul-bem-escuro:					Grupo de funções.
- Borda:
. Pontilhado:							É extensão de outro.
. Tracejado:							É chamado por outro.
. Tracejado-longo com 1 ponto:	Executa modificação no arquivo .mind final.</text>	</mod>	<mod border="0" color="646464" icons="" title="Listas de Objetos" x="233" y="8">		<text>+ Listas de Objetos:
- objsAll.
. modsAll.
. coxsAll.
. nodsAll.
- objsSelec.
. modsSelec.
. coxsSelec.
. nodsSelec.
- modsVisi.
- coxsVisi.
- nodsVisi.</text>	</mod>	<mod border="0" color="646464" icons="" title="Actions" x="297" y="58">		<text>+ Actions:
- mousePressed();
- mouseReleased();
- mouseCliqued();
- mouseDragged();
- mouseMoved();
- keyPressed();
- keyReleased();
- ctrl_G();
- ctrl_R();
- ctrl_D();
</text>	</mod>	<mod border="0" color="0099CC" icons="" title="addUndoable(objs,addToTree)" x="271" y="50">		<text>+ addUndoable(objs,addToTree):
	allObjs=toList(objs).getAllOrdened();
	for(obj:allObjs)switch(){
		case MODULO:
			mod=obj;
			for(cox:mod.coxs){
				objs.add(cox);
				for(nod:cox.nods)objs.add(nod);
			}
		break;
		case CONEXAO:
			cox=obj;
			for(nod:cox.nods)objs.add(nod);
		break;
		case NODULO:break;
		case SEGMENTO:break;
		if(addToTree)for(obj:allObjs)add(obj);
		reverse(allObjs);
		addUndoObjeto(allObjs,DEL);
	}</text>	</mod>	<mod border="0" color="0099CC" icons="" title="delUndoable(objs)" x="271" y="53">		<text>+ delUndoable(objs):
	lista=toList(objs);
	for(cox:lista.coxs){
		for(nod:cox.nods)lista.add(nod);
	}
	for(mod:lista.nods){
		for(cox:mod.coxs){
			lista.add(cox);
			for(nod:cox.nods)lista.add(nod);
		}
	}
	objs=lista.getAllOrdenedInverted();
	for(obj:objs)del(obj);
	reverse(objs);
	addUndoObjeto(objs,ADD);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs==0" x="218" y="38">		<text>+ Ghost.coxs==0:
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="Ghost.coxs&gt;0" x="219" y="35">		<text>+ Ghost.coxs&gt;0:
	setState(MOVE+TO_CONNECT);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec==0" x="215" y="32">		<text>+ modsSelec==0:
	unSelectAll();
	draw();
	setState(NORMAL);</text>	</mod>	<mod border="0" color="A3E7FF" icons="" title="modsSelec&gt;0" x="216" y="29">		<text>+ modsSelec&gt;0:
	newMod=createModRelacionado(mouse,modsSelec);
	setState(MOVE+TO_CREATE,newMod);	//Envia newMod</text>	</mod>	<mod border="0" color="00C817" icons="" title="Opções" x="196" y="-33">		<text>+ Opções:
- Menu das opções de zoom.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Zoom x1" x="199" y="-30">		<text>+ Zoom x1:
- Muda o zoom com foco no centro com proporção 1:1.
- Ctrl-1
	zoom(8-UNIT);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Zoom x2" x="199" y="-28">		<text>+ Zoom x2:
- Muda o zoom com foco no centro com proporção 1:2.
- Ctrl-2
	zoom(16-UNIT);</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Zoom x3" x="199" y="-26">		<text>+ Zoom x3:
- Muda o zoom com foco no centro com proporção 1:3.
- Ctrl-3
	zoom(24-UNIT);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="RIGHT" x="446" y="242">		<text>+ RIGHT:
	savedObjs=new List&lt;Objeto&gt;(objsSelec);
	addUndoable(savedObjs,false);
	unSelectAll();
	draw();
	setState(DRAG_ALL+RIGHT+NORMAL);</text>	</mod>	<mod border="0" color="0099CC" icons="" title="createModRelacionado(x,y,modsPais)" x="268" y="59">		<text>+ createModRelacionado(x,y,modsPais):
- Cria um mod no local x,y, relacionado aos modsPais.
	newMod=new Modulo(x,y);					//Cria um newMod no local x,y dado
	if(modsPais==1){							//Se houver apenas 1 modPai
		mod=modsPais[0];
		newMod.setCor(mod.getCor());			//newMod recebe cor de modPai
		newMod.setBorda(mod.getBorda());	//newMod recebe borda de modPai
	}
	add(newMod);
	relateMods(modsPais,newMod);
	draw();
	return newMod;</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Repetições" x="260" y="48">		<text>+ Repetições:
- Funções para ações repetidas.</text>	</mod>	<mod border="0" color="0099CC" icons="" title="createNod(seg,x,y,undoable)" x="268" y="62">		<text>+ createNod(seg,x,y,undoable):
- Cria um nod em um seg dado, no local x,y.
	index=[seg].cox.getIndex([seg]);
	newNod=new Nodulo([seg].cox,x,y);	//Cria um newNod no local x,y dado
	newNod.setIndexOnCox(index);			//Determina seu index no cox
	if(undoable){
		addUndoable(newNod,true);			//Adiciona e pode ser undo
	}else add(newNod);						//Adiciona apenas
	unSelectAll();							//Deseleciona tudo
	if(!undoable)select(newNod);			//Seleciona newNod
	draw();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="createMod(x,y)" x="268" y="57">		<text>+ createMod(x,y):
- Cria um mod no local x,y.
	newMod=new Modulo(x,y);	//Cria um newMod no local x,y dado
	addUndoable(newMod,true);	//Adiciona e pode ser undo
	unSelectAll();				//Deseleciona tudo
	select(newMod);				//Seleciona newMod
	draw();
	return newMod;</text>	</mod>	<mod border="0" color="0099CC" icons="" title="setArea(state,addTo,locations...)" x="238" y="57">		<text>+ setArea(state,addTo,locations...):
	allChunksIndexes=null;
	newChunksIndexes=null;
	switch(locations){
		default:
			if(!addTo)switch(state){
				case TO_SELECT:
				case TO_DELETE:	unSelectAll();		break;
				default:				unSelectAllMods();	break;
			}
			selecao.setState(state);					//Muda o state da área
			allChunksIndexes=getChunksIndexes(selecao.getForm());	//Os chunks na área
			newChunksIndexes=allChunksIndexes;
		break;
		case 4:
			if(!addTo)switch(state){
				case TO_SELECT:
				case TO_DELETE:	unSelectAll();		break;
				default:				unSelectAllMods();	break;
			}
			selecao.setState(state);					//Muda o state da área
			selecao.setAncora(locations[0],locations[1]);	//Determina o local com o x1,y1 dado
			selecao.setArea(locations[2],locations[3]);	//Determina o tamanho com o x2,y2 dado
			allChunksIndexes=getChunksIndexes(selecao.getForm());	//Os chunks na área
			newChunksIndexes=allChunksIndexes;
		break;
		case 2:
			areaOld=selecao.getForm();
			selecao.setArea(locations[0],locations[1]);	//Determina o tamanho com o x,y dado
			areaNew=selecao.getForm();
			areaAll=(min(areaOld,areaNew),max(areaOld,areaNew));
			allChunksIndexes=getChunksIndexes(areaAll);	//Os chunks na nova área + antiga área
			newChunksIndexes=getChunksIndexes(areaNew);	//Os chunks na nova área
		break;
	}
	for(chunk:allChunksIndexes){				//Navega apenas pelos chunks visíveis
		if(newChunksIndexes.chunk.isInside()){	//Se chunk é totalmente incluído na área
			for(obj:chunk.objs){				//Os objs são automaticamente selec
				switch(state){
					case TO_SELECT:		select(obj);					break;
					case TO_CREATE:		selectToBeCreator(obj);	break;
					case TO_CREATE_SON:	selectToBeSon(obj);			break;
					case TO_CREATE_PAI:	selectToBePai(obj);			break;
					case TO_DELETE:		selectToBeDeleted(obj);	break;
				}
			}
		}else{
	 		for(mod:chunk.mods){
				if(selecao.inclui(mod)){		//Se selecao inclui mod
					switch(state){
						case TO_SELECT:		select(mod);					break;
						case TO_CREATE:		selectToBeCreator(mod);	break;
						case TO_CREATE_SON:	selectToBeSon(mod);			break;
						case TO_CREATE_PAI:	selectToBePai(mod);			break;
						case TO_DELETE:		selectToBeDeleted(mod);	break;
					}
				}else if(!addTo)unSelect(mod);	//O mod é cinza
			}
	 		for(cox:chunk.coxs){
				if(selecao.inclui(cox)){		//Se selecao inclui cox
					switch(state){
						case TO_SELECT:		select(cox);					break;
						case TO_CREATE:		break;
						case TO_CREATE_SON:	break;
						case TO_CREATE_PAI:	break;
						case TO_DELETE:		selectToBeDeleted(cox);	break;
					}
				}else if(!addTo)switch(state){
					case TO_SELECT:
					case TO_DELETE:	unSelect(cox);	break;
					default:				break;
				}
			}
	 		for(nod:chunk.nods){
				if(selecao.inclui(nod)){		//Se selecao inclui nod
					switch(state){
						case TO_SELECT:		select(nod);					break;
						case TO_CREATE:		break;
						case TO_CREATE_SON:	break;
						case TO_CREATE_PAI:	break;
						case TO_DELETE:		selectToBeDeleted(nod);	break;
					}
				}else if(!addTo)switch(state){
					case TO_SELECT:
					case TO_DELETE:	unSelect(nod);	break;
					default:				break;
				}
			}
		}
		draw();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="setHover(state)" x="249" y="55">		<text>+ setHover(state):
- Muda o state do mod hover.
	unSelectAll();
	popup.close();
	modHover=getMod(mouse);
	switch(state){
		case TO_UNSELECT:default:break;
		case TO_CREATE:
			if(modHover){
				selectToBeCreator(modHover);
			}else{
				coxHover=getCox(mouse);
				if(coxHover){
					seg=coxHover.getSeg(mouse);
					selectToBeCreator(seg);
				}
			}
		break;
		case TO_CREATE_SON:
			if(modHover==Mestre)modHover=null;
			if(modHover){
				selectToBeSon(modHover);
			}
		break;
		case TO_CREATE_PAI:
			if(modHover){
				selectToBePai(modHover);
			}
		break;
		case TO_DELETE:
			if(modHover){
				selectToBeDeleted(modHover);
			}else{
				nodHover=getNod(mouse);
				if(nodHover){
					selectToBeDeleted(nodHover);
				}else{
					coxHover=getCox(mouse);
					if(coxHover){
						selectToBeDeleted(coxHover);
					}
				}
			}
		break;
	}
	draw();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="relateMods(modsPais,modSon)" x="243" y="63">		<text>+ relateMods(modsPais,modSon):
	unSelectAll();
	for(modPai:modsPais){	//O modSon se torna son dos modsSelec
		if(modPai==modSon)continue;
		newCox=new Conexao(modPai,modSon);
		add(newCox);
	}
	draw();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="deleteGhostCoxs()" x="267" y="68">		<text>+ deleteGhostCoxs():
	while(Ghost.coxs&gt;0){
		del(Ghost.coxs(0));
	}
	draw();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="relateToGhost(mods)" x="248" y="68">		<text>+ relateToGhost(mods):
	for(mod:mods){
		newCox=new Conexao(Ghost,mod);
		newCox.setBorda(newCox.son.getBorda());
		add(newCox);
	}
	unSelectAll();
	draw();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="relateToMods(mods)" x="248" y="66">		<text>+ relateToMods(mods):
	if(Ghost.coxs==0)return;
	savedObjs=new List&lt;Objeto&gt;;
	for(mod:mods){
		for(cox:Ghost.coxs){
			newCox=new Conexao(mod,cox.son);
			newCox.setBorda(cox.getBorda());
			add(newCox);
			savedObjs.add(newCox);
			for(nod:cox.nods){
				newNod=new Nodulo(newCox,nod.x,nod.y);
				add(newNod);
				savedObjs.add(newNod);
			}
		}
	}
	addUndoable(savedObjs,false);
	unSelectAll();
	for(obj:savedObjs)select(obj);
	draw();</text>	</mod>	<mod border="0" color="0099CC" icons="" title="createNodOnGhostCoxs(x,y)" x="268" y="64">		<text>+ createNodOnGhostCoxs(x,y):
	for(cox:Ghost.coxs){
		newNod=new Nodulo(cox,x,y);
		add(newNod);
	}
	draw();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="LEFT" x="379" y="518">		<text>+ LEFT:
	addAndSelect(mod);
	setArea(TO_SELECT,false,mouse);
	setState(SELECT_AREA+NORMAL);</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="mouse_drag" x="377" y="515">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="0099CC" icons="" title="addAndSelect(mod)" x="248" y="59">		<text>+ addAndSelect(mod):
	savedObjs=new List&lt;Objeto&gt;;
	savedObjs.add(mod);
	for(cox:mod.coxs)savedObjs.add(cox);
	addUndoable(savedObjs,false);
	unSelectAll();
	select(mod);
	for(cox:mod.coxs)select(cox);
	draw();</text>	</mod>	<mod border="0" color="00C817" icons="" title="Conexão" x="164" y="-17">		<text/>	</mod>	<mod border="0" color="00FF00" icons="" title="Inverter Relação" x="168" y="-14">		<text>+ Inverter Relação:
- Inverte a relação de Módulo-pai e Módulo-son.
	invertCox();</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Atalhos" x="231" y="-50">		<text>* Atalhos:

+ Arquivo:
- Ctrl-N:			Cria um novo arquivo .mind.
- Ctrl-A:			Abre um arquivo .mind.
- Ctrl-S:			Salva um arquivo .mind.
- Ctrl+Shift-S:	Salva um novo arquivo .mind.
- Ctrl-W:			Fecha o programa.

+ Edição:
- Ctrl-Z:			Desfaz uma ação.
- Ctrl-Y:			Refaz uma ação.
- Ctrl-X:			Recorta Objetos selecionados.
- Ctrl-C:			Copia Objetos selecionados.
- Ctrl-V:			Cola Objetos da área de transferência.
- Excluir:			Deleta Objetos selecionados.
- Ctrl-A:			Seleciona todos os Objetos.
- Escape:			Deseleciona todos os Objetos.
- Shift:				Seleciona os descendentes imediatos dos objetos.
- Ctrl-I:			Deseleciona os selecionados e seleciona todos os outros.

+ Módulos:
- F2:					Abre o editor de título do Módulo.
- Ctrl-R:			Inicia o modo de relacionar Módulos.
- Ctrl+Alt-G:		Cria um Módulo, descendente dos selecionados.
- Ctrl+Alt-R:		Inicia uma relação, relacionando os selecionados.
- Ctrl+Alt-D:		Exclui os Módulos selecionados.
- Ctrl-P:			Seleciona todos os Módulos sem pais.

+ Conexão:

+ Exibir:
- F11:				Muda o modo fullscreen.
- Ctrl-Igual:		Aumenta o zoom com foco no centro.
- Ctrl-Menos:		Diminúi o zoom com desfoco no centro.
- Ctrl-1:			Muda o zoom com foco no centro com proporção 1:1.
- Ctrl-2:			Muda o zoom com foco no centro com proporção 1:2.
- Ctrl-3:			Muda o zoom com foco no centro com proporção 1:3.
- Ctrl-0:			Restaura o zoom para o valor inicial padrão.
- Ctrl-E:			Centraliza a tela nos Objetos selecionados ou no Mestre.
- Ctrl-Q:			Quebra a linha no editor de texto.
- Ctrl-M:			Mostra caractéres invisíveis no editor de texto.
- Ctrl-L:			Separa a janela do editor de texto em uma independente.

+ Pesquisar:
- Ctrl-F:			Abre o pesquisador de texto.

+ Anotações:
- Ctrl-T:			Abre o anotador temporário.
</text>	</mod>	<mod border="0" color="0099CC" icons="" title="invertCox()" x="245" y="25">		<text>+ invertCox():
- Inverte a relação de modPai e modSon.
	if(titulo.isVisible())return;
	newObj=new List();
	for(cox:coxsSelec){
		if(cox.pai==Mestre)continue;
		newCox=new Conexao(cox.son,cox.pai);
		newCox.setBorda(cox.getBorda());
		newCox.setTexto(cox.getTexto());
		newNods=new List();
		for(nod:cox.nods){
			newNod=new Nodulo(newCox,nod.x,nod.y);
			newNods.add(newNod);
		}
		newObjs.add(newCox);
		reverse(newNods);
		for(newNod:newNods){
			newObjs.add(newNod);
		}
	}
	addUndoable(newObjs,true);
	resetState();</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Atalhos" x="239" y="17">		<text>+ Atalhos:
- Funções para serem chamadas por atalhos.</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Inverter Relação" x="323" y="35">		<text>+ Inverter Relação:
- Inverte a relação de Módulo-pai e Módulo-son.
	invertCox();</text>	</mod>	<mod border="0" color="33CCFF" icons="" title="key_alt_down +&#10;LEFT" x="388" y="155">		<text>+ key_alt_down + LEFT:
	if([cox]){
		for(cox:coxsSelec)for(nod:[cox].nods)select(nod);
	}
	//Muda o X e Y dos modsSelec e nodsSelec de acordo com o mouse.
	oldLocal=mouse;
	for(mod:modsSelec)mod.setLocal(mouse);
	for(nod:nodsSelec)nod.setLocal(mouse);
	draw();
	setState(DRAG+NORMAL);</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="configMindSort" x="324" y="-61">		<text>+ configMindSort:
- Guarda todas as configurações do programa.
	[Settings]
		[Dimensions]
			x_Window=([0-9]+)
			y_Window=([0-9]+)
			width_Window=([0-9]+)
			height_Window=([0-9]+)
			x_TextWindow=([0-9]+)
			y_TextWindow=([0-9]+)
			width_TextWindow=([0-9]+)
			height_TextWindow=([0-9]+)
			defaultWidth_TextWindow=([0-9]+)
			defaultHeight_TextWindow=([0-9]+)
		[Font]
			font=([a-zA-ZÀ-ÿ0-9]+),([0-9]+),([0-9]+)
		[Fundo]
			showGrid=true
		[Paleta]
			cor_0_0=(#[0-9A-F]{6})
			cor_0_1=(#[0-9A-F]{6})
			cor_0_2=(#[0-9A-F]{6})
			cor_0_3=(#[0-9A-F]{6})
			cor_0_4=(#[0-9A-F]{6})
			cor_0_5=(#[0-9A-F]{6})
			cor_1_0=(#[0-9A-F]{6})
			cor_1_1=(#[0-9A-F]{6})
			cor_1_2=(#[0-9A-F]{6})
			cor_1_3=(#[0-9A-F]{6})
			cor_1_4=(#[0-9A-F]{6})
			cor_1_5=(#[0-9A-F]{6})
			cor_2_2=(#[0-9A-F]{6})
			cor_2_3=(#[0-9A-F]{6})
			cor_2_4=(#[0-9A-F]{6})
			cor_2_5=(#[0-9A-F]{6})
			cor_3_2=(#[0-9A-F]{6})
			cor_3_3=(#[0-9A-F]{6})
			cor_3_4=(#[0-9A-F]{6})
			cor_3_5=(#[0-9A-F]{6})
		[Texto]
			lineWrap=(true|false)
			showAllChars=(true|false)
			separarTextWindow=(true|false)
			autoFocarTextWindow=(true|false)
		[Limites]
			objetosLimite=([0-9]+)
			undoRedoLimite=([0-9]+)
			transparenciaNivel=([0-9]+)
		[Icones]
			iconesPasta=(C:\.+)
</text>	</mod>	<mod border="0" color="00FF00" icons="" title="Anotações" x="226" y="-45">		<text>+ Anotações:
- Abre o anotador temporário.
- Ctrl-T</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="picker" x="314" y="-72">		<text>+ picker:
	Cursor.png
	Mask.png
	Picker.png</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="CorPickBloco" x="475" y="32">		<text>+ CorPickBloco:
- Bloco do coletor de cores.

public class CorPickBloco extends Bloco{
//JANELA
	private JFrame janela;
//CURSOR
	private final BufferedImage cursorImg;
	private final BufferedImage mask;
	private final Image cursor;
//PICKER
	private CorPick pick;
	private Robot bot;
		private void setCor(Point local);
//MAIN
	public CorPickBloco(CorPick pick,int x,int y,int width,int height);
	private void set(CorPick pick);
//DRAW
	private final Image icone;
	public void draw(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="search" x="329" y="-54">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="MatchMade" x="328" y="-41">		<text>+ MatchMade:
- Uma procura feita.

public class MatchMade{
//TREE
	private Tree tree;
//LISTA
	final HashMap&lt;Integer,List&lt;Match&gt;&gt;matchesByObjs;
		public List&lt;Match&gt;getByObj(Objeto obj);
		public Match get(int index);
		public void add(Match match);
		public void del(Objeto obj);
	private int size;
		public int size();
//SEARCH
	private Pattern regex;
//	private boolean frente;
//	private boolean onlySelected;
//	private boolean wholeWord;
	private boolean diffMaiuscMinusc;
	public void search(String termo,boolean frente,boolean onlySelected,boolean wholeWord,boolean diffMaiuscMinusc);
	private void searchInObj(Objeto obj);
	private void searchInObjTexto(Objeto obj,boolean isTitulo,String texto);
	public void research(Objeto obj);
	public void researchText(Objeto obj,boolean isTitulo,String texto);
//MAIN
	public MatchMade(Tree tree);
//FUNCS
	public boolean isEmpty();
	public void clear();
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Match" x="336" y="-41">		<text>+ Match:
- Um instante encontrado em uma procura.

public class Match{
//OBJETO
	private Objeto obj;
		public Objeto getObjeto();
//TEXTO OU TÍTULO
	private boolean isOnText;
		public boolean isOnText();
//INDEX
	private int selecIni;
		public int getSelectionStart();
	private int selecFim;
		public int getSelectionEnd();
//MAIN
	public Match(Objeto obj,boolean isOnText,int selecIni,int selecFim);
}</text>	</mod>	<mod border="0" color="999999" icons="/Basics/Folder.png" title="janela" x="300" y="-54">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="JanelaVidro" x="290" y="-60">		<text>+ JanelaVidro:
- Janela transparente com uma borda customizada.

public class JanelaVidro extends JDialog{
//BORDA
	private Borda borda;
		public Borda getBorda();
//BOTÃO X
	private Botao X;
//TRANSPARÊNCIA
	private int transparencia;
		public int getTransparencia();
		public void setTransparencia(int transparencia);
//MAIN
	public JanelaVidro(JFrame janela);
//FUNCS
@Override
	public void setLocation(int x,int y);
@Override
	public void setSize(int width,int height);
@Override
	public void setBounds(int x,int y,int width,int height);
//DRAW
@Override
	public void paint(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Borda" x="285" y="-53">		<text>+ Borda:
- Borda customizada.

public class Borda{
//STATE
	private enum Side...
	private Side side;
		private Side getSide(Point ponto);
//JANELA(PAI)
	private Window janela;
		public Window getJanela();
//BORDAS
	public static int TOP_WIDTH;
	public static int WIDTH;
		public int getInnerX();
		public int getInnerY();
		public int getInnerWidth();
		public int getInnerHeight();
	public Rectangle getInnerBounds();
//ÁREAS DAS BORDAS
	private Rectangle getTitleBar();
	private Rectangle getTopBorder();
	private Rectangle getBottomBorder();
	private Rectangle getLeftBorder();
	private Rectangle getRightBorder();
//VAR GLOBAIS
	private static Color WINDOW_COLOR;
		public static Color getBordaCor();
		public static void setBordaCor(Color bordaCor);
	private static Color WINDOW_DISABLED_COLOR;
		public static Color getBordaDisabledCor();
		public static void setBordaDisabledCor(Color bordaCor);
	private Rectangle windowSize;
	private Point mousePressed;
	private boolean isDragging;
		public boolean isDragging();
//BOTÕES
	private List&lt;Botao&gt;botoes;
		public void add(Botao button);
//FONTE
	private Font fonte;
		public Font getFonte();
//MAIN
	public Borda(JDialog janela);
	public Borda(JFrame janela);
	private void setJanela(Window janela);
//DRAW
	public void draw(Graphics imagemEdit);
		private void drawShadow(Graphics imagemEdit);
			private void drawShadowBlock(Graphics2D imagemEdit2D,int x1,int y1,int x2,int y2,Side side);
		private void drawBorda(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="/Basics/Empty.png" title="Botao" x="289" y="-44">		<text>+ Botao:
- Botão utilizado na Borda.

public class Botao{
//STATES
	private enum State...
	private State state;
		private void setState(State state);
	private Borda borda;
		public Borda getBorda();
//CORES
	public class Cor...
	private Cor cor;
		public Cor getCores();
//LEGENDA
	private JPopupMenu popup;
		public void setLegenda(String legenda);
//ACTION
	private Runnable acao;
		public void setAction(Runnable acao);
		public void click();
//LOCAL
	protected int x;
		public int getX();
		public void setX(int x);
	protected int y;
		public int getY();
		public void setY(int y);
	public Point getLocation();
	public void setLocation(int x,int y);
//FORM
	protected int width;
		public int getWidth();
		public void setWidth(int width);
	protected int height;
		public int getHeight();
		public void setHeight(int height);
	public Dimension getSize();
	public void setSize(int width,int height);
	public Rectangle getBounds();
	public Rectangle getRelativeBounds();
	public void setBounds(int x,int y,int width,int height);
	public void setBounds(Rectangle r);
//IMAGEM
	private Image print;
		private Image getPrint();
	private Image buffer;
	private boolean update;
		private void update();
//VISIBILIDADE
	private boolean visible;
		public boolean isVisible();
		public void setVisible(boolean visible);
//TITULO
	private String titulo;
		public String getTitulo();
		public void setTitulo(String titulo);
//MAIN
	public Botao(Borda borda);
//FUNCS
	private void setPopup(boolean open);
//DRAW
	public synchronized void draw();
	public void draw(Graphics imagemEdit);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="JDialog" x="355" y="-94">		<text/>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Side" x="280" y="-52">		<text>private enum Side{
	NONE,
	ALL,
	TOP,
	TOP_RIGHT,
	RIGHT,
	BOTTOM_RIGHT,
	BOTTOM,
	BOTTOM_LEFT,
	LEFT,
	TOP_LEFT;
	private boolean is(Borda.Side... sides);
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="State" x="283" y="-44">		<text>private enum State{
	INACTIVE,
	HOVERED,
	ACTIVE,
	DRAGGED;
}</text>	</mod>	<mod border="0" color="DCDCDC" icons="" title="Cor" x="285" y="-41">		<text>public class Cor{
	private Color background;
		public Color getBackground();
		public void setBackground(Color cor);
	private Color unFocusedBackground;
		public Color getBackgroundOnUnfocused();
		public void setBackgroundOnUnfocused(Color cor);
	private Color hoverBackground;
		public Color getBackgroundOnHover();
		public void setBackgroundOnHover(Color cor);
	private Color activeBackground;
		public Color getBackgroundOnActive();
		public void setBackgroundOnActive(Color cor);
	private Color foreground;
		public Color getForeground();
		public void setForeground(Color cor);
	private Color unFocusedforeground;
		public Color getForegroundOnUnfocused();
		public void setForegroundOnUnfocused(Color cor);
}</text>	</mod>	<mod border="0" color="0000FF" icons="" title="Botao&#13;&#10;States" x="252" y="-30">		<text>+ Botao States:</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="LEFT" x="223" y="-20">		<text>+ LEFT:
	setState(ACTIVE);</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="mouse_down" x="228" y="-20">		<text>+ mouse_down:</text>	</mod>	<mod border="0" color="00FFFF" icons="" title="HOVERED" x="237" y="-20">		<text>+ HOVERED:
- O mouse está acima do botão.</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="mouse_move" x="236" y="-17">		<text>+ mouse_move:
	if(!contains(mouse)){
		setState(INACTIVE);
		setPopup(false);
	}</text>	</mod>	<mod border="0" color="00FFFF" icons="" title="ACTIVE" x="241" y="-13">		<text>+ ACTIVE:
- O mouse está pressionando o botão.</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="mouse_up" x="247" y="-13">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="00FFFF" icons="" title="INACTIVE" x="251" y="-20">		<text>+ INACTIVE:
- Nada ocorre.</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="mouse_move" x="250" y="-17">		<text>+ mouse_move:
	if(contains(mouse)){
		setState(HOVER);
		setPopup(true);
	}</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="LEFT" x="227" y="-11">		<text>+ LEFT:
	if(!contains(mouse)){
		setState(DRAGGED);
		setPopup(false);
	}</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="mouse_drag" x="232" y="-11">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="LEFT" x="254" y="-13">		<text>+ LEFT:
	setState(HOVERED);
	click();</text>	</mod>	<mod border="0" color="00FFFF" icons="" title="DRAGGED" x="245" y="-6">		<text>+ DRAGGED:
- O mouse está pressionado, mas fora do botão.</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="mouse_up" x="252" y="-6">		<text>+ mouse_up:</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="LEFT" x="259" y="-6">		<text>+ LEFT:
	setState(INACTIVE);</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="mouse_drag" x="236" y="-4">		<text>+ mouse_drag:</text>	</mod>	<mod border="0" color="29CCFF" icons="" title="LEFT" x="231" y="-4">		<text>+ LEFT:
	if(contains(mouse)){
		setState(ACTIVE);
		setPopup(true);
	}</text>	</mod>	<mod border="0" color="00C817" icons="" title="------" x="214" y="-36">		<text/>	</mod>	<mod border="0" color="00FF00" icons="" title="Transparência..." x="214" y="-38">		<text>+ Transparência...:
- Abre um selecionador de transparência.</text>	</mod>	<cox border="0" pai="0" son="35" width="0">		<text/>	</cox>	<cox border="0" pai="0" son="45" width="0">		<text/>	</cox>	<cox border="0" pai="0" son="600" width="2">		<text/>	</cox>	<cox border="0" pai="35" son="1" width="0">		<text/>	</cox>	<cox border="0" pai="10" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="12" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="36" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="61" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="111" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="145" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="161" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="118" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="107" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="181" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="189" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="196" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="203" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="229" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="248" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="84" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="254" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="307" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="293" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="302" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="340" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="277" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="351" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="427" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="454" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="250" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="251" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="167" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="169" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="168" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="166" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="2" son="517" width="0">		<text/>	</cox>	<cox border="0" pai="2" son="518" width="0">		<text/>	</cox>	<cox border="0" pai="2" son="519" width="0">		<text/>	</cox>	<cox border="0" pai="587" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="867" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="869" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="852" son="2" width="1">		<text/>	</cox>	<cox border="0" pai="835" son="2" width="0">		<text/>	</cox>	<cox border="0" pai="2" son="184" width="0">		<text/>		<nod x="299" y="200"/>		<nod x="299" y="198"/>	</cox>	<cox border="0" pai="2" son="185" width="0">		<text/>		<nod x="299" y="203"/>		<nod x="299" y="198"/>	</cox>	<cox border="0" pai="2" son="180" width="0">		<text/>		<nod x="299" y="206"/>		<nod x="299" y="198"/>	</cox>	<cox border="0" pai="3" son="4" width="0">		<text/>	</cox>	<cox border="0" pai="20" son="3" width="1">		<text/>	</cox>	<cox border="0" pai="113" son="3" width="1">		<text/>	</cox>	<cox border="0" pai="182" son="3" width="1">		<text/>	</cox>	<cox border="0" pai="184" son="3" width="1">		<text/>	</cox>	<cox border="0" pai="205" son="3" width="1">		<text/>	</cox>	<cox border="0" pai="262" son="3" width="1">		<text/>	</cox>	<cox border="0" pai="276" son="3" width="1">		<text/>	</cox>	<cox border="0" pai="440" son="3" width="1">		<text/>	</cox>	<cox border="0" pai="3" son="514" width="0">		<text/>	</cox>	<cox border="0" pai="3" son="188" width="0">		<text/>		<nod x="483" y="369"/>		<nod x="483" y="361"/>	</cox>	<cox border="0" pai="3" son="189" width="0">		<text/>		<nod x="483" y="363"/>		<nod x="483" y="361"/>	</cox>	<cox border="0" pai="3" son="190" width="0">		<text/>		<nod x="483" y="366"/>		<nod x="483" y="361"/>	</cox>	<cox border="0" pai="9" son="5" width="1">		<text/>	</cox>	<cox border="0" pai="24" son="5" width="1">		<text/>	</cox>	<cox border="0" pai="114" son="5" width="1">		<text/>	</cox>	<cox border="0" pai="253" son="5" width="1">		<text/>	</cox>	<cox border="0" pai="5" son="537" width="0">		<text/>	</cox>	<cox border="0" pai="5" son="538" width="0">		<text/>	</cox>	<cox border="0" pai="5" son="539" width="0">		<text/>	</cox>	<cox border="0" pai="6" son="196" width="0">		<text/>	</cox>	<cox border="0" pai="6" son="197" width="0">		<text/>	</cox>	<cox border="0" pai="538" son="6" width="0">		<text/>	</cox>	<cox border="0" pai="7" son="207" width="0">		<text/>	</cox>	<cox border="0" pai="7" son="208" width="0">		<text/>	</cox>	<cox border="0" pai="539" son="7" width="0">		<text/>	</cox>	<cox border="0" pai="28" son="8" width="1">		<text/>	</cox>	<cox border="0" pai="207" son="8" width="1">		<text/>	</cox>	<cox border="0" pai="8" son="542" width="0">		<text/>	</cox>	<cox border="0" pai="8" son="545" width="0">		<text/>	</cox>	<cox border="0" pai="8" son="546" width="0">		<text/>	</cox>	<cox border="0" pai="584" son="8" width="1">		<text/>	</cox>	<cox border="0" pai="583" son="8" width="1">		<text/>	</cox>	<cox border="0" pai="29" son="9" width="0">		<text/>	</cox>	<cox border="0" pai="542" son="10" width="0">		<text/>	</cox>	<cox border="0" pai="16" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="11" son="43" width="0">		<text/>	</cox>	<cox border="0" pai="11" son="51" width="0">		<text/>	</cox>	<cox border="0" pai="110" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="112" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="199" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="231" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="255" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="263" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="11" son="547" width="0">		<text/>	</cox>	<cox border="0" pai="11" son="548" width="0">		<text/>	</cox>	<cox border="0" pai="11" son="550" width="0">		<text/>	</cox>	<cox border="0" pai="11" son="552" width="0">		<text/>	</cox>	<cox border="0" pai="204" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="588" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="770" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="870" son="11" width="1">		<text/>	</cox>	<cox border="0" pai="11" son="888" width="0">		<text/>	</cox>	<cox border="0" pai="548" son="12" width="0">		<text/>	</cox>	<cox border="0" pai="14" son="13" width="1">		<text/>	</cox>	<cox border="0" pai="220" son="13" width="1">		<text/>	</cox>	<cox border="0" pai="227" son="13" width="1">		<text/>	</cox>	<cox border="0" pai="235" son="13" width="1">		<text/>	</cox>	<cox border="0" pai="237" son="13" width="1">		<text/>	</cox>	<cox border="0" pai="259" son="13" width="1">		<text/>	</cox>	<cox border="0" pai="265" son="13" width="1">		<text/>	</cox>	<cox border="0" pai="13" son="549" width="0">		<text/>	</cox>	<cox border="0" pai="13" son="551" width="0">		<text/>	</cox>	<cox border="0" pai="13" son="553" width="0">		<text/>	</cox>	<cox border="0" pai="13" son="554" width="0">		<text/>	</cox>	<cox border="0" pai="585" son="13" width="1">		<text/>	</cox>	<cox border="0" pai="241" son="13" width="1">		<text/>	</cox>	<cox border="0" pai="547" son="14" width="0">		<text/>	</cox>	<cox border="0" pai="554" son="15" width="0">		<text/>	</cox>	<cox border="0" pai="549" son="16" width="0">		<text/>	</cox>	<cox border="0" pai="17" son="18" width="1">		<text/>	</cox>	<cox border="0" pai="514" son="17" width="0">		<text/>	</cox>	<cox border="0" pai="228" son="18" width="1">		<text/>	</cox>	<cox border="0" pai="238" son="18" width="1">		<text/>	</cox>	<cox border="0" pai="264" son="18" width="1">		<text/>	</cox>	<cox border="0" pai="404" son="18" width="1">		<text/>	</cox>	<cox border="0" pai="410" son="18" width="1">		<text/>	</cox>	<cox border="0" pai="413" son="18" width="1">		<text/>	</cox>	<cox border="0" pai="18" son="515" width="0">		<text/>	</cox>	<cox border="0" pai="18" son="516" width="0">		<text/>	</cox>	<cox border="0" pai="18" son="407" width="0">		<text/>		<nod x="483" y="379"/>		<nod x="483" y="377"/>	</cox>	<cox border="0" pai="18" son="408" width="0">		<text/>		<nod x="483" y="382"/>		<nod x="483" y="377"/>	</cox>	<cox border="0" pai="18" son="406" width="0">		<text/>		<nod x="483" y="385"/>		<nod x="483" y="377"/>	</cox>	<cox border="0" pai="516" son="19" width="0">		<text/>	</cox>	<cox border="0" pai="515" son="20" width="0">		<text/>	</cox>	<cox border="0" pai="21" son="22" width="1">		<text/>	</cox>	<cox border="0" pai="537" son="21" width="0">		<text/>	</cox>	<cox border="0" pai="22" son="540" width="0">		<text/>	</cox>	<cox border="0" pai="22" son="541" width="0">		<text/>	</cox>	<cox border="0" pai="541" son="23" width="0">		<text/>	</cox>	<cox border="0" pai="540" son="24" width="0">		<text/>	</cox>	<cox border="0" pai="25" son="26" width="1">		<text/>	</cox>	<cox border="0" pai="542" son="25" width="0">		<text/>	</cox>	<cox border="0" pai="26" son="543" width="0">		<text/>	</cox>	<cox border="0" pai="26" son="544" width="0">		<text/>	</cox>	<cox border="0" pai="544" son="27" width="0">		<text/>	</cox>	<cox border="0" pai="543" son="28" width="0">		<text/>	</cox>	<cox border="0" pai="29" son="109" width="0">		<text/>	</cox>	<cox border="0" pai="514" son="29" width="0">		<text/>	</cox>	<cox border="0" pai="100" son="30" width="1">		<text/>	</cox>	<cox border="0" pai="195" son="30" width="1">		<text/>	</cox>	<cox border="0" pai="252" son="30" width="1">		<text/>	</cox>	<cox border="0" pai="30" son="525" width="0">		<text/>	</cox>	<cox border="0" pai="30" son="526" width="0">		<text/>	</cox>	<cox border="0" pai="30" son="527" width="0">		<text/>	</cox>	<cox border="0" pai="55" son="31" width="1">		<text/>	</cox>	<cox border="0" pai="210" son="31" width="1">		<text/>	</cox>	<cox border="0" pai="211" son="31" width="1">		<text/>	</cox>	<cox border="0" pai="212" son="31" width="1">		<text/>	</cox>	<cox border="0" pai="422" son="31" width="1">		<text/>	</cox>	<cox border="0" pai="428" son="31" width="1">		<text/>	</cox>	<cox border="0" pai="434" son="31" width="1">		<text/>	</cox>	<cox border="0" pai="31" son="530" width="0">		<text/>	</cox>	<cox border="0" pai="31" son="531" width="0">		<text/>	</cox>	<cox border="0" pai="31" son="532" width="0">		<text/>	</cox>	<cox border="0" pai="31" son="533" width="0">		<text/>	</cox>	<cox border="0" pai="31" son="415" width="0">		<text/>		<nod x="516" y="410"/>		<nod x="516" y="402"/>	</cox>	<cox border="0" pai="31" son="416" width="0">		<text/>		<nod x="516" y="404"/>		<nod x="516" y="402"/>	</cox>	<cox border="0" pai="31" son="417" width="0">		<text/>		<nod x="516" y="407"/>		<nod x="516" y="402"/>	</cox>	<cox border="0" pai="32" son="213" width="0">		<text/>	</cox>	<cox border="0" pai="32" son="214" width="0">		<text/>	</cox>	<cox border="0" pai="531" son="32" width="0">		<text/>	</cox>	<cox border="0" pai="33" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="517" son="33" width="0">		<text/>	</cox>	<cox border="0" pai="39" son="34" width="0">		<text/>	</cox>	<cox border="0" pai="34" son="118" width="0">		<text/>	</cox>	<cox border="0" pai="513" son="36" width="0">		<text/>	</cox>	<cox border="0" pai="48" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="49" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="62" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="186" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="385" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="386" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="387" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="388" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="389" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="390" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="391" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="392" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="393" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="394" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="395" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="396" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="397" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="398" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="399" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="401" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="400" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="460" son="37" width="1">		<text/>	</cox>	<cox border="0" pai="37" son="510" width="0">		<text/>	</cox>	<cox border="0" pai="37" son="511" width="0">		<text/>	</cox>	<cox border="0" pai="38" son="40" width="1">		<text/>	</cox>	<cox border="0" pai="511" son="38" width="0">		<text/>	</cox>	<cox border="0" pai="39" son="123" width="0">		<text/>	</cox>	<cox border="0" pai="510" son="39" width="0">		<text/>	</cox>	<cox border="0" pai="40" son="513" width="0">		<text/>	</cox>	<cox border="0" pai="40" son="512" width="0">		<text/>	</cox>	<cox border="0" pai="875" son="40" width="1">		<text/>	</cox>	<cox border="0" pai="523" son="41" width="0">		<text/>	</cox>	<cox border="0" pai="512" son="42" width="0">		<text/>	</cox>	<cox border="0" pai="545" son="44" width="0">		<text/>	</cox>	<cox border="0" pai="46" son="68" width="0">		<text/>	</cox>	<cox border="0" pai="82" son="46" width="1">		<text/>	</cox>	<cox border="0" pai="180" son="46" width="1">		<text/>	</cox>	<cox border="0" pai="188" son="46" width="1">		<text/>	</cox>	<cox border="0" pai="83" son="46" width="1">		<text/>	</cox>	<cox border="0" pai="108" son="46" width="1">		<text/>	</cox>	<cox border="0" pai="275" son="46" width="1">		<text/>	</cox>	<cox border="0" pai="439" son="46" width="1">		<text/>	</cox>	<cox border="0" pai="46" son="462" width="0">		<text/>	</cox>	<cox border="0" pai="46" son="181" width="0">		<text/>		<nod x="184" y="158"/>		<nod x="184" y="150"/>	</cox>	<cox border="0" pai="46" son="182" width="0">		<text/>		<nod x="184" y="152"/>		<nod x="184" y="150"/>	</cox>	<cox border="0" pai="46" son="183" width="0">		<text/>		<nod x="184" y="155"/>		<nod x="184" y="150"/>	</cox>	<cox border="0" pai="47" son="201" width="0">		<text/>	</cox>	<cox border="0" pai="47" son="202" width="0">		<text/>	</cox>	<cox border="0" pai="526" son="47" width="0">		<text/>	</cox>	<cox border="0" pai="514" son="48" width="0">		<text/>	</cox>	<cox border="0" pai="547" son="49" width="0">		<text/>	</cox>	<cox border="0" pai="50" son="120" width="0">		<text/>	</cox>	<cox border="0" pai="50" son="122" width="0">		<text/>	</cox>	<cox border="0" pai="517" son="50" width="0">		<text/>	</cox>	<cox border="0" pai="52" son="53" width="1">		<text/>	</cox>	<cox border="0" pai="530" son="52" width="0">		<text/>	</cox>	<cox border="0" pai="425" son="53" width="1">		<text/>	</cox>	<cox border="0" pai="431" son="53" width="1">		<text/>	</cox>	<cox border="0" pai="437" son="53" width="1">		<text/>	</cox>	<cox border="0" pai="53" son="534" width="0">		<text/>	</cox>	<cox border="0" pai="53" son="535" width="0">		<text/>	</cox>	<cox border="0" pai="53" son="536" width="0">		<text/>	</cox>	<cox border="0" pai="53" son="419" width="0">		<text/>		<nod x="516" y="438"/>		<nod x="516" y="436"/>	</cox>	<cox border="0" pai="53" son="420" width="0">		<text/>		<nod x="516" y="441"/>		<nod x="516" y="436"/>	</cox>	<cox border="0" pai="53" son="418" width="0">		<text/>		<nod x="516" y="444"/>		<nod x="516" y="436"/>	</cox>	<cox border="0" pai="535" son="54" width="0">		<text/>	</cox>	<cox border="0" pai="534" son="55" width="0">		<text/>	</cox>	<cox border="0" pai="56" son="215" width="0">		<text/>	</cox>	<cox border="0" pai="56" son="216" width="0">		<text/>	</cox>	<cox border="0" pai="531" son="56" width="0">		<text/>	</cox>	<cox border="0" pai="542" son="57" width="0">		<text/>	</cox>	<cox border="0" pai="57" son="587" width="0">		<text/>	</cox>	<cox border="8" pai="57" son="588" width="0">		<text/>	</cox>	<cox border="0" pai="65" son="58" width="1">		<text/>	</cox>	<cox border="0" pai="119" son="58" width="1">		<text/>	</cox>	<cox border="0" pai="58" son="504" width="0">		<text/>	</cox>	<cox border="0" pai="58" son="505" width="0">		<text/>	</cox>	<cox border="0" pai="58" son="506" width="0">		<text/>	</cox>	<cox border="0" pai="848" son="58" width="1">		<text/>	</cox>	<cox border="0" pai="59" son="119" width="0">		<text/>	</cox>	<cox border="0" pai="518" son="59" width="0">		<text/>	</cox>	<cox border="0" pai="60" son="229" width="0">		<text/>	</cox>	<cox border="0" pai="60" son="230" width="0">		<text/>	</cox>	<cox border="0" pai="532" son="60" width="0">		<text/>	</cox>	<cox border="0" pai="504" son="61" width="0">		<text/>	</cox>	<cox border="0" pai="505" son="62" width="0">		<text/>	</cox>	<cox border="0" pai="63" son="64" width="1">		<text/>	</cox>	<cox border="0" pai="505" son="63" width="0">		<text/>	</cox>	<cox border="0" pai="64" son="508" width="0">		<text/>	</cox>	<cox border="0" pai="64" son="507" width="0">		<text/>	</cox>	<cox border="0" pai="64" son="509" width="0">		<text/>	</cox>	<cox border="0" pai="508" son="65" width="0">		<text/>	</cox>	<cox border="0" pai="507" son="66" width="0">		<text/>	</cox>	<cox border="0" pai="67" son="114" width="0">		<text/>	</cox>	<cox border="0" pai="67" son="195" width="0">		<text/>	</cox>	<cox border="0" pai="547" son="67" width="0">		<text/>	</cox>	<cox border="0" pai="72" son="69" width="1">		<text/>	</cox>	<cox border="0" pai="106" son="69" width="1">		<text/>	</cox>	<cox border="0" pai="69" son="466" width="0">		<text/>	</cox>	<cox border="0" pai="69" son="467" width="0">		<text/>	</cox>	<cox border="0" pai="69" son="468" width="0">		<text/>	</cox>	<cox border="0" pai="70" son="73" width="1">		<text/>	</cox>	<cox border="0" pai="468" son="70" width="0">		<text/>	</cox>	<cox border="0" pai="71" son="73" width="1">		<text/>	</cox>	<cox border="0" pai="468" son="71" width="0">		<text/>	</cox>	<cox border="0" pai="462" son="72" width="0">		<text/>	</cox>	<cox border="0" pai="77" son="73" width="1">		<text/>	</cox>	<cox border="0" pai="415" son="73" width="1">		<text/>	</cox>	<cox border="0" pai="421" son="73" width="1">		<text/>	</cox>	<cox border="0" pai="433" son="73" width="1">		<text/>	</cox>	<cox border="0" pai="73" son="471" width="0">		<text/>	</cox>	<cox border="0" pai="73" son="472" width="0">		<text/>	</cox>	<cox border="0" pai="73" son="473" width="0">		<text/>	</cox>	<cox border="0" pai="73" son="474" width="0">		<text/>	</cox>	<cox border="0" pai="73" son="428" width="0">		<text/>		<nod x="89" y="196"/>		<nod x="89" y="194"/>	</cox>	<cox border="0" pai="73" son="429" width="0">		<text/>		<nod x="89" y="199"/>		<nod x="89" y="194"/>	</cox>	<cox border="0" pai="73" son="427" width="0">		<text/>		<nod x="89" y="202"/>		<nod x="89" y="194"/>	</cox>	<cox border="0" pai="472" son="74" width="0">		<text/>	</cox>	<cox border="0" pai="75" son="76" width="1">		<text/>	</cox>	<cox border="0" pai="471" son="75" width="0">		<text/>	</cox>	<cox border="0" pai="418" son="76" width="1">		<text/>	</cox>	<cox border="0" pai="424" son="76" width="1">		<text/>	</cox>	<cox border="0" pai="436" son="76" width="1">		<text/>	</cox>	<cox border="0" pai="76" son="475" width="0">		<text/>	</cox>	<cox border="0" pai="76" son="476" width="0">		<text/>	</cox>	<cox border="0" pai="76" son="477" width="0">		<text/>	</cox>	<cox border="0" pai="76" son="430" width="0">		<text/>		<nod x="89" y="223"/>		<nod x="89" y="215"/>	</cox>	<cox border="0" pai="76" son="431" width="0">		<text/>		<nod x="89" y="217"/>		<nod x="89" y="215"/>	</cox>	<cox border="0" pai="76" son="432" width="0">		<text/>		<nod x="89" y="220"/>		<nod x="89" y="215"/>	</cox>	<cox border="0" pai="476" son="77" width="0">		<text/>	</cox>	<cox border="0" pai="472" son="78" width="0">		<text/>	</cox>	<cox border="0" pai="79" son="80" width="1">		<text/>	</cox>	<cox border="0" pai="462" son="79" width="0">		<text/>	</cox>	<cox border="0" pai="178" son="80" width="1">		<text/>	</cox>	<cox border="0" pai="175" son="80" width="1">		<text/>	</cox>	<cox border="0" pai="403" son="80" width="1">		<text/>	</cox>	<cox border="0" pai="406" son="80" width="1">		<text/>	</cox>	<cox border="0" pai="409" son="80" width="1">		<text/>	</cox>	<cox border="0" pai="80" son="463" width="0">		<text/>	</cox>	<cox border="0" pai="80" son="464" width="0">		<text/>	</cox>	<cox border="0" pai="80" son="465" width="0">		<text/>	</cox>	<cox border="0" pai="80" son="413" width="0">		<text/>		<nod x="184" y="168"/>		<nod x="184" y="166"/>	</cox>	<cox border="0" pai="80" son="414" width="0">		<text/>		<nod x="184" y="171"/>		<nod x="184" y="166"/>	</cox>	<cox border="0" pai="80" son="412" width="0">		<text/>		<nod x="184" y="174"/>		<nod x="184" y="166"/>	</cox>	<cox border="0" pai="465" son="81" width="0">		<text/>	</cox>	<cox border="0" pai="464" son="82" width="0">		<text/>	</cox>	<cox border="0" pai="467" son="83" width="0">		<text/>	</cox>	<cox border="0" pai="467" son="84" width="0">		<text/>	</cox>	<cox border="0" pai="519" son="85" width="0">		<text/>	</cox>	<cox border="0" pai="519" son="86" width="0">		<text/>	</cox>	<cox border="0" pai="519" son="87" width="0">		<text/>	</cox>	<cox border="0" pai="519" son="88" width="0">		<text/>	</cox>	<cox border="0" pai="519" son="89" width="0">		<text/>	</cox>	<cox border="0" pai="519" son="90" width="0">		<text/>	</cox>	<cox border="0" pai="519" son="91" width="0">		<text/>	</cox>	<cox border="0" pai="519" son="92" width="0">		<text/>	</cox>	<cox border="0" pai="93" son="231" width="0">		<text/>	</cox>	<cox border="0" pai="93" son="232" width="0">		<text/>	</cox>	<cox border="0" pai="532" son="93" width="0">		<text/>	</cox>	<cox border="0" pai="94" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="543" son="94" width="0">		<text/>	</cox>	<cox border="0" pai="550" son="95" width="0">		<text/>	</cox>	<cox border="0" pai="552" son="96" width="0">		<text/>	</cox>	<cox border="0" pai="97" son="98" width="1">		<text/>	</cox>	<cox border="0" pai="525" son="97" width="0">		<text/>	</cox>	<cox border="0" pai="98" son="528" width="0">		<text/>	</cox>	<cox border="0" pai="98" son="529" width="0">		<text/>	</cox>	<cox border="0" pai="529" son="99" width="0">		<text/>	</cox>	<cox border="0" pai="528" son="100" width="0">		<text/>	</cox>	<cox border="0" pai="115" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="153" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="174" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="177" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="187" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="218" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="226" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="236" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="176" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="239" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="258" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="358" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="361" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="366" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="372" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="376" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="244" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="407" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="411" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="412" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="432" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="459" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="172" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="173" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="170" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="171" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="101" son="522" width="0">		<text/>	</cox>	<cox border="0" pai="101" son="523" width="0">		<text/>	</cox>	<cox border="0" pai="586" son="101" width="1">		<text/>	</cox>	<cox border="0" pai="101" son="404" width="0">		<text/>		<nod x="283" y="235"/>		<nod x="283" y="233"/>	</cox>	<cox border="0" pai="101" son="405" width="0">		<text/>		<nod x="283" y="238"/>		<nod x="283" y="233"/>	</cox>	<cox border="0" pai="101" son="403" width="0">		<text/>		<nod x="283" y="241"/>		<nod x="283" y="233"/>	</cox>	<cox border="0" pai="543" son="102" width="0">		<text/>	</cox>	<cox border="8" pai="102" son="585" width="0">		<text/>	</cox>	<cox border="0" pai="102" son="586" width="0">		<text/>	</cox>	<cox border="0" pai="103" son="104" width="1">		<text/>	</cox>	<cox border="0" pai="466" son="103" width="0">		<text/>	</cox>	<cox border="0" pai="256" son="104" width="1">		<text/>	</cox>	<cox border="0" pai="104" son="469" width="0">		<text/>	</cox>	<cox border="0" pai="104" son="470" width="0">		<text/>	</cox>	<cox border="0" pai="470" son="105" width="0">		<text/>	</cox>	<cox border="0" pai="469" son="106" width="0">		<text/>	</cox>	<cox border="0" pai="473" son="107" width="0">		<text/>	</cox>	<cox border="0" pai="473" son="108" width="0">		<text/>	</cox>	<cox border="0" pai="109" son="252" width="0">		<text/>	</cox>	<cox border="0" pai="109" son="253" width="0">		<text/>	</cox>	<cox border="0" pai="230" son="110" width="0">		<text/>	</cox>	<cox border="0" pai="230" son="111" width="0">		<text/>	</cox>	<cox border="0" pai="232" son="112" width="0">		<text/>	</cox>	<cox border="0" pai="232" son="113" width="0">		<text/>	</cox>	<cox border="0" pai="549" son="115" width="0">		<text/>	</cox>	<cox border="0" pai="551" son="116" width="0">		<text/>	</cox>	<cox border="0" pai="553" son="117" width="0">		<text/>	</cox>	<cox border="0" pai="124" son="118" width="0">		<text/>	</cox>	<cox border="0" pai="126" son="118" width="0">		<text/>	</cox>	<cox border="0" pai="125" son="118" width="0">		<text/>		<nod x="546" y="307"/>	</cox>	<cox border="0" pai="120" son="121" width="0">		<text/>	</cox>	<cox border="0" pai="120" son="134" width="0">		<text/>	</cox>	<cox border="0" pai="121" son="133" width="1">		<text/>	</cox>	<cox border="0" pai="122" son="128" width="0">		<text/>	</cox>	<cox border="0" pai="122" son="129" width="0">		<text/>	</cox>	<cox border="0" pai="123" son="126" width="0">		<text/>	</cox>	<cox border="0" pai="123" son="127" width="0">		<text/>	</cox>	<cox border="0" pai="127" son="124" width="0">		<text/>	</cox>	<cox border="0" pai="127" son="125" width="0">		<text/>	</cox>	<cox border="0" pai="128" son="135" width="0">		<text/>	</cox>	<cox border="0" pai="128" son="136" width="0">		<text/>	</cox>	<cox border="0" pai="129" son="130" width="0">		<text/>	</cox>	<cox border="0" pai="129" son="131" width="0">		<text/>	</cox>	<cox border="0" pai="130" son="137" width="0">		<text/>	</cox>	<cox border="0" pai="130" son="138" width="0">		<text/>	</cox>	<cox border="0" pai="131" son="132" width="1">		<text/>	</cox>	<cox border="0" pai="138" son="132" width="1">		<text/>	</cox>	<cox border="0" pai="136" son="132" width="1">		<text/>	</cox>	<cox border="0" pai="134" son="132" width="1">		<text/>	</cox>	<cox border="0" pai="141" son="132" width="1">		<text/>	</cox>	<cox border="0" pai="132" son="478" width="0">		<text/>	</cox>	<cox border="0" pai="132" son="479" width="0">		<text/>	</cox>	<cox border="0" pai="132" son="480" width="0">		<text/>	</cox>	<cox border="0" pai="135" son="133" width="1">		<text/>	</cox>	<cox border="0" pai="137" son="133" width="1">		<text/>	</cox>	<cox border="0" pai="156" son="133" width="1">		<text/>	</cox>	<cox border="0" pai="133" son="490" width="0">		<text/>	</cox>	<cox border="0" pai="133" son="491" width="0">		<text/>	</cox>	<cox border="0" pai="133" son="492" width="0">		<text/>	</cox>	<cox border="0" pai="139" son="140" width="1">		<text/>	</cox>	<cox border="0" pai="478" son="139" width="0">		<text/>	</cox>	<cox border="0" pai="140" son="481" width="0">		<text/>	</cox>	<cox border="0" pai="140" son="482" width="0">		<text/>	</cox>	<cox border="0" pai="481" son="141" width="0">		<text/>	</cox>	<cox border="0" pai="482" son="142" width="0">		<text/>	</cox>	<cox border="0" pai="143" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="480" son="143" width="0">		<text/>	</cox>	<cox border="0" pai="144" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="480" son="144" width="0">		<text/>	</cox>	<cox border="0" pai="483" son="145" width="0">		<text/>	</cox>	<cox border="0" pai="152" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="209" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="213" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="384" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="383" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="416" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="423" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="447" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="461" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="146" son="483" width="0">		<text/>	</cox>	<cox border="0" pai="146" son="484" width="0">		<text/>	</cox>	<cox border="0" pai="146" son="485" width="0">		<text/>	</cox>	<cox border="0" pai="146" son="486" width="0">		<text/>	</cox>	<cox border="0" pai="146" son="434" width="0">		<text/>		<nod x="443" y="155"/>		<nod x="443" y="153"/>	</cox>	<cox border="0" pai="146" son="435" width="0">		<text/>		<nod x="443" y="158"/>		<nod x="443" y="153"/>	</cox>	<cox border="0" pai="146" son="433" width="0">		<text/>		<nod x="443" y="161"/>		<nod x="443" y="153"/>	</cox>	<cox border="0" pai="887" son="146" width="1">		<text/>	</cox>	<cox border="0" pai="485" son="147" width="0">		<text/>	</cox>	<cox border="0" pai="485" son="148" width="0">		<text/>	</cox>	<cox border="0" pai="149" son="150" width="1">		<text/>	</cox>	<cox border="0" pai="484" son="149" width="0">		<text/>	</cox>	<cox border="0" pai="419" son="150" width="1">		<text/>	</cox>	<cox border="0" pai="426" son="150" width="1">		<text/>	</cox>	<cox border="0" pai="450" son="150" width="1">		<text/>	</cox>	<cox border="0" pai="150" son="487" width="0">		<text/>	</cox>	<cox border="0" pai="150" son="488" width="0">		<text/>	</cox>	<cox border="0" pai="150" son="489" width="0">		<text/>	</cox>	<cox border="0" pai="150" son="436" width="0">		<text/>		<nod x="443" y="181"/>		<nod x="443" y="173"/>	</cox>	<cox border="0" pai="150" son="437" width="0">		<text/>		<nod x="443" y="175"/>		<nod x="443" y="173"/>	</cox>	<cox border="0" pai="150" son="438" width="0">		<text/>		<nod x="443" y="178"/>		<nod x="443" y="173"/>	</cox>	<cox border="0" pai="488" son="151" width="0">		<text/>	</cox>	<cox border="0" pai="487" son="152" width="0">		<text/>	</cox>	<cox border="0" pai="487" son="153" width="0">		<text/>	</cox>	<cox border="0" pai="154" son="155" width="1">		<text/>	</cox>	<cox border="0" pai="490" son="154" width="0">		<text/>	</cox>	<cox border="0" pai="155" son="493" width="0">		<text/>	</cox>	<cox border="0" pai="155" son="494" width="0">		<text/>	</cox>	<cox border="0" pai="493" son="156" width="0">		<text/>	</cox>	<cox border="0" pai="494" son="157" width="0">		<text/>	</cox>	<cox border="0" pai="158" son="159" width="1">		<text/>	</cox>	<cox border="0" pai="492" son="158" width="0">		<text/>	</cox>	<cox border="0" pai="165" son="159" width="1">		<text/>	</cox>	<cox border="0" pai="159" son="495" width="0">		<text/>	</cox>	<cox border="0" pai="159" son="497" width="0">		<text/>	</cox>	<cox border="0" pai="159" son="498" width="0">		<text/>	</cox>	<cox border="0" pai="896" son="159" width="0">		<text/>	</cox>	<cox border="0" pai="498" son="160" width="0">		<text/>	</cox>	<cox border="8" pai="495" son="161" width="0">		<text/>	</cox>	<cox border="0" pai="162" son="163" width="1">		<text/>	</cox>	<cox border="0" pai="497" son="162" width="0">		<text/>	</cox>	<cox border="0" pai="163" son="496" width="0">		<text/>	</cox>	<cox border="0" pai="163" son="499" width="0">		<text/>	</cox>	<cox border="0" pai="499" son="164" width="0">		<text/>	</cox>	<cox border="0" pai="496" son="165" width="0">		<text/>	</cox>	<cox border="0" pai="479" son="166" width="0">		<text/>	</cox>	<cox border="0" pai="491" son="167" width="0">		<text/>	</cox>	<cox border="0" pai="479" son="168" width="0">		<text/>	</cox>	<cox border="0" pai="491" son="169" width="0">		<text/>	</cox>	<cox border="0" pai="481" son="170" width="0">		<text/>	</cox>	<cox border="0" pai="481" son="171" width="0">		<text/>	</cox>	<cox border="0" pai="493" son="172" width="0">		<text/>	</cox>	<cox border="0" pai="493" son="173" width="0">		<text/>	</cox>	<cox border="0" pai="496" son="174" width="0">		<text/>	</cox>	<cox border="0" pai="469" son="175" width="0">		<text/>	</cox>	<cox border="0" pai="469" son="176" width="0">		<text/>	</cox>	<cox border="0" pai="476" son="177" width="0">		<text/>	</cox>	<cox border="0" pai="476" son="178" width="0">		<text/>	</cox>	<cox border="0" pai="475" son="179" width="0">		<text/>	</cox>	<cox border="0" pai="183" son="266" width="1">		<text/>	</cox>	<cox border="0" pai="185" son="266" width="1">		<text/>	</cox>	<cox border="0" pai="509" son="186" width="0">		<text/>	</cox>	<cox border="0" pai="508" son="187" width="0">		<text/>	</cox>	<cox border="0" pai="190" son="266" width="1">		<text/>	</cox>	<cox border="0" pai="191" son="209" width="0">		<text/>	</cox>	<cox border="0" pai="191" son="210" width="0">		<text/>	</cox>	<cox border="0" pai="527" son="191" width="0">		<text/>	</cox>	<cox border="0" pai="192" son="211" width="0">		<text/>	</cox>	<cox border="0" pai="192" son="212" width="0">		<text/>	</cox>	<cox border="0" pai="527" son="192" width="0">		<text/>	</cox>	<cox border="0" pai="193" son="204" width="0">		<text/>	</cox>	<cox border="0" pai="193" son="205" width="0">		<text/>	</cox>	<cox border="0" pai="526" son="193" width="0">		<text/>	</cox>	<cox border="0" pai="549" son="194" width="0">		<text/>	</cox>	<cox border="0" pai="197" son="254" width="0">		<text/>	</cox>	<cox border="0" pai="197" son="255" width="0">		<text/>	</cox>	<cox border="0" pai="198" son="199" width="0">		<text/>	</cox>	<cox border="0" pai="198" son="200" width="0">		<text/>	</cox>	<cox border="0" pai="538" son="198" width="0">		<text/>	</cox>	<cox border="0" pai="200" son="262" width="0">		<text/>	</cox>	<cox border="0" pai="200" son="263" width="0">		<text/>	</cox>	<cox border="0" pai="201" son="203" width="0">		<text/>	</cox>	<cox border="0" pai="202" son="203" width="0">		<text/>	</cox>	<cox border="0" pai="206" son="447" width="0">		<text/>	</cox>	<cox border="0" pai="206" son="448" width="0">		<text/>	</cox>	<cox border="0" pai="533" son="206" width="0">		<text/>	</cox>	<cox border="0" pai="208" son="583" width="0">		<text/>	</cox>	<cox border="0" pai="208" son="584" width="0">		<text/>	</cox>	<cox border="0" pai="217" son="218" width="0">		<text/>	</cox>	<cox border="0" pai="217" son="257" width="0">		<text/>	</cox>	<cox border="0" pai="540" son="217" width="0">		<text/>	</cox>	<cox border="0" pai="219" son="220" width="0">		<text/>	</cox>	<cox border="0" pai="219" son="221" width="0">		<text/>	</cox>	<cox border="0" pai="540" son="219" width="0">		<text/>	</cox>	<cox border="0" pai="221" son="264" width="0">		<text/>	</cox>	<cox border="0" pai="221" son="265" width="0">		<text/>	</cox>	<cox border="0" pai="222" son="224" width="0">		<text/>	</cox>	<cox border="0" pai="222" son="225" width="0">		<text/>	</cox>	<cox border="0" pai="528" son="222" width="0">		<text/>	</cox>	<cox border="0" pai="223" son="227" width="0">		<text/>	</cox>	<cox border="0" pai="223" son="228" width="0">		<text/>	</cox>	<cox border="0" pai="528" son="223" width="0">		<text/>	</cox>	<cox border="0" pai="224" son="226" width="0">		<text/>	</cox>	<cox border="0" pai="225" son="226" width="0">		<text/>	</cox>	<cox border="0" pai="233" son="239" width="0">		<text/>	</cox>	<cox border="0" pai="233" son="240" width="0">		<text/>	</cox>	<cox border="0" pai="534" son="233" width="0">		<text/>	</cox>	<cox border="0" pai="234" son="241" width="0">		<text/>	</cox>	<cox border="0" pai="234" son="242" width="0">		<text/>	</cox>	<cox border="0" pai="534" son="234" width="0">		<text/>	</cox>	<cox border="0" pai="240" son="235" width="0">		<text/>	</cox>	<cox border="0" pai="240" son="236" width="0">		<text/>	</cox>	<cox border="0" pai="242" son="237" width="0">		<text/>	</cox>	<cox border="0" pai="242" son="238" width="0">		<text/>	</cox>	<cox border="0" pai="247" son="243" width="1">		<text/>	</cox>	<cox border="0" pai="249" son="243" width="1">		<text/>	</cox>	<cox border="0" pai="243" son="520" width="0">		<text/>	</cox>	<cox border="0" pai="243" son="521" width="0">		<text/>	</cox>	<cox border="0" pai="521" son="244" width="0">		<text/>	</cox>	<cox border="0" pai="245" son="246" width="1">		<text/>	</cox>	<cox border="0" pai="520" son="245" width="0">		<text/>	</cox>	<cox border="0" pai="246" son="524" width="0">		<text/>	</cox>	<cox border="0" pai="246" son="440" width="0">		<text/>		<nod x="328" y="235"/>		<nod x="328" y="233"/>	</cox>	<cox border="0" pai="246" son="439" width="0">		<text/>		<nod x="328" y="241"/>		<nod x="328" y="233"/>	</cox>	<cox border="0" pai="246" son="441" width="0">		<text/>		<nod x="328" y="238"/>		<nod x="328" y="233"/>	</cox>	<cox border="0" pai="517" son="247" width="0">		<text/>	</cox>	<cox border="0" pai="522" son="248" width="0">		<text/>	</cox>	<cox border="0" pai="524" son="249" width="0">		<text/>	</cox>	<cox border="0" pai="524" son="250" width="0">		<text/>	</cox>	<cox border="0" pai="524" son="251" width="0">		<text/>	</cox>	<cox border="0" pai="463" son="256" width="0">		<text/>	</cox>	<cox border="0" pai="257" son="258" width="0">		<text/>	</cox>	<cox border="0" pai="257" son="259" width="0">		<text/>	</cox>	<cox border="0" pai="548" son="260" width="0">		<text/>	</cox>	<cox border="0" pai="486" son="261" width="0">		<text/>	</cox>	<cox border="0" pai="270" son="266" width="1">		<text/>	</cox>	<cox border="0" pai="266" son="271" width="0">		<text/>	</cox>	<cox border="0" pai="300" son="266" width="1">		<text/>	</cox>	<cox border="0" pai="345" son="266" width="1">		<text/>	</cox>	<cox border="0" pai="441" son="266" width="1">		<text/>	</cox>	<cox border="0" pai="266" son="555" width="0">		<text/>	</cox>	<cox border="0" pai="266" son="276" width="0">		<text/>		<nod x="126" y="356"/>		<nod x="126" y="354"/>	</cox>	<cox border="0" pai="266" son="277" width="0">		<text/>		<nod x="126" y="359"/>		<nod x="126" y="354"/>	</cox>	<cox border="0" pai="266" son="275" width="0">		<text/>		<nod x="126" y="362"/>		<nod x="126" y="354"/>	</cox>	<cox border="0" pai="267" son="268" width="1">		<text/>	</cox>	<cox border="0" pai="555" son="267" width="0">		<text/>	</cox>	<cox border="0" pai="369" son="268" width="1">		<text/>	</cox>	<cox border="0" pai="381" son="268" width="1">		<text/>	</cox>	<cox border="0" pai="405" son="268" width="1">		<text/>	</cox>	<cox border="0" pai="408" son="268" width="1">		<text/>	</cox>	<cox border="0" pai="414" son="268" width="1">		<text/>	</cox>	<cox border="0" pai="268" son="556" width="0">		<text/>	</cox>	<cox border="0" pai="268" son="557" width="0">		<text/>	</cox>	<cox border="0" pai="268" son="410" width="0">		<text/>		<nod x="126" y="373"/>		<nod x="126" y="371"/>	</cox>	<cox border="0" pai="268" son="411" width="0">		<text/>		<nod x="126" y="376"/>		<nod x="126" y="371"/>	</cox>	<cox border="0" pai="268" son="409" width="0">		<text/>		<nod x="126" y="379"/>		<nod x="126" y="371"/>	</cox>	<cox border="0" pai="556" son="269" width="0">		<text/>	</cox>	<cox border="0" pai="557" son="270" width="0">		<text/>	</cox>	<cox border="0" pai="273" son="272" width="0">		<text/>	</cox>	<cox border="0" pai="272" son="278" width="1">		<text/>	</cox>	<cox border="0" pai="273" son="274" width="0">		<text/>	</cox>	<cox border="0" pai="555" son="273" width="0">		<text/>	</cox>	<cox border="0" pai="274" son="286" width="1">		<text/>	</cox>	<cox border="0" pai="281" son="278" width="1">		<text/>	</cox>	<cox border="0" pai="326" son="278" width="1">		<text/>	</cox>	<cox border="0" pai="278" son="570" width="0">		<text/>	</cox>	<cox border="0" pai="278" son="580" width="0">		<text/>	</cox>	<cox border="0" pai="278" son="575" width="0">		<text/>	</cox>	<cox border="0" pai="279" son="280" width="1">		<text/>	</cox>	<cox border="0" pai="580" son="279" width="0">		<text/>	</cox>	<cox border="0" pai="280" son="578" width="0">		<text/>	</cox>	<cox border="0" pai="280" son="571" width="0">		<text/>	</cox>	<cox border="0" pai="571" son="281" width="0">		<text/>	</cox>	<cox border="0" pai="282" son="322" width="1">		<text/>	</cox>	<cox border="0" pai="575" son="282" width="0">		<text/>	</cox>	<cox border="0" pai="283" son="309" width="0">		<text/>	</cox>	<cox border="0" pai="283" son="310" width="0">		<text/>	</cox>	<cox border="0" pai="570" son="283" width="0">		<text/>	</cox>	<cox border="0" pai="284" son="307" width="0">		<text/>	</cox>	<cox border="0" pai="284" son="308" width="0">		<text/>	</cox>	<cox border="0" pai="570" son="284" width="0">		<text/>	</cox>	<cox border="0" pai="578" son="285" width="0">		<text/>	</cox>	<cox border="0" pai="298" son="286" width="1">		<text/>	</cox>	<cox border="0" pai="328" son="286" width="1">		<text/>	</cox>	<cox border="0" pai="286" son="558" width="0">		<text/>	</cox>	<cox border="0" pai="286" son="559" width="0">		<text/>	</cox>	<cox border="0" pai="286" son="560" width="0">		<text/>	</cox>	<cox border="0" pai="287" son="330" width="0">		<text/>	</cox>	<cox border="0" pai="287" son="331" width="0">		<text/>	</cox>	<cox border="0" pai="560" son="287" width="0">		<text/>	</cox>	<cox border="0" pai="292" son="288" width="1">		<text/>	</cox>	<cox border="0" pai="348" son="288" width="1">		<text/>	</cox>	<cox border="0" pai="349" son="288" width="1">		<text/>	</cox>	<cox border="0" pai="417" son="288" width="1">		<text/>	</cox>	<cox border="0" pai="429" son="288" width="1">		<text/>	</cox>	<cox border="0" pai="435" son="288" width="1">		<text/>	</cox>	<cox border="0" pai="288" son="563" width="0">		<text/>	</cox>	<cox border="0" pai="288" son="565" width="0">		<text/>	</cox>	<cox border="0" pai="288" son="566" width="0">		<text/>	</cox>	<cox border="0" pai="288" son="569" width="0">		<text/>	</cox>	<cox border="0" pai="288" son="422" width="0">		<text/>		<nod x="50" y="412"/>		<nod x="50" y="410"/>	</cox>	<cox border="0" pai="288" son="423" width="0">		<text/>		<nod x="50" y="415"/>		<nod x="50" y="410"/>	</cox>	<cox border="0" pai="288" son="421" width="0">		<text/>		<nod x="50" y="418"/>		<nod x="50" y="410"/>	</cox>	<cox border="0" pai="289" son="332" width="0">		<text/>	</cox>	<cox border="0" pai="289" son="333" width="0">		<text/>	</cox>	<cox border="0" pai="560" son="289" width="0">		<text/>	</cox>	<cox border="0" pai="290" son="291" width="1">		<text/>	</cox>	<cox border="0" pai="563" son="290" width="0">		<text/>	</cox>	<cox border="0" pai="420" son="291" width="1">		<text/>	</cox>	<cox border="0" pai="432" son="291" width="1">		<text/>	</cox>	<cox border="0" pai="438" son="291" width="1">		<text/>	</cox>	<cox border="0" pai="291" son="564" width="0">		<text/>	</cox>	<cox border="0" pai="291" son="567" width="0">		<text/>	</cox>	<cox border="0" pai="291" son="568" width="0">		<text/>	</cox>	<cox border="0" pai="291" son="425" width="0">		<text/>		<nod x="50" y="443"/>		<nod x="50" y="441"/>	</cox>	<cox border="0" pai="291" son="426" width="0">		<text/>		<nod x="50" y="446"/>		<nod x="50" y="441"/>	</cox>	<cox border="0" pai="291" son="424" width="0">		<text/>		<nod x="50" y="449"/>		<nod x="50" y="441"/>	</cox>	<cox border="0" pai="564" son="292" width="0">		<text/>	</cox>	<cox border="0" pai="293" son="295" width="0">		<text/>	</cox>	<cox border="0" pai="559" son="293" width="0">		<text/>	</cox>	<cox border="0" pai="294" son="304" width="0">		<text/>	</cox>	<cox border="0" pai="294" son="305" width="0">		<text/>	</cox>	<cox border="0" pai="565" son="294" width="0">		<text/>	</cox>	<cox border="0" pai="295" son="299" width="0">		<text/>	</cox>	<cox border="0" pai="295" son="300" width="0">		<text/>	</cox>	<cox border="0" pai="559" son="295" width="0">		<text/>	</cox>	<cox border="0" pai="296" son="297" width="1">		<text/>	</cox>	<cox border="0" pai="558" son="296" width="0">		<text/>	</cox>	<cox border="0" pai="297" son="561" width="0">		<text/>	</cox>	<cox border="0" pai="297" son="562" width="0">		<text/>	</cox>	<cox border="0" pai="562" son="298" width="0">		<text/>	</cox>	<cox border="0" pai="299" son="311" width="1">		<text/>	</cox>	<cox border="0" pai="303" son="301" width="0">		<text/>	</cox>	<cox border="0" pai="301" son="340" width="0">		<text/>	</cox>	<cox border="0" pai="301" son="341" width="0">		<text/>	</cox>	<cox border="0" pai="303" son="302" width="0">		<text/>	</cox>	<cox border="0" pai="565" son="303" width="0">		<text/>	</cox>	<cox border="0" pai="304" son="342" width="0">		<text/>	</cox>	<cox border="0" pai="304" son="343" width="0">		<text/>	</cox>	<cox border="0" pai="305" son="344" width="0">		<text/>	</cox>	<cox border="0" pai="305" son="345" width="0">		<text/>	</cox>	<cox border="0" pai="561" son="306" width="0">		<text/>	</cox>	<cox border="0" pai="308" son="311" width="1">		<text/>	</cox>	<cox border="0" pai="309" son="350" width="0">		<text/>	</cox>	<cox border="0" pai="310" son="350" width="0">		<text/>	</cox>	<cox border="0" pai="315" son="311" width="1">		<text/>	</cox>	<cox border="0" pai="319" son="311" width="1">		<text/>	</cox>	<cox border="0" pai="341" son="311" width="1">		<text/>	</cox>	<cox border="0" pai="344" son="311" width="1">		<text/>	</cox>	<cox border="0" pai="347" son="311" width="1">		<text/>	</cox>	<cox border="0" pai="350" son="311" width="1">		<text/>	</cox>	<cox border="0" pai="311" son="581" width="0">		<text/>	</cox>	<cox border="0" pai="311" son="329" width="0">		<text/>	</cox>	<cox border="0" pai="771" son="311" width="1">		<text/>	</cox>	<cox border="0" pai="868" son="311" width="1">		<text/>	</cox>	<cox border="0" pai="312" son="313" width="1">		<text/>	</cox>	<cox border="0" pai="581" son="312" width="0">		<text/>	</cox>	<cox border="0" pai="355" son="313" width="1">		<text/>	</cox>	<cox border="0" pai="365" son="313" width="1">		<text/>	</cox>	<cox border="0" pai="362" son="313" width="1">		<text/>	</cox>	<cox border="0" pai="368" son="313" width="1">		<text/>	</cox>	<cox border="0" pai="380" son="313" width="1">		<text/>	</cox>	<cox border="0" pai="382" son="313" width="1">		<text/>	</cox>	<cox border="0" pai="377" son="313" width="1">		<text/>	</cox>	<cox border="0" pai="313" son="582" width="0">		<text/>	</cox>	<cox border="0" pai="313" son="574" width="0">		<text/>	</cox>	<cox border="0" pai="574" son="314" width="0">		<text/>	</cox>	<cox border="0" pai="582" son="315" width="0">		<text/>	</cox>	<cox border="0" pai="577" son="316" width="0">		<text/>	</cox>	<cox border="0" pai="317" son="318" width="0">		<text/>	</cox>	<cox border="0" pai="317" son="319" width="0">		<text/>	</cox>	<cox border="0" pai="573" son="317" width="0">		<text/>	</cox>	<cox border="0" pai="318" son="319" width="0">		<text/>	</cox>	<cox border="0" pai="320" son="321" width="0">		<text/>	</cox>	<cox border="0" pai="573" son="320" width="0">		<text/>	</cox>	<cox border="0" pai="320" son="351" width="0">		<text/>	</cox>	<cox border="0" pai="321" son="351" width="0">		<text/>	</cox>	<cox border="0" pai="325" son="322" width="1">		<text/>	</cox>	<cox border="0" pai="322" son="577" width="0">		<text/>	</cox>	<cox border="0" pai="322" son="579" width="0">		<text/>	</cox>	<cox border="0" pai="322" son="573" width="0">		<text/>	</cox>	<cox border="0" pai="323" son="324" width="1">		<text/>	</cox>	<cox border="0" pai="579" son="323" width="0">		<text/>	</cox>	<cox border="0" pai="324" son="576" width="0">		<text/>	</cox>	<cox border="0" pai="324" son="572" width="0">		<text/>	</cox>	<cox border="0" pai="572" son="325" width="0">		<text/>	</cox>	<cox border="0" pai="327" son="326" width="0">		<text/>	</cox>	<cox border="0" pai="327" son="328" width="0">		<text/>	</cox>	<cox border="0" pai="581" son="327" width="0">		<text/>	</cox>	<cox border="0" pai="330" son="348" width="0">		<text/>	</cox>	<cox border="0" pai="331" son="348" width="0">		<text/>	</cox>	<cox border="0" pai="332" son="349" width="0">		<text/>	</cox>	<cox border="0" pai="333" son="349" width="0">		<text/>	</cox>	<cox border="0" pai="334" son="336" width="0">		<text/>	</cox>	<cox border="0" pai="334" son="337" width="0">		<text/>	</cox>	<cox border="0" pai="566" son="334" width="0">		<text/>	</cox>	<cox border="0" pai="335" son="338" width="0">		<text/>	</cox>	<cox border="0" pai="335" son="339" width="0">		<text/>	</cox>	<cox border="0" pai="566" son="335" width="0">		<text/>	</cox>	<cox border="0" pai="342" son="347" width="0">		<text/>	</cox>	<cox border="0" pai="343" son="347" width="0">		<text/>	</cox>	<cox border="0" pai="567" son="346" width="0">		<text/>	</cox>	<cox border="0" pai="576" son="352" width="0">		<text/>	</cox>	<cox border="0" pai="353" son="354" width="0">		<text/>	</cox>	<cox border="0" pai="353" son="355" width="0">		<text/>	</cox>	<cox border="0" pai="572" son="353" width="0">		<text/>	</cox>	<cox border="0" pai="354" son="355" width="0">		<text/>	</cox>	<cox border="0" pai="356" son="357" width="0">		<text/>	</cox>	<cox border="0" pai="572" son="356" width="0">		<text/>	</cox>	<cox border="0" pai="356" son="358" width="0">		<text/>	</cox>	<cox border="0" pai="357" son="358" width="0">		<text/>	</cox>	<cox border="0" pai="359" son="363" width="0">		<text/>	</cox>	<cox border="0" pai="359" son="364" width="0">		<text/>	</cox>	<cox border="0" pai="571" son="359" width="0">		<text/>	</cox>	<cox border="0" pai="360" son="361" width="0">		<text/>	</cox>	<cox border="0" pai="360" son="362" width="0">		<text/>	</cox>	<cox border="0" pai="571" son="360" width="0">		<text/>	</cox>	<cox border="0" pai="363" son="365" width="0">		<text/>	</cox>	<cox border="0" pai="364" son="365" width="0">		<text/>	</cox>	<cox border="0" pai="562" son="366" width="0">		<text/>	</cox>	<cox border="0" pai="367" son="368" width="0">		<text/>	</cox>	<cox border="0" pai="367" son="369" width="0">		<text/>	</cox>	<cox border="0" pai="562" son="367" width="0">		<text/>	</cox>	<cox border="0" pai="370" son="374" width="0">		<text/>	</cox>	<cox border="0" pai="370" son="375" width="0">		<text/>	</cox>	<cox border="0" pai="564" son="370" width="0">		<text/>	</cox>	<cox border="0" pai="373" son="371" width="0">		<text/>	</cox>	<cox border="0" pai="371" son="376" width="0">		<text/>	</cox>	<cox border="0" pai="371" son="377" width="0">		<text/>	</cox>	<cox border="0" pai="373" son="372" width="0">		<text/>	</cox>	<cox border="0" pai="564" son="373" width="0">		<text/>	</cox>	<cox border="0" pai="374" son="378" width="0">		<text/>	</cox>	<cox border="0" pai="374" son="379" width="0">		<text/>	</cox>	<cox border="0" pai="375" son="380" width="0">		<text/>	</cox>	<cox border="0" pai="375" son="381" width="0">		<text/>	</cox>	<cox border="0" pai="378" son="382" width="0">		<text/>	</cox>	<cox border="0" pai="379" son="382" width="0">		<text/>	</cox>	<cox border="0" pai="506" son="383" width="0">		<text/>	</cox>	<cox border="0" pai="506" son="384" width="0">		<text/>	</cox>	<cox border="0" pai="546" son="385" width="0">		<text/>	</cox>	<cox border="0" pai="525" son="386" width="0">		<text/>	</cox>	<cox border="0" pai="530" son="387" width="0">		<text/>	</cox>	<cox border="0" pai="537" son="388" width="0">		<text/>	</cox>	<cox border="0" pai="462" son="389" width="0">		<text/>	</cox>	<cox border="0" pai="466" son="390" width="0">		<text/>	</cox>	<cox border="0" pai="471" son="391" width="0">		<text/>	</cox>	<cox border="0" pai="484" son="392" width="0">		<text/>	</cox>	<cox border="0" pai="490" son="393" width="0">		<text/>	</cox>	<cox border="0" pai="478" son="394" width="0">		<text/>	</cox>	<cox border="0" pai="497" son="395" width="0">		<text/>	</cox>	<cox border="0" pai="555" son="396" width="0">		<text/>	</cox>	<cox border="0" pai="558" son="397" width="0">		<text/>	</cox>	<cox border="0" pai="563" son="398" width="0">		<text/>	</cox>	<cox border="0" pai="580" son="399" width="0">		<text/>	</cox>	<cox border="0" pai="579" son="400" width="0">		<text/>	</cox>	<cox border="0" pai="581" son="401" width="0">		<text/>	</cox>	<cox border="0" pai="505" son="402" width="0">		<text/>	</cox>	<cox border="0" pai="489" son="442" width="0">		<text/>	</cox>	<cox border="0" pai="477" son="443" width="0">		<text/>	</cox>	<cox border="0" pai="474" son="444" width="0">		<text/>	</cox>	<cox border="0" pai="568" son="445" width="0">		<text/>	</cox>	<cox border="0" pai="569" son="446" width="0">		<text/>	</cox>	<cox border="0" pai="449" son="450" width="0">		<text/>	</cox>	<cox border="0" pai="449" son="451" width="0">		<text/>	</cox>	<cox border="0" pai="536" son="449" width="0">		<text/>	</cox>	<cox border="0" pai="452" son="453" width="0">		<text/>	</cox>	<cox border="0" pai="458" son="452" width="1">		<text/>	</cox>	<cox border="0" pai="452" son="500" width="0">		<text/>	</cox>	<cox border="0" pai="859" son="452" width="1">		<text/>	</cox>	<cox border="0" pai="500" son="454" width="0">		<text/>	</cox>	<cox border="0" pai="455" son="456" width="1">		<text/>	</cox>	<cox border="0" pai="500" son="455" width="0">		<text/>	</cox>	<cox border="0" pai="456" son="501" width="0">		<text/>	</cox>	<cox border="0" pai="456" son="502" width="0">		<text/>	</cox>	<cox border="0" pai="456" son="503" width="0">		<text/>	</cox>	<cox border="0" pai="503" son="457" width="0">		<text/>	</cox>	<cox border="0" pai="502" son="458" width="0">		<text/>	</cox>	<cox border="0" pai="501" son="459" width="0">		<text/>	</cox>	<cox border="0" pai="500" son="460" width="0">		<text/>	</cox>	<cox border="0" pai="492" son="461" width="0">		<text/>	</cox>	<cox border="0" pai="480" son="896" width="0">		<text/>	</cox>	<cox border="0" pai="501" son="875" width="0">		<text/>	</cox>	<cox border="0" pai="590" son="589" width="2">		<text/>	</cox>	<cox border="0" pai="589" son="899" width="0">		<text/>	</cox>	<cox border="0" pai="600" son="590" width="2">		<text/>	</cox>	<cox border="0" pai="590" son="591" width="2">		<text/>	</cox>	<cox border="0" pai="590" son="592" width="2">		<text/>	</cox>	<cox border="0" pai="590" son="897" width="2">		<text/>	</cox>	<cox border="0" pai="591" son="599" width="2">		<text/>	</cox>	<cox border="0" pai="591" son="593" width="2">		<text/>	</cox>	<cox border="0" pai="591" son="901" width="2">		<text/>	</cox>	<cox border="0" pai="591" son="904" width="2">		<text/>	</cox>	<cox border="0" pai="592" son="596" width="2">		<text/>		<nod x="346" y="-52"/>	</cox>	<cox border="0" pai="592" son="594" width="2">		<text/>	</cox>	<cox border="0" pai="592" son="597" width="2">		<text/>		<nod x="346" y="-52"/>	</cox>	<cox border="2" pai="593" son="609" width="0">		<text/>		<nod x="318" y="-35"/>	</cox>	<cox border="2" pai="593" son="598" width="0">		<text/>		<nod x="324" y="-45"/>	</cox>	<cox border="2" pai="593" son="599" width="0">		<text/>		<nod x="304" y="-38"/>		<nod x="315" y="-38"/>	</cox>	<cox border="1" pai="593" son="594" width="0">		<text/>		<nod x="336" y="-48"/>		<nod x="324" y="-48"/>	</cox>	<cox border="1" pai="593" son="596" width="0">		<text/>		<nod x="336" y="-47"/>		<nod x="324" y="-47"/>	</cox>	<cox border="1" pai="593" son="597" width="0">		<text/>		<nod x="336" y="-46"/>		<nod x="324" y="-46"/>	</cox>	<cox border="2" pai="593" son="595" width="0">		<text/>		<nod x="313" y="-42"/>	</cox>	<cox border="0" pai="593" son="702" width="0">		<text/>	</cox>	<cox border="3" pai="664" son="594" width="0">		<text/>		<nod x="346" y="-55"/>	</cox>	<cox border="0" pai="904" son="595" width="2">		<text/>	</cox>	<cox border="2" pai="595" son="905" width="0">		<text/>	</cox>	<cox border="3" pai="665" son="596" width="0">		<text/>		<nod x="348" y="-47"/>		<nod x="358" y="-79"/>	</cox>	<cox border="3" pai="665" son="597" width="0">		<text/>		<nod x="349" y="-46"/>		<nod x="359" y="-78"/>	</cox>	<cox border="0" pai="901" son="598" width="2">		<text/>	</cox>	<cox border="0" pai="599" son="686" width="0">		<text/>		<nod x="304" y="-28"/>	</cox>	<cox border="0" pai="599" son="687" width="0">		<text/>		<nod x="304" y="-28"/>	</cox>	<cox border="0" pai="599" son="688" width="0">		<text/>	</cox>	<cox border="0" pai="599" son="689" width="0">		<text/>		<nod x="298" y="-30"/>		<nod x="298" y="-32"/>	</cox>	<cox border="0" pai="599" son="691" width="0">		<text/>		<nod x="298" y="-28"/>		<nod x="298" y="-32"/>	</cox>	<cox border="0" pai="599" son="692" width="0">		<text/>		<nod x="298" y="-26"/>		<nod x="298" y="-32"/>	</cox>	<cox border="0" pai="599" son="693" width="0">		<text/>		<nod x="298" y="-24"/>		<nod x="298" y="-32"/>	</cox>	<cox border="0" pai="600" son="601" width="2">		<text/>	</cox>	<cox border="0" pai="600" son="662" width="2">		<text/>	</cox>	<cox border="0" pai="601" son="605" width="2">		<text/>	</cox>	<cox border="0" pai="601" son="603" width="2">		<text/>	</cox>	<cox border="0" pai="601" son="602" width="2">		<text/>	</cox>	<cox border="1" pai="602" son="603" width="0">		<text/>	</cox>	<cox border="3" pai="663" son="602" width="0">		<text/>	</cox>	<cox border="3" pai="603" son="609" width="0">		<text/>	</cox>	<cox border="0" pai="605" son="604" width="2">		<text/>	</cox>	<cox border="0" pai="605" son="610" width="2">		<text/>		<nod x="405" y="-41"/>	</cox>	<cox border="0" pai="605" son="633" width="2">		<text/>		<nod x="435" y="-39"/>	</cox>	<cox border="0" pai="605" son="611" width="2">		<text/>	</cox>	<cox border="0" pai="605" son="635" width="2">		<text/>		<nod x="435" y="-39"/>	</cox>	<cox border="0" pai="605" son="634" width="2">		<text/>		<nod x="435" y="-39"/>	</cox>	<cox border="0" pai="605" son="632" width="2">		<text/>		<nod x="435" y="-39"/>	</cox>	<cox border="0" pai="605" son="606" width="2">		<text/>	</cox>	<cox border="0" pai="605" son="608" width="2">		<text/>		<nod x="432" y="-54"/>	</cox>	<cox border="0" pai="605" son="609" width="2">		<text/>		<nod x="405" y="-41"/>	</cox>	<cox border="0" pai="605" son="631" width="2">		<text/>	</cox>	<cox border="0" pai="605" son="613" width="2">		<text/>	</cox>	<cox border="0" pai="605" son="624" width="2">		<text/>	</cox>	<cox border="0" pai="605" son="636" width="2">		<text/>	</cox>	<cox border="0" pai="605" son="607" width="2">		<text/>		<nod x="432" y="-54"/>	</cox>	<cox border="1" pai="609" son="606" width="0">		<text/>	</cox>	<cox border="2" pai="609" son="607" width="0">		<text/>	</cox>	<cox border="0" pai="607" son="833" width="0">		<text/>	</cox>	<cox border="2" pai="609" son="608" width="0">		<text/>	</cox>	<cox border="0" pai="608" son="684" width="0">		<text/>	</cox>	<cox border="0" pai="608" son="834" width="0">		<text/>	</cox>	<cox border="2" pai="609" son="610" width="0">		<text/>	</cox>	<cox border="1" pai="609" son="611" width="0">		<text/>	</cox>	<cox border="2" pai="609" son="626" width="0">		<text/>		<nod x="375" y="-34"/>		<nod x="391" y="-34"/>	</cox>	<cox border="2" pai="609" son="637" width="0">		<text/>		<nod x="463" y="-28"/>		<nod x="408" y="-28"/>	</cox>	<cox border="2" pai="609" son="612" width="0">		<text/>		<nod x="376" y="-33"/>		<nod x="390" y="-33"/>	</cox>	<cox border="2" pai="609" son="628" width="0">		<text/>		<nod x="447" y="-27"/>		<nod x="407" y="-27"/>	</cox>	<cox border="0" pai="609" son="675" width="0">		<text/>	</cox>	<cox border="0" pai="609" son="683" width="0">		<text/>	</cox>	<cox border="0" pai="610" son="700" width="0">		<text/>	</cox>	<cox border="0" pai="610" son="701" width="0">		<text/>	</cox>	<cox border="0" pai="610" son="835" width="0">		<text/>		<nod x="307" y="-10"/>		<nod x="371" y="-42"/>		<nod x="400" y="-42"/>	</cox>	<cox border="0" pai="610" son="842" width="0">		<text/>		<nod x="306" y="-11"/>		<nod x="371" y="-43"/>		<nod x="401" y="-43"/>	</cox>	<cox border="2" pai="611" son="628" width="0">		<text/>		<nod x="446" y="-26"/>		<nod x="391" y="-26"/>	</cox>	<cox border="0" pai="613" son="612" width="2">		<text/>	</cox>	<cox border="1" pai="612" son="614" width="0">		<text/>	</cox>	<cox border="1" pai="612" son="615" width="0">		<text/>	</cox>	<cox border="0" pai="613" son="622" width="2">		<text/>		<nod x="383" y="-5"/>		<nod x="377" y="-8"/>	</cox>	<cox border="0" pai="613" son="621" width="2">		<text/>		<nod x="383" y="-5"/>		<nod x="377" y="-8"/>	</cox>	<cox border="0" pai="613" son="623" width="2">		<text/>		<nod x="383" y="-5"/>		<nod x="377" y="-8"/>	</cox>	<cox border="0" pai="613" son="620" width="2">		<text/>		<nod x="383" y="-5"/>		<nod x="377" y="-8"/>	</cox>	<cox border="0" pai="613" son="615" width="2">		<text/>	</cox>	<cox border="0" pai="613" son="617" width="2">		<text/>		<nod x="377" y="-18"/>	</cox>	<cox border="0" pai="613" son="614" width="2">		<text/>	</cox>	<cox border="0" pai="613" son="618" width="2">		<text/>		<nod x="377" y="9"/>	</cox>	<cox border="0" pai="613" son="619" width="2">		<text/>		<nod x="387" y="9"/>		<nod x="377" y="4"/>	</cox>	<cox border="0" pai="613" son="616" width="2">		<text/>		<nod x="387" y="9"/>		<nod x="377" y="4"/>	</cox>	<cox border="0" pai="614" son="697" width="0">		<text/>	</cox>	<cox border="3" pai="614" son="621" width="0">		<text/>		<nod x="387" y="-13"/>		<nod x="381" y="-10"/>	</cox>	<cox border="3" pai="614" son="623" width="0">		<text/>		<nod x="387" y="2"/>		<nod x="382" y="0"/>	</cox>	<cox border="3" pai="614" son="620" width="0">		<text/>		<nod x="389" y="-8"/>		<nod x="382" y="-9"/>	</cox>	<cox border="3" pai="614" son="622" width="0">		<text/>		<nod x="389" y="-3"/>		<nod x="383" y="-1"/>	</cox>	<cox border="3" pai="614" son="617" width="0">		<text/>		<nod x="387" y="-17"/>		<nod x="380" y="-11"/>	</cox>	<cox border="3" pai="614" son="618" width="0">		<text/>		<nod x="387" y="17"/>		<nod x="379" y="3"/>	</cox>	<cox border="3" pai="614" son="619" width="0">		<text/>		<nod x="387" y="12"/>		<nod x="380" y="2"/>	</cox>	<cox border="3" pai="614" son="616" width="0">		<text/>		<nod x="387" y="7"/>		<nod x="381" y="1"/>	</cox>	<cox border="0" pai="618" son="698" width="0">		<text/>	</cox>	<cox border="0" pai="620" son="699" width="0">		<text/>	</cox>	<cox border="0" pai="624" son="625" width="2">		<text/>	</cox>	<cox border="0" pai="624" son="626" width="2">		<text/>	</cox>	<cox border="1" pai="626" son="625" width="0">		<text/>	</cox>	<cox border="0" pai="626" son="667" width="0">		<text/>	</cox>	<cox border="0" pai="631" son="627" width="2">		<text/>	</cox>	<cox border="1" pai="628" son="627" width="0">		<text/>		<nod x="445" y="-16"/>	</cox>	<cox border="3" pai="627" son="660" width="0">		<text/>		<nod x="432" y="-11"/>	</cox>	<cox border="3" pai="627" son="658" width="0">		<text/>		<nod x="448" y="-3"/>		<nod x="435" y="-11"/>	</cox>	<cox border="3" pai="627" son="661" width="0">		<text/>		<nod x="434" y="-10"/>	</cox>	<cox border="3" pai="627" son="657" width="0">		<text/>		<nod x="433" y="-10"/>	</cox>	<cox border="0" pai="627" son="676" width="0">		<text/>	</cox>	<cox border="0" pai="631" son="628" width="2">		<text/>	</cox>	<cox border="1" pai="628" son="660" width="0">		<text/>		<nod x="429" y="-4"/>		<nod x="446" y="-15"/>	</cox>	<cox border="1" pai="628" son="657" width="0">		<text/>		<nod x="447" y="-14"/>	</cox>	<cox border="1" pai="628" son="661" width="0">		<text/>		<nod x="456" y="3"/>		<nod x="456" y="-19"/>	</cox>	<cox border="0" pai="631" son="629" width="2">		<text/>	</cox>	<cox border="0" pai="629" son="657" width="2">		<text/>	</cox>	<cox border="0" pai="629" son="661" width="2">		<text/>		<nod x="454" y="0"/>	</cox>	<cox border="0" pai="629" son="658" width="2">		<text/>		<nod x="454" y="0"/>	</cox>	<cox border="0" pai="631" son="630" width="2">		<text/>	</cox>	<cox border="0" pai="630" son="660" width="2">		<text/>	</cox>	<cox border="0" pai="631" son="659" width="2">		<text/>	</cox>	<cox border="2" pai="660" son="632" width="0">		<text/>		<nod x="425" y="-25"/>		<nod x="415" y="-11"/>	</cox>	<cox border="2" pai="657" son="633" width="0">		<text/>		<nod x="433" y="-30"/>		<nod x="458" y="-30"/>		<nod x="458" y="-6"/>		<nod x="446" y="-6"/>	</cox>	<cox border="2" pai="660" son="633" width="0">		<text/>		<nod x="427" y="-23"/>		<nod x="417" y="-9"/>	</cox>	<cox border="2" pai="657" son="634" width="0">		<text/>		<nod x="440" y="-31"/>		<nod x="459" y="-31"/>		<nod x="459" y="-5"/>		<nod x="447" y="-5"/>	</cox>	<cox border="2" pai="660" son="635" width="0">		<text/>		<nod x="426" y="-24"/>		<nod x="416" y="-10"/>	</cox>	<cox border="0" pai="636" son="651" width="2">		<text/>	</cox>	<cox border="0" pai="636" son="645" width="2">		<text/>	</cox>	<cox border="0" pai="636" son="655" width="2">		<text/>	</cox>	<cox border="0" pai="636" son="638" width="2">		<text/>	</cox>	<cox border="0" pai="636" son="639" width="2">		<text/>		<nod x="494" y="-2"/>	</cox>	<cox border="0" pai="636" son="640" width="2">		<text/>		<nod x="494" y="-2"/>	</cox>	<cox border="0" pai="636" son="637" width="2">		<text/>	</cox>	<cox border="0" pai="636" son="641" width="2">		<text/>	</cox>	<cox border="1" pai="637" son="639" width="0">		<text/>		<nod x="492" y="-1"/>	</cox>	<cox border="1" pai="637" son="640" width="0">		<text/>		<nod x="497" y="-1"/>	</cox>	<cox border="0" pai="637" son="680" width="0">		<text/>	</cox>	<cox border="0" pai="637" son="760" width="0">		<text/>		<nod x="446" y="21"/>		<nod x="446" y="7"/>		<nod x="472" y="7"/>	</cox>	<cox border="3" pai="638" son="642" width="0">		<text/>		<nod x="471" y="13"/>		<nod x="497" y="13"/>	</cox>	<cox border="3" pai="638" son="648" width="0">		<text/>		<nod x="490" y="14"/>		<nod x="498" y="14"/>	</cox>	<cox border="3" pai="638" son="652" width="0">		<text/>		<nod x="510" y="14"/>		<nod x="513" y="14"/>	</cox>	<cox border="3" pai="638" son="656" width="0">		<text/>		<nod x="534" y="13"/>		<nod x="514" y="13"/>	</cox>	<cox border="3" pai="666" son="638" width="0">		<text/>		<nod x="504" y="-19"/>		<nod x="397" y="-98"/>	</cox>	<cox border="3" pai="638" son="900" width="0">		<text/>		<nod x="515" y="34"/>		<nod x="515" y="12"/>	</cox>	<cox border="3" pai="639" son="643" width="0">		<text/>		<nod x="459" y="16"/>		<nod x="491" y="16"/>	</cox>	<cox border="3" pai="639" son="644" width="0">		<text/>		<nod x="480" y="17"/>		<nod x="492" y="17"/>	</cox>	<cox border="3" pai="639" son="649" width="0">		<text/>		<nod x="498" y="17"/>		<nod x="493" y="17"/>	</cox>	<cox border="3" pai="639" son="653" width="0">		<text/>		<nod x="520" y="16"/>		<nod x="494" y="16"/>	</cox>	<cox border="3" pai="665" son="639" width="0">		<text/>		<nod x="487" y="-18"/>		<nod x="406" y="-84"/>		<nod x="368" y="-84"/>	</cox>	<cox border="3" pai="664" son="640" width="0">		<text/>		<nod x="488" y="-19"/>		<nod x="407" y="-85"/>		<nod x="368" y="-85"/>	</cox>	<cox border="0" pai="641" son="642" width="2">		<text/>	</cox>	<cox border="0" pai="641" son="646" width="2">		<text/>	</cox>	<cox border="0" pai="641" son="643" width="2">		<text/>	</cox>	<cox border="1" pai="643" son="642" width="0">		<text/>	</cox>	<cox border="1" pai="643" son="646" width="0">		<text/>	</cox>	<cox border="1" pai="643" son="660" width="0">		<text/>		<nod x="415" y="4"/>		<nod x="433" y="20"/>		<nod x="452" y="20"/>	</cox>	<cox border="0" pai="645" son="644" width="2">		<text/>	</cox>	<cox border="1" pai="644" son="647" width="0">		<text/>	</cox>	<cox border="1" pai="644" son="648" width="0">		<text/>	</cox>	<cox border="1" pai="644" son="660" width="0">		<text/>		<nod x="416" y="3"/>		<nod x="434" y="19"/>		<nod x="478" y="19"/>	</cox>	<cox border="2" pai="644" son="900" width="0">		<text/>	</cox>	<cox border="0" pai="645" son="648" width="2">		<text/>	</cox>	<cox border="0" pai="645" son="647" width="2">		<text/>	</cox>	<cox border="0" pai="651" son="649" width="2">		<text/>	</cox>	<cox border="1" pai="649" son="650" width="0">		<text/>	</cox>	<cox border="1" pai="649" son="652" width="0">		<text/>	</cox>	<cox border="1" pai="649" son="657" width="0">		<text/>		<nod x="467" y="-1"/>		<nod x="477" y="7"/>		<nod x="495" y="7"/>	</cox>	<cox border="1" pai="649" son="660" width="0">		<text/>		<nod x="417" y="2"/>		<nod x="435" y="18"/>		<nod x="496" y="18"/>	</cox>	<cox border="0" pai="651" son="650" width="2">		<text/>	</cox>	<cox border="0" pai="651" son="652" width="2">		<text/>	</cox>	<cox border="0" pai="655" son="653" width="2">		<text/>	</cox>	<cox border="1" pai="653" son="654" width="0">		<text/>	</cox>	<cox border="1" pai="653" son="656" width="0">		<text/>	</cox>	<cox border="1" pai="653" son="657" width="0">		<text/>		<nod x="438" y="-2"/>		<nod x="468" y="-2"/>		<nod x="478" y="6"/>		<nod x="517" y="6"/>	</cox>	<cox border="0" pai="655" son="654" width="2">		<text/>	</cox>	<cox border="0" pai="655" son="656" width="2">		<text/>	</cox>	<cox border="1" pai="657" son="661" width="0">		<text/>	</cox>	<cox border="1" pai="657" son="658" width="0">		<text/>		<nod x="438" y="11"/>	</cox>	<cox border="1" pai="660" son="657" width="0">		<text/>	</cox>	<cox border="1" pai="657" son="659" width="0">		<text/>		<nod x="412" y="-11"/>		<nod x="422" y="-2"/>	</cox>	<cox border="0" pai="657" son="677" width="0">		<text/>	</cox>	<cox border="0" pai="657" son="780" width="0">		<text/>		<nod x="506" y="40"/>		<nod x="429" y="40"/>	</cox>	<cox border="0" pai="658" son="678" width="0">		<text/>	</cox>	<cox border="0" pai="658" son="778" width="0">		<text/>		<nod x="613" y="38"/>		<nod x="454" y="38"/>	</cox>	<cox border="1" pai="660" son="659" width="0">		<text/>	</cox>	<cox border="0" pai="660" son="681" width="0">		<text/>	</cox>	<cox border="0" pai="660" son="682" width="0">		<text/>	</cox>	<cox border="0" pai="660" son="777" width="0">		<text/>		<nod x="438" y="41"/>		<nod x="411" y="41"/>	</cox>	<cox border="0" pai="661" son="679" width="0">		<text/>	</cox>	<cox border="0" pai="661" son="779" width="0">		<text/>		<nod x="571" y="39"/>		<nod x="444" y="39"/>	</cox>	<cox border="0" pai="662" son="663" width="0">		<text/>	</cox>	<cox border="0" pai="662" son="664" width="0">		<text/>		<nod x="365" y="-87"/>	</cox>	<cox border="0" pai="662" son="665" width="0">		<text/>		<nod x="365" y="-87"/>	</cox>	<cox border="0" pai="662" son="666" width="0">		<text/>	</cox>	<cox border="0" pai="662" son="668" width="0">		<text/>		<nod x="380" y="-80"/>	</cox>	<cox border="0" pai="662" son="670" width="0">		<text/>		<nod x="380" y="-80"/>	</cox>	<cox border="0" pai="662" son="672" width="0">		<text/>		<nod x="380" y="-80"/>	</cox>	<cox border="0" pai="662" son="674" width="0">		<text/>		<nod x="380" y="-80"/>	</cox>	<cox border="0" pai="662" son="685" width="0">		<text/>	</cox>	<cox border="0" pai="662" son="690" width="0">		<text/>		<nod x="357" y="-100"/>	</cox>	<cox border="0" pai="662" son="696" width="0">		<text/>		<nod x="357" y="-100"/>	</cox>	<cox border="0" pai="662" son="695" width="0">		<text/>		<nod x="357" y="-100"/>	</cox>	<cox border="0" pai="662" son="694" width="0">		<text/>		<nod x="357" y="-100"/>	</cox>	<cox border="0" pai="662" son="908" width="0">		<text/>	</cox>	<cox border="3" pai="668" son="667" width="0">		<text/>		<nod x="347" y="-9"/>		<nod x="366" y="-74"/>	</cox>	<cox border="0" pai="667" son="669" width="0">		<text/>	</cox>	<cox border="0" pai="669" son="671" width="0">		<text/>	</cox>	<cox border="0" pai="669" son="673" width="0">		<text/>	</cox>	<cox border="3" pai="670" son="669" width="0">		<text/>		<nod x="348" y="-8"/>		<nod x="367" y="-73"/>	</cox>	<cox border="3" pai="672" son="671" width="0">		<text/>		<nod x="349" y="-7"/>		<nod x="368" y="-72"/>	</cox>	<cox border="3" pai="674" son="673" width="0">		<text/>		<nod x="350" y="-6"/>		<nod x="369" y="-71"/>	</cox>	<cox border="3" pai="685" son="687" width="0">		<text/>		<nod x="316" y="-26"/>		<nod x="352" y="-37"/>		<nod x="352" y="-84"/>	</cox>	<cox border="3" pai="685" son="686" width="0">		<text/>		<nod x="317" y="-28"/>		<nod x="351" y="-38"/>		<nod x="351" y="-85"/>	</cox>	<cox border="3" pai="690" son="689" width="0">		<text/>		<nod x="278" y="-30"/>		<nod x="278" y="-59"/>		<nod x="336" y="-97"/>	</cox>	<cox border="3" pai="694" son="691" width="0">		<text/>		<nod x="277" y="-28"/>		<nod x="277" y="-60"/>		<nod x="335" y="-98"/>	</cox>	<cox border="3" pai="695" son="692" width="0">		<text/>		<nod x="276" y="-26"/>		<nod x="276" y="-61"/>		<nod x="334" y="-99"/>	</cox>	<cox border="3" pai="696" son="693" width="0">		<text/>		<nod x="275" y="-24"/>		<nod x="275" y="-62"/>		<nod x="333" y="-100"/>	</cox>	<cox border="0" pai="702" son="703" width="0">		<text/>		<nod x="150" y="-46"/>	</cox>	<cox border="0" pai="702" son="704" width="0">		<text/>		<nod x="163" y="-46"/>	</cox>	<cox border="0" pai="702" son="706" width="0">		<text/>		<nod x="192" y="-46"/>	</cox>	<cox border="0" pai="702" son="707" width="0">		<text/>		<nod x="213" y="-46"/>	</cox>	<cox border="0" pai="702" son="713" width="0">		<text/>		<nod x="221" y="-46"/>	</cox>	<cox border="0" pai="702" son="892" width="0">		<text/>	</cox>	<cox border="0" pai="702" son="898" width="0">		<text/>		<nod x="229" y="-46"/>	</cox>	<cox border="0" pai="703" son="709" width="0">		<text/>		<nod x="150" y="-39"/>	</cox>	<cox border="0" pai="703" son="710" width="0">		<text/>		<nod x="150" y="-35"/>	</cox>	<cox border="0" pai="703" son="711" width="0">		<text/>		<nod x="150" y="-33"/>	</cox>	<cox border="0" pai="703" son="712" width="0">		<text/>		<nod x="150" y="-29"/>	</cox>	<cox border="0" pai="703" son="722" width="0">		<text/>		<nod x="150" y="-37"/>	</cox>	<cox border="0" pai="703" son="723" width="0">		<text/>		<nod x="150" y="-31"/>	</cox>	<cox border="0" pai="703" son="708" width="0">		<text/>		<nod x="150" y="-41"/>	</cox>	<cox border="0" pai="704" son="705" width="0">		<text/>		<nod x="163" y="-35"/>	</cox>	<cox border="0" pai="704" son="714" width="0">		<text/>		<nod x="163" y="-41"/>	</cox>	<cox border="0" pai="704" son="715" width="0">		<text/>		<nod x="163" y="-39"/>	</cox>	<cox border="0" pai="704" son="724" width="0">		<text/>		<nod x="163" y="-37"/>	</cox>	<cox border="0" pai="704" son="728" width="0">		<text/>		<nod x="163" y="-11"/>	</cox>	<cox border="0" pai="704" son="727" width="0">		<text/>		<nod x="163" y="-7"/>	</cox>	<cox border="0" pai="704" son="729" width="0">		<text/>		<nod x="163" y="-9"/>	</cox>	<cox border="0" pai="704" son="730" width="0">		<text/>		<nod x="163" y="-5"/>	</cox>	<cox border="0" pai="704" son="731" width="0">		<text/>		<nod x="163" y="-3"/>	</cox>	<cox border="0" pai="704" son="732" width="0">		<text/>		<nod x="163" y="-1"/>	</cox>	<cox border="0" pai="704" son="733" width="0">		<text/>		<nod x="163" y="1"/>	</cox>	<cox border="0" pai="704" son="734" width="0">		<text/>		<nod x="163" y="3"/>	</cox>	<cox border="0" pai="704" son="735" width="0">		<text/>		<nod x="163" y="5"/>	</cox>	<cox border="0" pai="704" son="736" width="0">		<text/>		<nod x="163" y="7"/>	</cox>	<cox border="0" pai="704" son="737" width="0">		<text/>		<nod x="163" y="9"/>	</cox>	<cox border="0" pai="704" son="738" width="0">		<text/>		<nod x="163" y="11"/>	</cox>	<cox border="0" pai="704" son="890" width="0">		<text/>		<nod x="163" y="-16"/>	</cox>	<cox border="0" pai="705" son="716" width="0">		<text/>		<nod x="166" y="-32"/>	</cox>	<cox border="0" pai="705" son="717" width="0">		<text/>		<nod x="166" y="-30"/>	</cox>	<cox border="0" pai="705" son="718" width="0">		<text/>		<nod x="166" y="-26"/>	</cox>	<cox border="0" pai="705" son="719" width="0">		<text/>		<nod x="166" y="-24"/>	</cox>	<cox border="0" pai="705" son="720" width="0">		<text/>		<nod x="166" y="-22"/>	</cox>	<cox border="0" pai="705" son="721" width="0">		<text/>		<nod x="166" y="-18"/>	</cox>	<cox border="0" pai="705" son="725" width="0">		<text/>		<nod x="166" y="-28"/>	</cox>	<cox border="0" pai="705" son="726" width="0">		<text/>		<nod x="166" y="-20"/>	</cox>	<cox border="0" pai="706" son="739" width="0">		<text/>		<nod x="192" y="-41"/>	</cox>	<cox border="0" pai="706" son="740" width="0">		<text/>		<nod x="192" y="-39"/>	</cox>	<cox border="0" pai="706" son="744" width="0">		<text/>		<nod x="192" y="-19"/>	</cox>	<cox border="0" pai="706" son="745" width="0">		<text/>		<nod x="192" y="-15"/>	</cox>	<cox border="0" pai="706" son="746" width="0">		<text/>		<nod x="192" y="-13"/>	</cox>	<cox border="0" pai="706" son="747" width="0">		<text/>		<nod x="192" y="-11"/>	</cox>	<cox border="0" pai="706" son="748" width="0">		<text/>		<nod x="192" y="-9"/>	</cox>	<cox border="0" pai="706" son="749" width="0">		<text/>		<nod x="192" y="-5"/>	</cox>	<cox border="0" pai="706" son="757" width="0">		<text/>		<nod x="192" y="-21"/>	</cox>	<cox border="0" pai="706" son="756" width="0">		<text/>		<nod x="192" y="-17"/>	</cox>	<cox border="0" pai="706" son="755" width="0">		<text/>		<nod x="192" y="-7"/>	</cox>	<cox border="0" pai="707" son="750" width="0">		<text/>		<nod x="213" y="-41"/>	</cox>	<cox border="0" pai="707" son="751" width="0">		<text/>		<nod x="213" y="-33"/>	</cox>	<cox border="0" pai="707" son="752" width="0">		<text/>		<nod x="213" y="-31"/>	</cox>	<cox border="0" pai="707" son="753" width="0">		<text/>		<nod x="213" y="-27"/>	</cox>	<cox border="0" pai="707" son="754" width="0">		<text/>		<nod x="213" y="-25"/>	</cox>	<cox border="0" pai="707" son="758" width="0">		<text/>		<nod x="213" y="-29"/>	</cox>	<cox border="0" pai="707" son="759" width="0">		<text/>		<nod x="213" y="-39"/>	</cox>	<cox border="0" pai="707" son="929" width="0">		<text/>		<nod x="213" y="-35"/>	</cox>	<cox border="0" pai="707" son="930" width="0">		<text/>		<nod x="213" y="-37"/>	</cox>	<cox border="0" pai="855" son="714" width="1">		<text/>	</cox>	<cox border="0" pai="856" son="715" width="1">		<text/>	</cox>	<cox border="0" pai="848" son="716" width="1">		<text/>	</cox>	<cox border="0" pai="844" son="717" width="1">		<text/>	</cox>	<cox border="0" pai="845" son="718" width="1">		<text/>	</cox>	<cox border="0" pai="846" son="719" width="1">		<text/>	</cox>	<cox border="0" pai="847" son="720" width="1">		<text/>	</cox>	<cox border="0" pai="861" son="721" width="1">		<text/>	</cox>	<cox border="0" pai="844" son="728" width="1">		<text/>	</cox>	<cox border="0" pai="844" son="729" width="1">		<text/>	</cox>	<cox border="0" pai="857" son="730" width="1">		<text/>	</cox>	<cox border="0" pai="858" son="731" width="1">		<text/>	</cox>	<cox border="0" pai="859" son="732" width="1">		<text/>	</cox>	<cox border="0" pai="850" son="733" width="1">		<text/>	</cox>	<cox border="0" pai="854" son="735" width="1">		<text/>	</cox>	<cox border="0" pai="849" son="736" width="1">		<text/>	</cox>	<cox border="0" pai="851" son="737" width="1">		<text/>	</cox>	<cox border="0" pai="860" son="738" width="1">		<text/>	</cox>	<cox border="0" pai="740" son="741" width="0">		<text/>		<nod x="195" y="-36"/>	</cox>	<cox border="0" pai="740" son="742" width="0">		<text/>		<nod x="195" y="-34"/>	</cox>	<cox border="0" pai="740" son="743" width="0">		<text/>		<nod x="195" y="-23"/>	</cox>	<cox border="0" pai="740" son="871" width="0">		<text/>		<nod x="195" y="-32"/>	</cox>	<cox border="0" pai="843" son="741" width="1">		<text/>	</cox>	<cox border="0" pai="843" son="742" width="1">		<text/>	</cox>	<cox border="0" pai="843" son="743" width="1">		<text/>	</cox>	<cox border="0" pai="853" son="744" width="1">		<text/>	</cox>	<cox border="0" pai="760" son="761" width="0">		<text/>	</cox>	<cox border="0" pai="760" son="762" width="0">		<text/>	</cox>	<cox border="0" pai="760" son="763" width="0">		<text/>	</cox>	<cox border="0" pai="760" son="764" width="0">		<text/>	</cox>	<cox border="0" pai="761" son="765" width="0">		<text/>		<nod x="335" y="10"/>	</cox>	<cox border="0" pai="762" son="766" width="0">		<text/>		<nod x="335" y="16"/>	</cox>	<cox border="0" pai="762" son="767" width="0">		<text/>		<nod x="335" y="18"/>	</cox>	<cox border="0" pai="762" son="768" width="0">		<text/>		<nod x="335" y="20"/>	</cox>	<cox border="0" pai="762" son="769" width="0">		<text/>		<nod x="335" y="22"/>	</cox>	<cox border="0" pai="762" son="770" width="0">		<text/>		<nod x="335" y="24"/>	</cox>	<cox border="0" pai="762" son="771" width="0">		<text/>		<nod x="335" y="26"/>	</cox>	<cox border="0" pai="762" son="772" width="0">		<text/>		<nod x="335" y="28"/>	</cox>	<cox border="0" pai="763" son="773" width="0">		<text/>		<nod x="335" y="34"/>	</cox>	<cox border="0" pai="763" son="774" width="0">		<text/>		<nod x="335" y="38"/>	</cox>	<cox border="0" pai="763" son="775" width="0">		<text/>		<nod x="335" y="40"/>	</cox>	<cox border="0" pai="763" son="895" width="0">		<text/>		<nod x="335" y="36"/>	</cox>	<cox border="0" pai="764" son="776" width="0">		<text/>		<nod x="335" y="46"/>	</cox>	<cox border="0" pai="879" son="765" width="1">		<text/>	</cox>	<cox border="0" pai="848" son="769" width="1">		<text/>	</cox>	<cox border="0" pai="876" son="770" width="1">		<text/>	</cox>	<cox border="0" pai="884" son="771" width="1">		<text/>	</cox>	<cox border="0" pai="850" son="772" width="1">		<text/>	</cox>	<cox border="0" pai="878" son="774" width="1">		<text/>	</cox>	<cox border="0" pai="850" son="775" width="1">		<text/>	</cox>	<cox border="0" pai="850" son="776" width="1">		<text/>	</cox>	<cox border="0" pai="777" son="781" width="0">		<text/>	</cox>	<cox border="0" pai="777" son="782" width="0">		<text/>		<nod x="409" y="101"/>		<nod x="409" y="46"/>		<nod x="435" y="46"/>	</cox>	<cox border="0" pai="777" son="783" width="0">		<text/>		<nod x="408" y="108"/>		<nod x="408" y="45"/>		<nod x="436" y="45"/>	</cox>	<cox border="0" pai="777" son="784" width="0">		<text/>		<nod x="407" y="115"/>		<nod x="407" y="44"/>		<nod x="437" y="44"/>	</cox>	<cox border="0" pai="777" son="814" width="0">		<text/>		<nod x="406" y="122"/>		<nod x="406" y="43"/>		<nod x="438" y="43"/>	</cox>	<cox border="0" pai="777" son="792" width="0">		<text/>		<nod x="411" y="82"/>		<nod x="411" y="48"/>		<nod x="433" y="48"/>	</cox>	<cox border="0" pai="777" son="794" width="0">		<text/>		<nod x="410" y="93"/>		<nod x="410" y="47"/>		<nod x="434" y="47"/>	</cox>	<cox border="0" pai="778" son="825" width="0">		<text/>	</cox>	<cox border="0" pai="778" son="829" width="0">		<text/>		<nod x="595" y="72"/>		<nod x="595" y="48"/>		<nod x="611" y="48"/>	</cox>	<cox border="0" pai="779" son="806" width="0">		<text/>		<nod x="544" y="76"/>		<nod x="544" y="50"/>		<nod x="566" y="50"/>	</cox>	<cox border="0" pai="779" son="807" width="0">		<text/>		<nod x="543" y="86"/>		<nod x="543" y="49"/>		<nod x="567" y="49"/>	</cox>	<cox border="0" pai="779" son="808" width="0">		<text/>	</cox>	<cox border="0" pai="779" son="818" width="0">		<text/>		<nod x="541" y="105"/>		<nod x="541" y="47"/>		<nod x="569" y="47"/>	</cox>	<cox border="0" pai="779" son="828" width="0">		<text/>		<nod x="542" y="95"/>		<nod x="542" y="48"/>		<nod x="568" y="48"/>	</cox>	<cox border="0" pai="780" son="816" width="0">		<text/>		<nod x="474" y="104"/>		<nod x="474" y="47"/>		<nod x="504" y="47"/>	</cox>	<cox border="0" pai="780" son="802" width="0">		<text/>	</cox>	<cox border="0" pai="780" son="800" width="0">		<text/>		<nod x="476" y="84"/>		<nod x="476" y="49"/>		<nod x="502" y="49"/>	</cox>	<cox border="0" pai="780" son="799" width="0">		<text/>		<nod x="477" y="75"/>		<nod x="477" y="50"/>		<nod x="501" y="50"/>	</cox>	<cox border="0" pai="780" son="827" width="0">		<text/>		<nod x="475" y="94"/>		<nod x="475" y="48"/>		<nod x="503" y="48"/>	</cox>	<cox border="0" pai="781" son="785" width="0">		<text/>	</cox>	<cox border="0" pai="786" son="781" width="0">		<text/>		<nod x="429" y="53"/>		<nod x="429" y="104"/>	</cox>	<cox border="0" pai="788" son="781" width="0">		<text/>		<nod x="430" y="54"/>		<nod x="430" y="111"/>	</cox>	<cox border="0" pai="790" son="781" width="0">		<text/>		<nod x="431" y="55"/>		<nod x="431" y="118"/>	</cox>	<cox border="0" pai="781" son="789" width="0">		<text/>	</cox>	<cox border="0" pai="781" son="787" width="0">		<text/>	</cox>	<cox border="0" pai="798" son="781" width="0">		<text/>		<nod x="433" y="57"/>		<nod x="433" y="99"/>	</cox>	<cox border="0" pai="793" son="781" width="0">		<text/>		<nod x="434" y="58"/>		<nod x="434" y="85"/>	</cox>	<cox border="0" pai="809" son="781" width="0">		<text/>		<nod x="432" y="56"/>		<nod x="432" y="125"/>	</cox>	<cox border="0" pai="781" son="813" width="0">		<text/>	</cox>	<cox border="0" pai="781" son="791" width="0">		<text/>	</cox>	<cox border="0" pai="781" son="796" width="0">		<text/>	</cox>	<cox border="0" pai="785" son="782" width="0">		<text/>		<nod x="421" y="101"/>		<nod x="421" y="64"/>	</cox>	<cox border="0" pai="782" son="786" width="0">		<text/>	</cox>	<cox border="0" pai="783" son="788" width="0">		<text/>	</cox>	<cox border="0" pai="787" son="783" width="0">		<text/>		<nod x="422" y="108"/>		<nod x="422" y="67"/>	</cox>	<cox border="0" pai="789" son="784" width="0">		<text/>		<nod x="423" y="115"/>		<nod x="423" y="70"/>	</cox>	<cox border="0" pai="784" son="790" width="0">		<text/>	</cox>	<cox border="0" pai="791" son="792" width="0">		<text/>		<nod x="457" y="82"/>		<nod x="457" y="58"/>	</cox>	<cox border="1" pai="791" son="797" width="0">		<text/>		<nod x="468" y="62"/>		<nod x="458" y="57"/>	</cox>	<cox border="0" pai="792" son="793" width="0">		<text/>	</cox>	<cox border="0" pai="830" son="792" width="0">		<text/>		<nod x="443" y="83"/>		<nod x="443" y="96"/>	</cox>	<cox border="0" pai="793" son="794" width="0">		<text/>	</cox>	<cox border="1" pai="793" son="803" width="0">		<text/>		<nod x="509" y="85"/>	</cox>	<cox border="0" pai="796" son="794" width="0">		<text/>		<nod x="458" y="93"/>		<nod x="458" y="61"/>	</cox>	<cox border="0" pai="794" son="798" width="0">		<text/>	</cox>	<cox border="0" pai="794" son="830" width="0">		<text/>	</cox>	<cox border="1" pai="794" son="797" width="0">		<text/>		<nod x="468" y="62"/>		<nod x="459" y="94"/>	</cox>	<cox border="0" pai="802" son="795" width="0">		<text/>	</cox>	<cox border="0" pai="795" son="799" width="0">		<text/>		<nod x="524" y="75"/>		<nod x="524" y="59"/>	</cox>	<cox border="1" pai="795" son="796" width="0">		<text/>		<nod x="451" y="60"/>		<nod x="489" y="60"/>		<nod x="502" y="59"/>	</cox>	<cox border="1" pai="795" son="805" width="0">		<text/>		<nod x="530" y="57"/>		<nod x="520" y="58"/>	</cox>	<cox border="1" pai="797" son="796" width="0">		<text/>		<nod x="451" y="60"/>		<nod x="489" y="60"/>		<nod x="502" y="61"/>	</cox>	<cox border="0" pai="802" son="797" width="0">		<text/>	</cox>	<cox border="0" pai="797" son="800" width="0">		<text/>		<nod x="525" y="84"/>		<nod x="525" y="62"/>	</cox>	<cox border="1" pai="804" son="797" width="0">		<text/>		<nod x="549" y="63"/>		<nod x="564" y="92"/>	</cox>	<cox border="1" pai="797" son="805" width="0">		<text/>		<nod x="530" y="57"/>		<nod x="520" y="61"/>	</cox>	<cox border="1" pai="832" son="797" width="0">		<text/>		<nod x="549" y="63"/>		<nod x="566" y="59"/>	</cox>	<cox border="1" pai="801" son="798" width="0">		<text/>		<nod x="500" y="99"/>		<nod x="504" y="79"/>	</cox>	<cox border="1" pai="803" son="798" width="0">		<text/>		<nod x="500" y="99"/>		<nod x="505" y="88"/>	</cox>	<cox border="1" pai="831" son="798" width="0">		<text/>		<nod x="500" y="99"/>	</cox>	<cox border="0" pai="799" son="801" width="0">		<text/>	</cox>	<cox border="0" pai="831" son="799" width="0">		<text/>		<nod x="507" y="76"/>		<nod x="507" y="90"/>	</cox>	<cox border="0" pai="800" son="803" width="0">		<text/>	</cox>	<cox border="0" pai="801" son="800" width="0">		<text/>	</cox>	<cox border="0" pai="800" son="831" width="0">		<text/>	</cox>	<cox border="0" pai="801" son="802" width="0">		<text/>		<nod x="502" y="57"/>		<nod x="498" y="57"/>		<nod x="498" y="78"/>	</cox>	<cox border="1" pai="801" son="812" width="0">		<text/>		<nod x="575" y="88"/>		<nod x="535" y="88"/>		<nod x="524" y="78"/>	</cox>	<cox border="0" pai="802" son="815" width="0">		<text/>	</cox>	<cox border="0" pai="810" son="802" width="0">		<text/>		<nod x="504" y="55"/>		<nod x="496" y="55"/>		<nod x="496" y="107"/>	</cox>	<cox border="0" pai="802" son="823" width="0">		<text/>	</cox>	<cox border="0" pai="820" son="802" width="0">		<text/>		<nod x="505" y="54"/>		<nod x="495" y="54"/>		<nod x="495" y="97"/>	</cox>	<cox border="0" pai="803" son="802" width="0">		<text/>		<nod x="503" y="56"/>		<nod x="497" y="56"/>		<nod x="497" y="87"/>	</cox>	<cox border="1" pai="811" son="803" width="0">		<text/>		<nod x="524" y="86"/>		<nod x="576" y="80"/>	</cox>	<cox border="1" pai="803" son="812" width="0">		<text/>		<nod x="575" y="88"/>		<nod x="535" y="88"/>		<nod x="525" y="87"/>	</cox>	<cox border="0" pai="807" son="804" width="0">		<text/>	</cox>	<cox border="0" pai="804" son="806" width="0">		<text/>	</cox>	<cox border="0" pai="808" son="805" width="0">		<text/>	</cox>	<cox border="0" pai="805" son="807" width="0">		<text/>		<nod x="590" y="86"/>		<nod x="590" y="62"/>	</cox>	<cox border="1" pai="831" son="805" width="0">		<text/>		<nod x="530" y="57"/>		<nod x="527" y="90"/>	</cox>	<cox border="0" pai="806" son="811" width="0">		<text/>	</cox>	<cox border="0" pai="832" son="806" width="0">		<text/>		<nod x="587" y="76"/>		<nod x="587" y="59"/>	</cox>	<cox border="0" pai="807" son="812" width="0">		<text/>	</cox>	<cox border="0" pai="811" son="807" width="0">		<text/>	</cox>	<cox border="0" pai="811" son="808" width="0">		<text/>		<nod x="565" y="58"/>		<nod x="565" y="79"/>	</cox>	<cox border="0" pai="808" son="817" width="0">		<text/>	</cox>	<cox border="0" pai="819" son="808" width="0">		<text/>		<nod x="563" y="56"/>		<nod x="563" y="108"/>	</cox>	<cox border="0" pai="812" son="808" width="0">		<text/>		<nod x="564" y="57"/>		<nod x="564" y="89"/>	</cox>	<cox border="0" pai="808" son="824" width="0">		<text/>	</cox>	<cox border="0" pai="821" son="808" width="0">		<text/>		<nod x="562" y="55"/>		<nod x="562" y="98"/>	</cox>	<cox border="0" pai="808" son="832" width="0">		<text/>	</cox>	<cox border="0" pai="814" son="809" width="0">		<text/>	</cox>	<cox border="1" pai="809" son="810" width="0">		<text/>		<nod x="446" y="107"/>		<nod x="433" y="126"/>	</cox>	<cox border="0" pai="816" son="810" width="0">		<text/>	</cox>	<cox border="1" pai="810" son="819" width="0">		<text/>		<nod x="491" y="108"/>	</cox>	<cox border="0" pai="813" son="814" width="0">		<text/>		<nod x="424" y="122"/>		<nod x="424" y="73"/>	</cox>	<cox border="1" pai="813" son="815" width="0">		<text/>		<nod x="503" y="73"/>	</cox>	<cox border="0" pai="815" son="816" width="0">		<text/>		<nod x="489" y="104"/>		<nod x="489" y="68"/>	</cox>	<cox border="1" pai="815" son="817" width="0">		<text/>		<nod x="558" y="69"/>	</cox>	<cox border="0" pai="817" son="818" width="0">		<text/>		<nod x="556" y="105"/>		<nod x="556" y="68"/>	</cox>	<cox border="0" pai="818" son="819" width="0">		<text/>	</cox>	<cox border="0" pai="827" son="820" width="0">		<text/>	</cox>	<cox border="1" pai="820" son="821" width="0">		<text/>		<nod x="491" y="98"/>	</cox>	<cox border="0" pai="828" son="821" width="0">		<text/>	</cox>	<cox border="1" pai="821" son="822" width="0">		<text/>		<nod x="587" y="99"/>		<nod x="558" y="99"/>	</cox>	<cox border="0" pai="822" son="825" width="0">		<text/>		<nod x="609" y="56"/>		<nod x="609" y="75"/>	</cox>	<cox border="0" pai="829" son="822" width="0">		<text/>	</cox>	<cox border="0" pai="823" son="827" width="0">		<text/>		<nod x="488" y="94"/>		<nod x="488" y="65"/>	</cox>	<cox border="1" pai="823" son="824" width="0">		<text/>		<nod x="557" y="66"/>	</cox>	<cox border="1" pai="826" son="823" width="0">		<text/>		<nod x="520" y="66"/>		<nod x="537" y="72"/>		<nod x="580" y="72"/>	</cox>	<cox border="0" pai="824" son="828" width="0">		<text/>		<nod x="555" y="95"/>		<nod x="555" y="65"/>	</cox>	<cox border="0" pai="825" son="826" width="0">		<text/>	</cox>	<cox border="0" pai="826" son="829" width="0">		<text/>		<nod x="607" y="72"/>		<nod x="607" y="59"/>	</cox>	<cox border="0" pai="835" son="836" width="0">		<text/>	</cox>	<cox border="0" pai="835" son="864" width="0">		<text/>	</cox>	<cox border="0" pai="835" son="862" width="0">		<text/>	</cox>	<cox border="0" pai="836" son="837" width="0">		<text/>		<nod x="313" y="70"/>	</cox>	<cox border="0" pai="836" son="838" width="0">		<text/>		<nod x="313" y="68"/>	</cox>	<cox border="0" pai="836" son="839" width="0">		<text/>		<nod x="313" y="66"/>	</cox>	<cox border="0" pai="836" son="840" width="0">		<text/>		<nod x="313" y="64"/>	</cox>	<cox border="0" pai="836" son="841" width="0">		<text/>		<nod x="313" y="62"/>	</cox>	<cox border="0" pai="842" son="863" width="0">		<text/>	</cox>	<cox border="0" pai="842" son="877" width="0">		<text/>	</cox>	<cox border="0" pai="842" son="894" width="0">		<text/>	</cox>	<cox border="0" pai="843" son="872" width="1">		<text/>	</cox>	<cox border="0" pai="843" son="873" width="1">		<text/>	</cox>	<cox border="0" pai="843" son="874" width="1">		<text/>	</cox>	<cox border="0" pai="894" son="843" width="0">		<text/>		<nod x="231" y="11"/>		<nod x="231" y="15"/>	</cox>	<cox border="0" pai="894" son="844" width="0">		<text/>		<nod x="259" y="18"/>	</cox>	<cox border="0" pai="845" son="869" width="0">		<text/>	</cox>	<cox border="0" pai="845" son="870" width="0">		<text/>	</cox>	<cox border="0" pai="894" son="845" width="0">		<text/>		<nod x="241" y="32"/>		<nod x="241" y="27"/>	</cox>	<cox border="0" pai="846" son="868" width="0">		<text/>	</cox>	<cox border="0" pai="846" son="867" width="0">		<text/>	</cox>	<cox border="0" pai="884" son="846" width="1">		<text/>	</cox>	<cox border="0" pai="894" son="846" width="0">		<text/>		<nod x="241" y="37"/>		<nod x="241" y="27"/>	</cox>	<cox border="0" pai="850" son="847" width="1">		<text/>	</cox>	<cox border="0" pai="894" son="847" width="0">		<text/>		<nod x="241" y="40"/>		<nod x="241" y="27"/>	</cox>	<cox border="0" pai="894" son="848" width="0">		<text/>		<nod x="241" y="29"/>		<nod x="241" y="27"/>	</cox>	<cox border="0" pai="852" son="849" width="1">		<text/>	</cox>	<cox border="0" pai="894" son="849" width="0">		<text/>		<nod x="211" y="33"/>		<nod x="211" y="29"/>	</cox>	<cox border="0" pai="850" son="857" width="1">		<text/>	</cox>	<cox border="0" pai="852" son="850" width="1">		<text/>	</cox>	<cox border="0" pai="894" son="850" width="0">		<text/>		<nod x="211" y="22"/>		<nod x="211" y="24"/>	</cox>	<cox border="0" pai="852" son="851" width="1">		<text/>	</cox>	<cox border="0" pai="894" son="851" width="0">		<text/>		<nod x="211" y="35"/>		<nod x="211" y="29"/>	</cox>	<cox border="0" pai="865" son="852" width="1">		<text/>	</cox>	<cox border="0" pai="852" son="861" width="1">		<text/>	</cox>	<cox border="0" pai="852" son="860" width="1">		<text/>	</cox>	<cox border="0" pai="852" son="854" width="1">		<text/>	</cox>	<cox border="0" pai="852" son="853" width="1">		<text/>	</cox>	<cox border="0" pai="852" son="855" width="1">		<text/>	</cox>	<cox border="0" pai="852" son="856" width="1">		<text/>	</cox>	<cox border="0" pai="852" son="858" width="1">		<text/>	</cox>	<cox border="0" pai="894" son="852" width="0">		<text/>		<nod x="259" y="18"/>	</cox>	<cox border="0" pai="852" son="893" width="1">		<text/>	</cox>	<cox border="0" pai="894" son="853" width="0">		<text/>		<nod x="231" y="13"/>		<nod x="231" y="15"/>	</cox>	<cox border="0" pai="894" son="854" width="0">		<text/>		<nod x="211" y="31"/>		<nod x="211" y="29"/>	</cox>	<cox border="0" pai="894" son="855" width="0">		<text/>		<nod x="211" y="11"/>		<nod x="211" y="24"/>	</cox>	<cox border="0" pai="894" son="856" width="0">		<text/>		<nod x="211" y="13"/>		<nod x="211" y="24"/>	</cox>	<cox border="0" pai="894" son="857" width="0">		<text/>		<nod x="211" y="16"/>		<nod x="211" y="24"/>	</cox>	<cox border="0" pai="894" son="858" width="0">		<text/>		<nod x="211" y="18"/>		<nod x="211" y="24"/>	</cox>	<cox border="0" pai="894" son="859" width="0">		<text/>		<nod x="211" y="20"/>		<nod x="211" y="24"/>	</cox>	<cox border="0" pai="894" son="860" width="0">		<text/>		<nod x="211" y="38"/>		<nod x="211" y="29"/>	</cox>	<cox border="0" pai="894" son="861" width="0">		<text/>		<nod x="211" y="41"/>		<nod x="211" y="29"/>	</cox>	<cox border="0" pai="865" son="885" width="1">		<text/>	</cox>	<cox border="0" pai="865" son="879" width="1">		<text/>	</cox>	<cox border="0" pai="865" son="878" width="1">		<text/>	</cox>	<cox border="0" pai="877" son="865" width="0">		<text/>		<nod x="270" y="51"/>		<nod x="270" y="49"/>	</cox>	<cox border="0" pai="865" son="893" width="1">		<text/>	</cox>	<cox border="0" pai="877" son="866" width="0">		<text/>		<nod x="270" y="54"/>		<nod x="270" y="49"/>	</cox>	<cox border="0" pai="876" son="870" width="1">		<text/>	</cox>	<cox border="0" pai="871" son="872" width="0">		<text/>		<nod x="198" y="-29"/>	</cox>	<cox border="0" pai="871" son="873" width="0">		<text/>		<nod x="198" y="-27"/>	</cox>	<cox border="0" pai="871" son="874" width="0">		<text/>		<nod x="198" y="-25"/>	</cox>	<cox border="0" pai="877" son="876" width="0">		<text/>		<nod x="267" y="60"/>		<nod x="267" y="56"/>	</cox>	<cox border="0" pai="882" son="876" width="1">		<text/>	</cox>	<cox border="0" pai="877" son="878" width="0">		<text/>		<nod x="267" y="63"/>		<nod x="267" y="56"/>	</cox>	<cox border="0" pai="877" son="879" width="0">		<text/>		<nod x="267" y="58"/>		<nod x="267" y="56"/>	</cox>	<cox border="0" pai="877" son="880" width="0">		<text/>		<nod x="261" y="58"/>		<nod x="261" y="54"/>	</cox>	<cox border="0" pai="877" son="881" width="0">		<text/>		<nod x="261" y="56"/>		<nod x="261" y="54"/>	</cox>	<cox border="0" pai="877" son="882" width="0">		<text/>		<nod x="262" y="64"/>		<nod x="262" y="62"/>	</cox>	<cox border="0" pai="877" son="883" width="0">		<text/>		<nod x="266" y="69"/>		<nod x="266" y="67"/>	</cox>	<cox border="0" pai="877" son="884" width="0">		<text/>		<nod x="262" y="69"/>		<nod x="262" y="62"/>	</cox>	<cox border="0" pai="877" son="885" width="0">		<text/>		<nod x="262" y="67"/>		<nod x="262" y="62"/>	</cox>	<cox border="0" pai="877" son="886" width="0">		<text/>		<nod x="267" y="65"/>		<nod x="267" y="56"/>	</cox>	<cox border="0" pai="877" son="889" width="0">		<text/>		<nod x="261" y="60"/>		<nod x="261" y="54"/>	</cox>	<cox border="0" pai="888" son="887" width="0">		<text/>	</cox>	<cox border="0" pai="890" son="891" width="0">		<text/>		<nod x="167" y="-13"/>	</cox>	<cox border="0" pai="893" son="891" width="1">		<text/>	</cox>	<cox border="0" pai="894" son="893" width="0">		<text/>	</cox>	<cox border="0" pai="893" son="895" width="1">		<text/>	</cox>	<cox border="0" pai="901" son="902" width="2">		<text/>	</cox>	<cox border="0" pai="901" son="903" width="2">		<text/>	</cox>	<cox border="0" pai="904" son="905" width="2">		<text/>	</cox>	<cox border="0" pai="904" son="906" width="2">		<text/>	</cox>	<cox border="0" pai="904" son="907" width="2">		<text/>	</cox>	<cox border="3" pai="908" son="905" width="0">		<text/>		<nod x="294" y="-65"/>		<nod x="336" y="-93"/>	</cox>	<cox border="2" pai="905" son="906" width="0">		<text/>	</cox>	<cox border="2" pai="905" son="907" width="0">		<text/>	</cox>	<cox border="0" pai="906" son="909" width="0">		<text/>	</cox>	<cox border="1" pai="906" son="907" width="0">		<text/>	</cox>	<cox border="0" pai="907" son="910" width="0">		<text/>	</cox>	<cox border="0" pai="907" son="911" width="0">		<text/>	</cox>	<cox border="0" pai="907" son="912" width="0">		<text/>		<nod x="254" y="-36"/>		<nod x="291" y="-36"/>	</cox>	<cox border="0" pai="912" son="919" width="0">		<text/>	</cox>	<cox border="0" pai="914" son="913" width="0">		<text/>	</cox>	<cox border="0" pai="913" son="917" width="0">		<text/>	</cox>	<cox border="0" pai="915" son="914" width="0">		<text/>	</cox>	<cox border="0" pai="920" son="915" width="0">		<text/>	</cox>	<cox border="0" pai="915" son="916" width="0">		<text/>	</cox>	<cox border="0" pai="923" son="915" width="0">		<text/>	</cox>	<cox border="0" pai="916" son="919" width="0">		<text/>	</cox>	<cox border="0" pai="917" son="922" width="0">		<text/>	</cox>	<cox border="0" pai="917" son="918" width="0">		<text/>	</cox>	<cox border="0" pai="928" son="917" width="0">		<text/>	</cox>	<cox border="0" pai="918" son="923" width="0">		<text/>	</cox>	<cox border="0" pai="919" son="920" width="0">		<text/>	</cox>	<cox border="0" pai="926" son="919" width="0">		<text/>	</cox>	<cox border="0" pai="922" son="921" width="0">		<text/>	</cox>	<cox border="0" pai="921" son="924" width="0">		<text/>	</cox>	<cox border="0" pai="924" son="927" width="0">		<text/>	</cox>	<cox border="0" pai="924" son="925" width="0">		<text/>	</cox>	<cox border="0" pai="925" son="926" width="0">		<text/>	</cox>	<cox border="0" pai="927" son="928" width="0">		<text/>	</cox>
</mind>
